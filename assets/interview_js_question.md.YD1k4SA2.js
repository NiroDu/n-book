import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.D-6U7MZ9.js";const D=JSON.parse('{"title":"值得做一做的JS问题","description":"","frontmatter":{},"headers":[],"relativePath":"interview/js_question.md","filePath":"interview/js_question.md","lastUpdated":1752550410000}'),o={name:"interview/js_question.md"};function e(r,s,c,t,A,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="值得做一做的js问题" tabindex="-1">值得做一做的JS问题 <a class="header-anchor" href="#值得做一做的js问题" aria-label="Permalink to &quot;值得做一做的JS问题&quot;">​</a></h1><h2 id="_1-promise数组顺序输出" tabindex="-1">1.promise数组顺序输出 <a class="header-anchor" href="#_1-promise数组顺序输出" aria-label="Permalink to &quot;1.promise数组顺序输出&quot;">​</a></h2><p>问题：让这个array数组里的promise按顺序输出：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// 异步函数a</span></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#A7C080;"> a</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;"> ()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#E67E80;"> new</span><span style="color:#7FBBB3;"> Promise</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;"> (resolve,</span><span style="color:#D3C6AA;"> reject)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">    setTimeout</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;"> ()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;a&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#A7C080;">      resolve</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;a&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">    },</span><span style="color:#D699B6;"> 1000</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 异步函数b</span></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#A7C080;"> b</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;"> (data)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#E67E80;"> new</span><span style="color:#7FBBB3;"> Promise</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;"> (resolve,</span><span style="color:#D3C6AA;"> reject)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(data</span><span style="color:#E69875;"> +</span><span style="color:#DBBC7F;"> &#39;b&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#A7C080;">    resolve</span><span style="color:#D3C6AA;">(data</span><span style="color:#E69875;"> +</span><span style="color:#DBBC7F;"> &#39;b&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 异步函数c</span></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#A7C080;"> c</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;"> (data)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#E67E80;"> new</span><span style="color:#7FBBB3;"> Promise</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;"> (resolve,</span><span style="color:#D3C6AA;"> reject)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">    setTimeout</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;"> ()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(data</span><span style="color:#E69875;"> +</span><span style="color:#DBBC7F;"> &#39;c&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#A7C080;">      resolve</span><span style="color:#D3C6AA;">(data</span><span style="color:#E69875;"> +</span><span style="color:#DBBC7F;"> &#39;c&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">    },</span><span style="color:#D699B6;"> 500</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> array </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [];</span></span>
<span class="line"><span style="color:#D3C6AA;">array</span><span style="color:#859289;">.</span><span style="color:#A7C080;">push</span><span style="color:#D3C6AA;">(a,b,c);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p>按照顺序执行，大概跟在做求和运算时候的思想一样：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">//求和的时候通常这么做，先定义一个sum，然后依次往里做加法</span></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> sum </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 0</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">array</span><span style="color:#859289;">.</span><span style="color:#A7C080;">forEach</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">(item)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  sum</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> sum</span><span style="color:#E69875;"> +</span><span style="color:#D3C6AA;"> item;</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>回答一：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> queue</span><span style="color:#D3C6AA;">(arr)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 要得到一个then then then的promise链，先定义一个已经resolve了的promise</span></span>
<span class="line"><span style="color:#E69875;">  var</span><span style="color:#D3C6AA;"> sequence</span><span style="color:#E69875;"> =</span><span style="color:#7FBBB3;"> Promise</span><span style="color:#859289;">.</span><span style="color:#A7C080;">resolve</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#D3C6AA;">  arr</span><span style="color:#859289;">.</span><span style="color:#A7C080;">forEach</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;"> (item)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    sequence</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> sequence</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(item)</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> sequence</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 执行队列</span></span>
<span class="line"><span style="color:#A7C080;">queue</span><span style="color:#D3C6AA;">([a, b, c])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>回答二：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">async</span><span style="color:#E67E80;"> function</span><span style="color:#A7C080;"> queue</span><span style="color:#D3C6AA;">(arr)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  let</span><span style="color:#D3C6AA;"> res</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> null</span></span>
<span class="line"><span style="color:#E67E80;">  for</span><span style="color:#D3C6AA;"> (</span><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> promise</span><span style="color:#E67E80;"> of</span><span style="color:#D3C6AA;"> arr)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    res</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> await</span><span style="color:#A7C080;"> promise</span><span style="color:#D3C6AA;">(res)</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> res</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#A7C080;">queue</span><span style="color:#D3C6AA;">([a, b, c])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="_2-快速的让一个数组乱序" tabindex="-1">2. 快速的让一个数组乱序 <a class="header-anchor" href="#_2-快速的让一个数组乱序" aria-label="Permalink to &quot;2. 快速的让一个数组乱序&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> arr </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">2</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">3</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">4</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">5</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">6</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">7</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">8</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">9</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">10</span><span style="color:#D3C6AA;">];</span></span>
<span class="line"><span style="color:#D3C6AA;">arr</span><span style="color:#859289;">.</span><span style="color:#A7C080;">sort</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">(){</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> Math</span><span style="color:#859289;">.</span><span style="color:#A7C080;">random</span><span style="color:#D3C6AA;">()</span><span style="color:#E69875;"> -</span><span style="color:#D699B6;"> 0</span><span style="color:#D3C6AA;">.</span><span style="color:#D699B6;">5</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(arr);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_3-拍平二-多维数组" tabindex="-1">3. 拍平二/多维数组 <a class="header-anchor" href="#_3-拍平二-多维数组" aria-label="Permalink to &quot;3. 拍平二/多维数组&quot;">​</a></h2><p>方法一： 实验性API <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat" target="_blank" rel="noreferrer">Array.prototype.flat()</a></p><p>方法二：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> arr </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">2</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">3</span><span style="color:#D3C6AA;">, [</span><span style="color:#D699B6;">3</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">3</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">3</span><span style="color:#D3C6AA;">, [</span><span style="color:#D699B6;">5</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">4</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">5</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">6</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">6</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">7</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">8</span><span style="color:#D3C6AA;">]],[</span><span style="color:#D699B6;">333</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">4444</span><span style="color:#D3C6AA;">]];</span></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> product</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;"> // 1、创建一个空数组,</span></span>
<span class="line"><span style="color:#E69875;"> var</span><span style="color:#D3C6AA;"> newarr</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> [];</span></span>
<span class="line"><span style="color:#859289;font-style:italic;"> ///2、并且返回一个函数,函数参数为要拍平的数组</span></span>
<span class="line"><span style="color:#E67E80;"> return</span><span style="color:#E67E80;"> function</span><span style="color:#A7C080;"> flatten</span><span style="color:#D3C6AA;">(arr)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 3、循环数组，判断每一项,不为数组的话将其塞入newarr</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 若为数组,递归调用 faltten,并将结果与newarr合并</span></span>
<span class="line"><span style="color:#E67E80;">  for</span><span style="color:#D3C6AA;"> (</span><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> t</span><span style="color:#E67E80;"> of</span><span style="color:#D3C6AA;"> arr)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">   if</span><span style="color:#D3C6AA;"> (</span><span style="color:#E69875;">!</span><span style="color:#D3C6AA;">Array</span><span style="color:#859289;">.</span><span style="color:#A7C080;">isArray</span><span style="color:#D3C6AA;">(t))</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    newarr</span><span style="color:#859289;">.</span><span style="color:#A7C080;">push</span><span style="color:#D3C6AA;">(t);</span></span>
<span class="line"><span style="color:#D3C6AA;">   }</span><span style="color:#E67E80;"> else</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    newarr</span><span style="color:#859289;">.</span><span style="color:#A7C080;">concat</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">flatten</span><span style="color:#D3C6AA;">(t))</span></span>
<span class="line"><span style="color:#D3C6AA;">   }</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> newarr</span></span>
<span class="line"><span style="color:#D3C6AA;"> }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> flatten </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> product</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#A7C080;">flatten</span><span style="color:#D3C6AA;">(arr);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>方法三： 和上例一样的原理。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> arr </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">2</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">3</span><span style="color:#D3C6AA;">, [</span><span style="color:#D699B6;">3</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">3</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">3</span><span style="color:#D3C6AA;">, [</span><span style="color:#D699B6;">5</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">4</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">5</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">6</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">6</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">7</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">8</span><span style="color:#D3C6AA;">]],[</span><span style="color:#D699B6;">333</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">4444</span><span style="color:#D3C6AA;">]];</span></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> flatten</span><span style="color:#D3C6AA;">(arr){</span></span>
<span class="line"><span style="color:#E67E80;"> return</span><span style="color:#D3C6AA;"> arr</span><span style="color:#859289;">.</span><span style="color:#A7C080;">reduce</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">(pre,cur){</span></span>
<span class="line"><span style="color:#E67E80;">  if</span><span style="color:#D3C6AA;">(</span><span style="color:#E69875;">!</span><span style="color:#D3C6AA;">Array</span><span style="color:#859289;">.</span><span style="color:#A7C080;">isArray</span><span style="color:#D3C6AA;">(cur)){</span></span>
<span class="line"><span style="color:#E67E80;">   return</span><span style="color:#D3C6AA;"> [</span><span style="color:#E69875;">...</span><span style="color:#D3C6AA;">pre,</span><span style="color:#D3C6AA;"> cur];</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span><span style="color:#E67E80;">else</span><span style="color:#D3C6AA;">{</span></span>
<span class="line"><span style="color:#E67E80;">   return</span><span style="color:#D3C6AA;"> [</span><span style="color:#E69875;">...</span><span style="color:#D3C6AA;">pre,</span><span style="color:#E69875;"> ...</span><span style="color:#A7C080;">flatten</span><span style="color:#D3C6AA;">(cur)]</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;"> },[])</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#A7C080;">flatten</span><span style="color:#D3C6AA;">(arr);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="_4-如何渲染几万条数据并不卡住界面" tabindex="-1">4. 如何渲染几万条数据并不卡住界面 <a class="header-anchor" href="#_4-如何渲染几万条数据并不卡住界面" aria-label="Permalink to &quot;4. 如何渲染几万条数据并不卡住界面&quot;">​</a></h2><p>这道题考察了如何在不卡住页面的情况下渲染数据，也就是说不能一次性将几万条都渲染出来，而应该一次渲染部分 DOM，那么就可以通过 <code>requestAnimationFrame</code> 来每 16 ms 刷新一次</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">&lt;</span><span style="color:#E69875;">ul</span><span style="color:#D3C6AA;">&gt;控件&lt;/</span><span style="color:#E69875;">ul</span><span style="color:#D3C6AA;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">setTimeout</span><span style="color:#D3C6AA;">(() </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 插入十万条数据</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> total </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 100000</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 一次插入 20 条，如果觉得性能不好就减少</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> once </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 20</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 渲染数据总共需要几次</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> loopCount </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> total </span><span style="color:#E69875;">/</span><span style="color:#D3C6AA;"> once</span></span>
<span class="line"><span style="color:#E69875;">  let</span><span style="color:#D3C6AA;"> countOfRender </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 0</span></span>
<span class="line"><span style="color:#E69875;">  let</span><span style="color:#D3C6AA;"> ul </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> document</span><span style="color:#859289;">.</span><span style="color:#A7C080;">querySelector</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;ul&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#E67E80;">  function</span><span style="color:#A7C080;"> add</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // 优化性能，插入不会造成回流</span></span>
<span class="line"><span style="color:#E69875;">    const</span><span style="color:#D3C6AA;"> fragment</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> document</span><span style="color:#859289;">.</span><span style="color:#A7C080;">createDocumentFragment</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#E67E80;">    for</span><span style="color:#D3C6AA;"> (</span><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> i</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> 0</span><span style="color:#D3C6AA;">;</span><span style="color:#D3C6AA;"> i</span><span style="color:#E69875;"> &lt;</span><span style="color:#D3C6AA;"> once;</span><span style="color:#D3C6AA;"> i</span><span style="color:#E69875;">++</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> li</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> document</span><span style="color:#859289;">.</span><span style="color:#A7C080;">createElement</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;li&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">      li</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">innerText</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> Math</span><span style="color:#859289;">.</span><span style="color:#A7C080;">floor</span><span style="color:#D3C6AA;">(Math</span><span style="color:#859289;">.</span><span style="color:#A7C080;">random</span><span style="color:#D3C6AA;">()</span><span style="color:#E69875;"> *</span><span style="color:#D3C6AA;"> total);</span></span>
<span class="line"><span style="color:#D3C6AA;">      fragment</span><span style="color:#859289;">.</span><span style="color:#A7C080;">appendChild</span><span style="color:#D3C6AA;">(li);</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">    ul</span><span style="color:#859289;">.</span><span style="color:#A7C080;">appendChild</span><span style="color:#D3C6AA;">(fragment);</span></span>
<span class="line"><span style="color:#D3C6AA;">    countOfRender</span><span style="color:#E69875;"> +=</span><span style="color:#D699B6;"> 1</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#A7C080;">    loop</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#E67E80;">  function</span><span style="color:#A7C080;"> loop</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    if</span><span style="color:#D3C6AA;"> (countOfRender</span><span style="color:#E69875;"> &lt;</span><span style="color:#D3C6AA;"> loopCount)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">      window</span><span style="color:#859289;">.</span><span style="color:#A7C080;">requestAnimationFrame</span><span style="color:#D3C6AA;">(add);</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#A7C080;">  loop</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#D3C6AA;">}, </span><span style="color:#D699B6;">0</span><span style="color:#D3C6AA;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h2 id="_5-数组去重方法十一法" tabindex="-1">5. 数组去重方法十一法 <a class="header-anchor" href="#_5-数组去重方法十一法" aria-label="Permalink to &quot;5. 数组去重方法十一法&quot;">​</a></h2><p><strong>方法一、利用ES6 Set去重</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> unique </span><span style="color:#D3C6AA;">(arr)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> Array</span><span style="color:#859289;">.</span><span style="color:#A7C080;">from</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">new</span><span style="color:#A7C080;"> Set</span><span style="color:#D3C6AA;">(arr))</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> arr </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">,</span><span style="color:#DBBC7F;">&#39;true&#39;</span><span style="color:#D3C6AA;">,</span><span style="color:#DBBC7F;">&#39;true&#39;</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">true</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">true</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">15</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">15</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">false</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">false</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">undefined</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">undefined</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">null</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">null</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">NaN</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">NaN</span><span style="color:#D3C6AA;">,</span><span style="color:#DBBC7F;">&#39;NaN&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">0</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">0</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;a&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;a&#39;</span><span style="color:#D3C6AA;">,{},{}];</span></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">unique</span><span style="color:#D3C6AA;">(arr))</span></span>
<span class="line"><span style="color:#859289;font-style:italic;"> //[1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, {}, {}]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>方法二、利用for嵌套for，然后splice去重</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> unique</span><span style="color:#D3C6AA;">(arr){</span><span style="color:#A7C080;">            </span></span>
<span class="line"><span style="color:#E67E80;">  for</span><span style="color:#D3C6AA;">(</span><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> i</span><span style="color:#E69875;">=</span><span style="color:#D699B6;">0</span><span style="color:#D3C6AA;">;</span><span style="color:#D3C6AA;"> i</span><span style="color:#E69875;">&lt;</span><span style="color:#D3C6AA;">arr</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">length;</span><span style="color:#D3C6AA;"> i</span><span style="color:#E69875;">++</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    for</span><span style="color:#D3C6AA;">(</span><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> j</span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;">i</span><span style="color:#E69875;">+</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">;</span><span style="color:#D3C6AA;"> j</span><span style="color:#E69875;">&lt;</span><span style="color:#D3C6AA;">arr</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">length;</span><span style="color:#D3C6AA;"> j</span><span style="color:#E69875;">++</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">      if</span><span style="color:#D3C6AA;">(arr[i]</span><span style="color:#E69875;">==</span><span style="color:#D3C6AA;">arr[j]){</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">        //第一个等同于第二个，splice方法删除第二个</span></span>
<span class="line"><span style="color:#D3C6AA;">        arr</span><span style="color:#859289;">.</span><span style="color:#A7C080;">splice</span><span style="color:#D3C6AA;">(j,</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">        j</span><span style="color:#E69875;">--</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">      }</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> arr;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> arr </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">,</span><span style="color:#DBBC7F;">&#39;true&#39;</span><span style="color:#D3C6AA;">,</span><span style="color:#DBBC7F;">&#39;true&#39;</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">true</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">true</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">15</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">15</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">false</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">false</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">undefined</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">undefined</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">null</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">null</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">NaN</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">NaN</span><span style="color:#D3C6AA;">,</span><span style="color:#DBBC7F;">&#39;NaN&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">0</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">0</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;a&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;a&#39;</span><span style="color:#D3C6AA;">,{},{}];</span></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">unique</span><span style="color:#D3C6AA;">(arr))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><strong>方法三、利用includes</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> unique</span><span style="color:#D3C6AA;">(arr)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  if</span><span style="color:#D3C6AA;"> (</span><span style="color:#E69875;">!</span><span style="color:#D3C6AA;">Array</span><span style="color:#859289;">.</span><span style="color:#A7C080;">isArray</span><span style="color:#D3C6AA;">(arr))</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#E69875;">  var</span><span style="color:#D3C6AA;"> array</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;">[];</span></span>
<span class="line"><span style="color:#E67E80;">  for</span><span style="color:#D3C6AA;">(</span><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> i</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> 0</span><span style="color:#D3C6AA;">;</span><span style="color:#D3C6AA;"> i</span><span style="color:#E69875;"> &lt;</span><span style="color:#D3C6AA;"> arr</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">length;</span><span style="color:#D3C6AA;"> i</span><span style="color:#E69875;">++</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    if</span><span style="color:#D3C6AA;">(</span><span style="color:#E69875;">!</span><span style="color:#D3C6AA;">array</span><span style="color:#859289;">.</span><span style="color:#A7C080;">includes</span><span style="color:#D3C6AA;">(</span><span style="color:#D3C6AA;"> arr[i]))</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">      //includes 检测数组是否有某个值</span></span>
<span class="line"><span style="color:#D3C6AA;">      array</span><span style="color:#859289;">.</span><span style="color:#A7C080;">push</span><span style="color:#D3C6AA;">(arr[i]);</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> array</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> arr </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">,</span><span style="color:#DBBC7F;">&#39;true&#39;</span><span style="color:#D3C6AA;">,</span><span style="color:#DBBC7F;">&#39;true&#39;</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">true</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">true</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">15</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">15</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">false</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">false</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">undefined</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">undefined</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">null</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">null</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">NaN</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">NaN</span><span style="color:#D3C6AA;">,</span><span style="color:#DBBC7F;">&#39;NaN&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">0</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">0</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;a&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;a&#39;</span><span style="color:#D3C6AA;">,{},{}];</span></span>
<span class="line"><span style="color:#A7C080;">unique</span><span style="color:#D3C6AA;">(arr)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p><strong>最简短方法</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;"> var</span><span style="color:#D3C6AA;"> arr </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">,</span><span style="color:#DBBC7F;">&#39;true&#39;</span><span style="color:#D3C6AA;">,</span><span style="color:#DBBC7F;">&#39;true&#39;</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">true</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">true</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">15</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">15</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">false</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">false</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">undefined</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">undefined</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">null</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">null</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">NaN</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">NaN</span><span style="color:#D3C6AA;">,</span><span style="color:#DBBC7F;">&#39;NaN&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">0</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">0</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;a&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;a&#39;</span><span style="color:#D3C6AA;">,{},{}];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">[</span><span style="color:#E69875;">...</span><span style="color:#E67E80;">new</span><span style="color:#A7C080;"> Set</span><span style="color:#D3C6AA;">(arr)]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><a href="http://blog.poetries.top/FE-Interview-Questions/base/#_74-%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93" target="_blank" rel="noreferrer">参考</a></p><h2 id="_6-写一段js程序提取url中的各个get参数" tabindex="-1">6. 写一段JS程序提取URL中的各个GET参数 <a class="header-anchor" href="#_6-写一段js程序提取url中的各个get参数" aria-label="Permalink to &quot;6. 写一段JS程序提取URL中的各个GET参数&quot;">​</a></h2><p>有这样一个URL：<code>http://item.taobao.com/item.htm?a=1&amp;b=2&amp;c=&amp;d=xxx&amp;e</code>，请写一段JS程序提取URL中的各个GET参数(参数名和参数个数不确定)，将其按key-value形式返回到一个json结构中，如<code>{a:&#39;1&#39;, b:&#39;2&#39;, c:&#39;&#39;, d:&#39;xxx&#39;, e:undefined}</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> serilizeUrl</span><span style="color:#D3C6AA;">(url)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  var</span><span style="color:#D3C6AA;"> result</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> {};</span></span>
<span class="line"><span style="color:#D3C6AA;">  url</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> url</span><span style="color:#859289;">.</span><span style="color:#A7C080;">split</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;?&quot;</span><span style="color:#D3C6AA;">)[</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">];</span></span>
<span class="line"><span style="color:#E69875;">  var</span><span style="color:#D3C6AA;"> map</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> url</span><span style="color:#859289;">.</span><span style="color:#A7C080;">split</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;&amp;&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#E67E80;">  for</span><span style="color:#D3C6AA;">(</span><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> i</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> 0</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> len</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> map</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">length;</span><span style="color:#D3C6AA;"> i</span><span style="color:#E69875;"> &lt;</span><span style="color:#D3C6AA;"> len;</span><span style="color:#D3C6AA;"> i</span><span style="color:#E69875;">++</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    result[map[i]</span><span style="color:#859289;">.</span><span style="color:#A7C080;">split</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;=&quot;</span><span style="color:#D3C6AA;">)[</span><span style="color:#D699B6;">0</span><span style="color:#D3C6AA;">]]</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> map[i]</span><span style="color:#859289;">.</span><span style="color:#A7C080;">split</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;=&quot;</span><span style="color:#D3C6AA;">)[</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">];</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> result;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="_7-在一个对象数组中查找一个指定的对象是否存在" tabindex="-1">7. 在一个对象数组中查找一个指定的对象是否存在 <a class="header-anchor" href="#_7-在一个对象数组中查找一个指定的对象是否存在" aria-label="Permalink to &quot;7. 在一个对象数组中查找一个指定的对象是否存在&quot;">​</a></h2><p>存在返回其index，不存在返回 -1</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> cities </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [{a</span><span style="color:#859289;">:</span><span style="color:#D699B6;">2</span><span style="color:#D3C6AA;">},{c</span><span style="color:#859289;">:</span><span style="color:#D699B6;">3</span><span style="color:#D3C6AA;">},{d</span><span style="color:#859289;">:</span><span style="color:#D699B6;">4</span><span style="color:#D3C6AA;">}]</span></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> city </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {c</span><span style="color:#859289;">:</span><span style="color:#D699B6;">3</span><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> find</span><span style="color:#D3C6AA;">(list,</span><span style="color:#D3C6AA;"> elem)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  for</span><span style="color:#D3C6AA;"> (</span><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> i</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> 0</span><span style="color:#D3C6AA;">;</span><span style="color:#D3C6AA;"> i</span><span style="color:#E69875;"> &lt;</span><span style="color:#D3C6AA;"> list</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">length;</span><span style="color:#D3C6AA;"> i</span><span style="color:#E69875;">++</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">    let</span><span style="color:#D3C6AA;"> current</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> list[i];</span></span>
<span class="line"><span style="color:#E67E80;">    for</span><span style="color:#D3C6AA;"> (key</span><span style="color:#E67E80;"> in</span><span style="color:#D3C6AA;"> current)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">      if</span><span style="color:#D3C6AA;"> (elem[key]</span><span style="color:#E69875;"> ===</span><span style="color:#D3C6AA;"> current[key])</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">        return</span><span style="color:#D3C6AA;"> i;</span></span>
<span class="line"><span style="color:#D3C6AA;">      }</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#E69875;"> -</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">find</span><span style="color:#D3C6AA;">(cities, city);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="_8-计算数组中每个元素出现的次数" tabindex="-1">8. 计算数组中每个元素出现的次数 <a class="header-anchor" href="#_8-计算数组中每个元素出现的次数" aria-label="Permalink to &quot;8. 计算数组中每个元素出现的次数&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> names </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [</span><span style="color:#DBBC7F;">&#39;Alice&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;Bob&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;Tiff&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;Bruce&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;Alice&#39;</span><span style="color:#D3C6AA;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> countedNames </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> names</span><span style="color:#859289;">.</span><span style="color:#A7C080;">reduce</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;"> (allNames,</span><span style="color:#D3C6AA;"> name)</span><span style="color:#D3C6AA;"> {</span><span style="color:#A7C080;"> </span></span>
<span class="line"><span style="color:#E67E80;">  if</span><span style="color:#D3C6AA;"> (name</span><span style="color:#E67E80;"> in</span><span style="color:#D3C6AA;"> allNames)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    allNames[name]</span><span style="color:#E69875;">++</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#E67E80;">  else</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    allNames[name]</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> 1</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> allNames;</span></span>
<span class="line"><span style="color:#D3C6AA;">}, {});</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// countedNames is:</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// { &#39;Alice&#39;: 2, &#39;Bob&#39;: 1, &#39;Tiff&#39;: 1, &#39;Bruce&#39;: 1 }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="_9-按属性对object分类" tabindex="-1">9. 按属性对object分类 <a class="header-anchor" href="#_9-按属性对object分类" aria-label="Permalink to &quot;9. 按属性对object分类&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> people </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [</span></span>
<span class="line"><span style="color:#D3C6AA;">  { name</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;Alice&#39;</span><span style="color:#D3C6AA;">, age</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 21</span><span style="color:#D3C6AA;"> },</span></span>
<span class="line"><span style="color:#D3C6AA;">  { name</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;Max&#39;</span><span style="color:#D3C6AA;">, age</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 20</span><span style="color:#D3C6AA;"> },</span></span>
<span class="line"><span style="color:#D3C6AA;">  { name</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;Jane&#39;</span><span style="color:#D3C6AA;">, age</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 20</span><span style="color:#D3C6AA;"> }</span></span>
<span class="line"><span style="color:#D3C6AA;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> groupBy</span><span style="color:#D3C6AA;">(objectArray,</span><span style="color:#D3C6AA;"> property)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> objectArray</span><span style="color:#859289;">.</span><span style="color:#A7C080;">reduce</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;"> (acc,</span><span style="color:#D3C6AA;"> obj)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">    var</span><span style="color:#D3C6AA;"> key</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> obj[property];</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // 为什么用中括号取对象值，而不用点(.)?</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // https://blog.csdn.net/qq_35772366/article/details/79270468</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // .是直接.属性的名字，[]里的索引存放的与属性名字相同的 字符串 </span></span>
<span class="line"><span style="color:#E67E80;">    if</span><span style="color:#D3C6AA;"> (</span><span style="color:#E69875;">!</span><span style="color:#D3C6AA;">acc[key])</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">      acc[key]</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> [];</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">    acc[key]</span><span style="color:#859289;">.</span><span style="color:#A7C080;">push</span><span style="color:#D3C6AA;">(obj);</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> acc;</span></span>
<span class="line"><span style="color:#D3C6AA;">  },</span><span style="color:#D3C6AA;"> {});</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> groupedPeople </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> groupBy</span><span style="color:#D3C6AA;">(people, </span><span style="color:#DBBC7F;">&#39;age&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// groupedPeople is:</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// { </span></span>
<span class="line"><span style="color:#859289;font-style:italic;">//   20: [</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">//     { name: &#39;Max&#39;, age: 20 }, </span></span>
<span class="line"><span style="color:#859289;font-style:italic;">//     { name: &#39;Jane&#39;, age: 20 }</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">//   ], </span></span>
<span class="line"><span style="color:#859289;font-style:italic;">//   21: [{ name: &#39;Alice&#39;, age: 21 }] </span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h2 id="_10-使用-promise-完成图片的加载。" tabindex="-1">10. 使用 Promise 完成图片的加载。 <a class="header-anchor" href="#_10-使用-promise-完成图片的加载。" aria-label="Permalink to &quot;10. 使用 Promise 完成图片的加载。&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">var</span><span style="color:#A7C080;"> preloadImage</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;"> (path)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#E67E80;"> new</span><span style="color:#7FBBB3;"> Promise</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;"> (resolve,</span><span style="color:#D3C6AA;"> reject)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">    var</span><span style="color:#D3C6AA;"> image</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> Image</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#D3C6AA;">    image</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">onload</span><span style="color:#E69875;">  =</span><span style="color:#D3C6AA;"> resolve;</span></span>
<span class="line"><span style="color:#D3C6AA;">    image</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">onerror</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> reject;</span></span>
<span class="line"><span style="color:#D3C6AA;">    image</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">src</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> path;</span></span>
<span class="line"><span style="color:#D3C6AA;">  });</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">preloadImage</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;https://xxx/xx.jpg&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#859289;">  .</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;"> (e)</span><span style="color:#D3C6AA;"> {</span><span style="color:#D3C6AA;"> document</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">body</span><span style="color:#859289;">.</span><span style="color:#A7C080;">append</span><span style="color:#D3C6AA;">(e</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">target)</span><span style="color:#D3C6AA;"> })</span></span>
<span class="line"><span style="color:#859289;">  .</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;"> ()</span><span style="color:#D3C6AA;"> {</span><span style="color:#D3C6AA;"> console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;加载成功&#39;</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="_11-duplicate-1-2-3-4-5" tabindex="-1">11. duplicate([1,2,3,4,5]); <a class="header-anchor" href="#_11-duplicate-1-2-3-4-5" aria-label="Permalink to &quot;11. duplicate([1,2,3,4,5]);&quot;">​</a></h2><p>输出 [1,2,3,4,5,1,2,3,4,5]</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> duplicate</span><span style="color:#D3C6AA;">(arr){</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 一定要把初始的数组长度先保存再遍历，不然数组长度会一直增加</span></span>
<span class="line"><span style="color:#E69875;">  var</span><span style="color:#D3C6AA;"> length</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> arr</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">length;</span></span>
<span class="line"><span style="color:#E67E80;">  for</span><span style="color:#D3C6AA;">(</span><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> i</span><span style="color:#E69875;">=</span><span style="color:#D699B6;">0</span><span style="color:#D3C6AA;">;</span><span style="color:#D3C6AA;"> i</span><span style="color:#E69875;">&lt;</span><span style="color:#D3C6AA;">length;</span><span style="color:#D3C6AA;"> i</span><span style="color:#E69875;">++</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    arr</span><span style="color:#859289;">.</span><span style="color:#A7C080;">push</span><span style="color:#D3C6AA;">(arr[i]);</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> arr;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="叠加" tabindex="-1">叠加 <a class="header-anchor" href="#叠加" aria-label="Permalink to &quot;叠加&quot;">​</a></h2><p>输出</p><p>add(2, 5); // 7</p><p>add(2)(5); // 7</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> add</span><span style="color:#D3C6AA;">(x,y)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  if</span><span style="color:#D3C6AA;">(arguments</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">length</span><span style="color:#E69875;"> ==</span><span style="color:#D699B6;"> 1</span><span style="color:#D3C6AA;">){</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">(y)</span><span style="color:#D3C6AA;"> {</span><span style="color:#E67E80;"> return</span><span style="color:#D3C6AA;"> x</span><span style="color:#E69875;"> +</span><span style="color:#D3C6AA;"> y;</span><span style="color:#D3C6AA;"> };</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span><span style="color:#E67E80;"> else</span><span style="color:#D3C6AA;">{</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> x</span><span style="color:#E69875;">+</span><span style="color:#D3C6AA;">y;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">add</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">2</span><span style="color:#D3C6AA;">)(</span><span style="color:#D699B6;">5</span><span style="color:#D3C6AA;">));</span></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">add</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">2</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">5</span><span style="color:#D3C6AA;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>`,51)]))}const C=n(o,[["render",e]]);export{D as __pageData,C as default};
