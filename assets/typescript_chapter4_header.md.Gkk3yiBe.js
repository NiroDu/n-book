import{_ as n,c as a,o as p,ag as l}from"./chunks/framework.D-6U7MZ9.js";const d=JSON.parse('{"title":"处理请求 header","description":"","frontmatter":{},"headers":[],"relativePath":"typescript/chapter4/header.md","filePath":"typescript/chapter4/header.md","lastUpdated":1562065220000}'),e={name:"typescript/chapter4/header.md"};function o(r,s,c,t,y,i){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="处理请求-header" tabindex="-1">处理请求 header <a class="header-anchor" href="#处理请求-header" aria-label="Permalink to &quot;处理请求 header&quot;">​</a></h1><h2 id="需求分析" tabindex="-1">需求分析 <a class="header-anchor" href="#需求分析" aria-label="Permalink to &quot;需求分析&quot;">​</a></h2><p>我们上节课遗留了一个问题：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">axios</span><span style="color:#D3C6AA;">({</span></span>
<span class="line"><span style="color:#D3C6AA;">  method</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;post&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  url</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;/base/post&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  data</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    a</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 1</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">    b</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 2</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>我们做了请求数据的处理，把 <code>data</code> 转换成了 JSON 字符串，但是数据发送到服务端的时候，服务端并不能正常解析我们发送的数据，因为我们并没有给请求 <code>header</code> 设置正确的 <code>Content-Type </code>。</p><p>所以首先我们要支持发送请求的时候，可以支持配置 <code>headers</code> 属性，如下：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">axios</span><span style="color:#D3C6AA;">({</span></span>
<span class="line"><span style="color:#D3C6AA;">  method</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;post&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  url</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;/base/post&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  headers</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#DBBC7F;">    &#39;content-type&#39;</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;application/json;charset=utf-8&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">  },</span></span>
<span class="line"><span style="color:#D3C6AA;">  data</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    a</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 1</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">    b</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 2</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>并且在当我们传入的 <code>data</code> 为普通对象的时候，<code>headers</code> 如果没有配置 <code>Content-Type</code> 属性，需要自动设置请求 <code>header</code> 的 <code>Content-Type</code> 字段为：<code>application/json;charset=utf-8</code>。</p><h2 id="processheaders-函数实现" tabindex="-1">processHeaders 函数实现 <a class="header-anchor" href="#processheaders-函数实现" aria-label="Permalink to &quot;processHeaders 函数实现&quot;">​</a></h2><p>根据需求分析，我们要实现一个工具函数，对 request 中的 <code>headers</code> 做一层加工。我们在 <code>helpers</code> 目录新建 <code>headers.ts</code> 文件。</p><p><code>helpers/headers.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">import</span><span style="color:#D3C6AA;"> { isPlainObject } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;./util&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> normalizeHeaderName </span><span style="color:#D3C6AA;">(headers</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> normalizedName</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> void</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  if</span><span style="color:#D3C6AA;"> (</span><span style="color:#E69875;">!</span><span style="color:#D3C6AA;">headers)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">  Object</span><span style="color:#859289;">.</span><span style="color:#A7C080;">keys</span><span style="color:#D3C6AA;">(headers)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">forEach</span><span style="color:#D3C6AA;">(name</span><span style="color:#E69875;"> =&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    if</span><span style="color:#D3C6AA;"> (name</span><span style="color:#E69875;"> !==</span><span style="color:#D3C6AA;"> normalizedName</span><span style="color:#E69875;"> &amp;&amp;</span><span style="color:#D3C6AA;"> name</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toUpperCase</span><span style="color:#D3C6AA;">()</span><span style="color:#E69875;"> ===</span><span style="color:#D3C6AA;"> normalizedName</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toUpperCase</span><span style="color:#D3C6AA;">())</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">      headers[normalizedName]</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> headers[name]</span></span>
<span class="line"><span style="color:#E67E80;">      delete</span><span style="color:#D3C6AA;"> headers[name]</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> function</span><span style="color:#A7C080;"> processHeaders </span><span style="color:#D3C6AA;">(headers</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> data</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">  normalizeHeaderName</span><span style="color:#D3C6AA;">(headers,</span><span style="color:#DBBC7F;"> &#39;Content-Type&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#A7C080;">  </span></span>
<span class="line"><span style="color:#E67E80;">  if</span><span style="color:#D3C6AA;"> (</span><span style="color:#A7C080;">isPlainObject</span><span style="color:#D3C6AA;">(data))</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    if</span><span style="color:#D3C6AA;"> (headers</span><span style="color:#E69875;"> &amp;&amp;</span><span style="color:#E69875;"> !</span><span style="color:#D3C6AA;">headers[</span><span style="color:#DBBC7F;">&#39;Content-Type&#39;</span><span style="color:#D3C6AA;">])</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">      headers[</span><span style="color:#DBBC7F;">&#39;Content-Type&#39;</span><span style="color:#D3C6AA;">]</span><span style="color:#E69875;"> =</span><span style="color:#DBBC7F;"> &#39;application/json;charset=utf-8&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> headers</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>这里有个需要注意的点，因为请求 <code>header</code> 属性是大小写不敏感的，比如我们之前的例子传入 <code>header</code> 的属性名 <code>content-type</code> 就是全小写的，所以我们先要把一些 <code>header</code> 属性名规范化。</p><h2 id="实现请求-header-处理逻辑" tabindex="-1">实现请求 header 处理逻辑 <a class="header-anchor" href="#实现请求-header-处理逻辑" aria-label="Permalink to &quot;实现请求 header 处理逻辑&quot;">​</a></h2><p>在这之前，我们先修改一下 <code>AxiosRequestConfig</code> 接口类型的定义，添加 <code>headers</code> 这个可选属性：</p><p><code>types/index.ts</code></p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> interface</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  url</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span></span>
<span class="line"><span style="color:#D3C6AA;">  method</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Method</span></span>
<span class="line"><span style="color:#D3C6AA;">  data</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span></span>
<span class="line"><span style="color:#D3C6AA;">  params</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span></span>
<span class="line"><span style="color:#D3C6AA;">  headers</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><code>index.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> processConfig </span><span style="color:#D3C6AA;">(config</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> void</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  config</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">url</span><span style="color:#E69875;"> =</span><span style="color:#A7C080;"> transformURL</span><span style="color:#D3C6AA;">(config)</span></span>
<span class="line"><span style="color:#D3C6AA;">  config</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">headers</span><span style="color:#E69875;"> =</span><span style="color:#A7C080;"> transformHeaders</span><span style="color:#D3C6AA;">(config)</span></span>
<span class="line"><span style="color:#D3C6AA;">  config</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">data</span><span style="color:#E69875;"> =</span><span style="color:#A7C080;"> transformRequestData</span><span style="color:#D3C6AA;">(config)</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> transformHeaders </span><span style="color:#D3C6AA;">(config</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> {</span><span style="color:#D3C6AA;"> headers</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> {},</span><span style="color:#D3C6AA;"> data</span><span style="color:#D3C6AA;"> }</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> config</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#A7C080;"> processHeaders</span><span style="color:#D3C6AA;">(headers,</span><span style="color:#D3C6AA;"> data)</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>因为我们处理 <code>header</code> 的时候依赖了 <code>data</code>，所以要在处理请求 <code>body</code> 数据之前处理请求 <code>header</code>。</p><p><code>xhr.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> default</span><span style="color:#E67E80;"> function</span><span style="color:#A7C080;"> xhr </span><span style="color:#D3C6AA;">(config</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> void</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> {</span><span style="color:#D3C6AA;"> data</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> null</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> url,</span><span style="color:#D3C6AA;"> method</span><span style="color:#E69875;"> =</span><span style="color:#DBBC7F;"> &#39;get&#39;</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> headers</span><span style="color:#D3C6AA;"> }</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> config</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> request</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> XMLHttpRequest</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">  request</span><span style="color:#859289;">.</span><span style="color:#A7C080;">open</span><span style="color:#D3C6AA;">(method</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toUpperCase</span><span style="color:#D3C6AA;">(),</span><span style="color:#D3C6AA;"> url,</span><span style="color:#D699B6;"> true</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">  Object</span><span style="color:#859289;">.</span><span style="color:#A7C080;">keys</span><span style="color:#D3C6AA;">(headers)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">forEach</span><span style="color:#D3C6AA;">((name)</span><span style="color:#E69875;"> =&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    if</span><span style="color:#D3C6AA;"> (data</span><span style="color:#E69875;"> ===</span><span style="color:#D699B6;"> null</span><span style="color:#E69875;"> &amp;&amp;</span><span style="color:#D3C6AA;"> name</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toLowerCase</span><span style="color:#D3C6AA;">()</span><span style="color:#E69875;"> ===</span><span style="color:#DBBC7F;"> &#39;content-type&#39;</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">      delete</span><span style="color:#D3C6AA;"> headers[name]</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span><span style="color:#E67E80;"> else</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">      request</span><span style="color:#859289;">.</span><span style="color:#A7C080;">setRequestHeader</span><span style="color:#D3C6AA;">(name,</span><span style="color:#D3C6AA;"> headers[name])</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">  request</span><span style="color:#859289;">.</span><span style="color:#A7C080;">send</span><span style="color:#D3C6AA;">(data)</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>这里要额外判断一个逻辑，当我们传入的 <code>data</code> 为空的时候，请求 <code>header</code> 配置 <code>Content-Type</code> 是没有意义的，于是我们把它删除。</p><h2 id="demo-编写" tabindex="-1">demo 编写 <a class="header-anchor" href="#demo-编写" aria-label="Permalink to &quot;demo 编写&quot;">​</a></h2><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">axios</span><span style="color:#D3C6AA;">({</span></span>
<span class="line"><span style="color:#D3C6AA;">  method</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;post&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  url</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;/base/post&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  data</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    a</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 1</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">    b</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 2</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">axios</span><span style="color:#D3C6AA;">({</span></span>
<span class="line"><span style="color:#D3C6AA;">  method</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;post&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  url</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;/base/post&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  headers</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#DBBC7F;">    &#39;content-type&#39;</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;application/json;&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">  },</span></span>
<span class="line"><span style="color:#D3C6AA;">  data</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    a</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 1</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">    b</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 2</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> paramsString </span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;"> &#39;q=URLUtils.searchParams&amp;topic=api&#39;</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> searchParams </span><span style="color:#E69875;">=</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> URLSearchParams</span><span style="color:#D3C6AA;">(paramsString)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">axios</span><span style="color:#D3C6AA;">({</span></span>
<span class="line"><span style="color:#D3C6AA;">  method</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;post&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  url</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;/base/post&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  data</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> searchParams</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>通过 demo 我们可以看到，当我们请求的数据是普通对象并且没有配置 <code>headers</code> 的时候，会自动为其添加 <code>Content-Type:application/json;charset=utf-8</code>；同时我们发现当 data 是某些类型如 <code>URLSearchParams</code> 的时候，浏览器会自动为请求 <code>header</code>加上合适的 <code>Content-Type</code>。</p><p>至此我们对于请求的处理逻辑暂时告一段落。目前我们的请求从网络层面是可以收到服务端的响应的，下一节课我们就从代码层面来处理服务端响应，并且让调用方可以拿到从服务端返回的数据。</p>`,27)]))}const C=n(e,[["render",o]]);export{d as __pageData,C as default};
