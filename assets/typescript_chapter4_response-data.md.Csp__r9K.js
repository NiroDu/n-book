import{_ as a,c as n,o as p,ag as e}from"./chunks/framework.D-6U7MZ9.js";const A=JSON.parse('{"title":"处理响应 data","description":"","frontmatter":{},"headers":[],"relativePath":"typescript/chapter4/response-data.md","filePath":"typescript/chapter4/response-data.md","lastUpdated":1562065220000}'),l={name:"typescript/chapter4/response-data.md"};function o(r,s,t,c,i,y){return p(),n("div",null,s[0]||(s[0]=[e(`<h1 id="处理响应-data" tabindex="-1">处理响应 data <a class="header-anchor" href="#处理响应-data" aria-label="Permalink to &quot;处理响应 data&quot;">​</a></h1><h2 id="需求分析" tabindex="-1">需求分析 <a class="header-anchor" href="#需求分析" aria-label="Permalink to &quot;需求分析&quot;">​</a></h2><p>在我们不去设置 <code>responseType</code> 的情况下，当服务端返回给我们的数据是字符串类型，我们可以尝试去把它转换成一个 JSON 对象。例如：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span>data: &quot;{&quot;a&quot;:1,&quot;b&quot;:2}&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>我们把它转换成：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">data: {</span></span>
<span class="line"><span style="color:#D3C6AA;">  a</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 1</span><span style="color:#859289;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  b</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 2</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="transformresponse-函数实现及应用" tabindex="-1">transformResponse 函数实现及应用 <a class="header-anchor" href="#transformresponse-函数实现及应用" aria-label="Permalink to &quot;transformResponse 函数实现及应用&quot;">​</a></h2><p>根据需求分析，我们要实现一个 <code>transformResponse</code> 工具函数。</p><p><code>helpers/data.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> function</span><span style="color:#A7C080;"> transformResponse</span><span style="color:#D3C6AA;">(data</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  if</span><span style="color:#D3C6AA;"> (</span><span style="color:#E67E80;">typeof</span><span style="color:#D3C6AA;"> data</span><span style="color:#E69875;"> ===</span><span style="color:#DBBC7F;"> &#39;string&#39;</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    try</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">      data</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> JSON</span><span style="color:#859289;">.</span><span style="color:#A7C080;">parse</span><span style="color:#D3C6AA;">(data)</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span><span style="color:#E67E80;"> catch</span><span style="color:#D3C6AA;"> (e)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">      // do nothing</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> data</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><code>index.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> axios</span><span style="color:#D3C6AA;">(config</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosPromise</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">  processConfig</span><span style="color:#D3C6AA;">(config)</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#A7C080;"> xhr</span><span style="color:#D3C6AA;">(config)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">((res)</span><span style="color:#E69875;"> =&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#A7C080;"> transformResponseData</span><span style="color:#D3C6AA;">(res)</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> transformResponseData</span><span style="color:#D3C6AA;">(res</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosResponse</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosResponse</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  res</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">data</span><span style="color:#E69875;"> =</span><span style="color:#A7C080;"> transformResponse</span><span style="color:#D3C6AA;">(res</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">data)</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> res</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>接着我们再去看刚才的 demo，发现我们已经把响应的 <code>data</code> 字段从字符串解析成 JSON 对象结构了。</p><p>那么至此，我们的 <code>ts-axios</code> 的基础功能已经实现完毕。不过到目前为止，我们都仅仅实现的是正常情况的逻辑，下面一章我们要处理各种异常情况的逻辑。</p>`,14)]))}const b=a(l,[["render",o]]);export{A as __pageData,b as default};
