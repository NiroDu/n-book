import{_ as n,a}from"./chunks/2019-09-16-18-49-49.B5naf_T2.js";import{_ as l,c as p,o as e,ag as o}from"./chunks/framework.D-6U7MZ9.js";const d=JSON.parse('{"title":"语法","description":"","frontmatter":{},"headers":[],"relativePath":"python/grammer.md","filePath":"python/grammer.md","lastUpdated":1574410909000}'),r={name:"python/grammer.md"};function t(c,s,i,y,A,b){return e(),p("div",null,s[0]||(s[0]=[o(`<h1 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h1><blockquote><p>熟悉 JavaScript 的基础上，对Python的学习。</p></blockquote><h2 id="标准数据类型" tabindex="-1">标准数据类型 <a class="header-anchor" href="#标准数据类型" aria-label="Permalink to &quot;标准数据类型&quot;">​</a></h2><p>Python3 中有六个标准的数据类型：</p><p><code>Number（数字）</code><code>String（字符串）</code><code>List（列表）</code><code>Tuple（元组）</code><code>Set（集合）</code><code>Dictionary（字典）</code></p><p>Python3 的六个标准数据类型中： 不可变数据（3 个）：Number（数字）、String（字符串）、Tuple（元组）； 可变数据（3 个）：List（列表）、Dictionary（字典）、Set（集合）。</p><h2 id="数字-number-类型" tabindex="-1">数字(Number)类型 <a class="header-anchor" href="#数字-number-类型" aria-label="Permalink to &quot;数字(Number)类型&quot;">​</a></h2><p>python中数字有四种类型：整数、布尔型、浮点数和复数。 int (整数), 如 1, 只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。 bool (布尔), 如 True。 float (浮点数), 如 1.23、3E-2 complex (复数), 如 1 + 2j、 1.1 + 2.2j</p><p>内置的<code> type()</code>函数可以用来查询变量所指的对象类型。</p><h2 id="字符串-string" tabindex="-1">字符串(String) <a class="header-anchor" href="#字符串-string" aria-label="Permalink to &quot;字符串(String)&quot;">​</a></h2><p>反斜杠可以用来转义，使用r可以让反斜杠不发生转义。 如 <code>r&quot;this is a line with \\n&quot;</code> 则<code>\\n</code>会显示，并不是换行。 这里的 <code>r</code> 指 raw，即 raw string。</p><p>转义符 <code>\\</code></p><p>字符串可以用 <code>+</code> 运算符连接在一起，用 <code>*</code> 运算符重复。</p><p>Python 中的字符串有两种索引方式，从左往右以 <code>0</code> 开始，从右往左以 <code>-1</code> 开始。</p><p>字符串的截取的语法格式如下：<code>变量[头下标:尾下标:步长]</code></p><h4 id="字符串运算符" tabindex="-1">字符串运算符 <a class="header-anchor" href="#字符串运算符" aria-label="Permalink to &quot;字符串运算符&quot;">​</a></h4><p>a值为字符串 &quot;Hello&quot;，b变量值为 &quot;Python&quot;</p><table tabindex="0"><thead><tr><th>操作符</th><th>描述</th><th>例子与结果</th></tr></thead><tbody><tr><td>+</td><td>字符串连接</td><td>a + b 输出结果： HelloPython</td></tr><tr><td>*</td><td>重复输出字符串</td><td>a*2 输出结果：HelloHello</td></tr><tr><td>[]</td><td>通过索引获取字符串中字符</td><td>a[1] 输出结果 e</td></tr><tr><td>[ : ]</td><td>截取字符串</td><td>a[1:4] 输出结果 ell</td></tr><tr><td>in</td><td>成员运算符 - 如果字符串中包含给定的字符返回 True</td><td>&#39;H&#39; in a 输出结果 True</td></tr><tr><td>not in</td><td>成员运算符 - 如果字符串中不包含给定的字符返回 True</td><td>&#39;M&#39; not in a 输出结果 True</td></tr></tbody></table><h4 id="字符串格式化" tabindex="-1">字符串格式化 <a class="header-anchor" href="#字符串格式化" aria-label="Permalink to &quot;字符串格式化&quot;">​</a></h4><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">print</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;我叫%s，今年%d岁!&quot;</span><span style="color:#E69875;"> %</span><span style="color:#D3C6AA;"> (</span><span style="color:#DBBC7F;">&#39;小明&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">10</span><span style="color:#D3C6AA;">))</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  我叫小明，今年10岁!</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>使用format函数：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">print</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;网站名：{name}, 地址 {url}&quot;</span><span style="color:#859289;">.</span><span style="color:#A7C080;">format</span><span style="color:#D3C6AA;">(name</span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;">&quot;菜鸟教程&quot;</span><span style="color:#D3C6AA;">, url</span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;">&quot;www.runoob.com&quot;</span><span style="color:#D3C6AA;">))</span></span>
<span class="line"><span style="color:#D3C6AA;"> </span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  通过字典设置参数</span></span>
<span class="line"><span style="color:#D3C6AA;">site </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span><span style="color:#DBBC7F;">&quot;name&quot;</span><span style="color:#D3C6AA;">: </span><span style="color:#DBBC7F;">&quot;菜鸟教程&quot;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&quot;url&quot;</span><span style="color:#D3C6AA;">: </span><span style="color:#DBBC7F;">&quot;www.runoob.com&quot;</span><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#A7C080;">print</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;网站名：{name}, 地址 {url}&quot;</span><span style="color:#859289;">.</span><span style="color:#A7C080;">format</span><span style="color:#D3C6AA;">(</span><span style="color:#E69875;">**</span><span style="color:#D3C6AA;">site))</span></span>
<span class="line"><span style="color:#D3C6AA;"> </span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  通过列表索引设置参数</span></span>
<span class="line"><span style="color:#D3C6AA;">my_list </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [</span><span style="color:#DBBC7F;">&#39;菜鸟教程&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;www.runoob.com&#39;</span><span style="color:#D3C6AA;">]</span></span>
<span class="line"><span style="color:#A7C080;">print</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;网站名：{0[0]}, 地址 {0[1]}&quot;</span><span style="color:#859289;">.</span><span style="color:#A7C080;">format</span><span style="color:#D3C6AA;">(my_list))  </span><span style="color:#859289;font-style:italic;">##  &quot;0&quot; 是必须的</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  输出结果皆为：</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  网站名：菜鸟教程, 地址 www.runoob.com</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="list-列表" tabindex="-1">List（列表） <a class="header-anchor" href="#list-列表" aria-label="Permalink to &quot;List（列表）&quot;">​</a></h2><p>列表截取的语法格式如下：<code>变量[头下标:尾下标:步长]</code><img src="`+n+'" alt=""><strong>什么是步长？</strong> 以下实例在索引 1 到索引 4 的位置并设置为步长为 2（间隔一个位置）来截取字符串： <img src="'+a+`" alt=""></p><p>如果步长为负数表示逆向读取，以下实例用于翻转字符串：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">def</span><span style="color:#A7C080;"> reverseWords</span><span style="color:#D3C6AA;">(input):</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">    ##  通过空格将字符串分隔符，把各个单词分隔为列表</span></span>
<span class="line"><span style="color:#D3C6AA;">    inputWords </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> input</span><span style="color:#859289;">.</span><span style="color:#A7C080;">split</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot; &quot;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;"> </span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    ##  翻转字符串</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    ##  假设列表 list = [1,2,3,4],  </span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    ##  list[0]=1, list[1]=2 ，而 -1 表示最后一个元素 list[-1]=4 ( 与 list[3]=4 一样)</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    ##  inputWords[-1::-1] 有三个参数</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    ##  第一个参数 -1 表示最后一个元素</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    ##  第二个参数为空，表示移动到列表末尾</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    ##  第三个参数为步长，-1 表示逆向</span></span>
<span class="line"><span style="color:#D3C6AA;">    inputWords</span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;">inputWords[</span><span style="color:#E69875;">-</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">::</span><span style="color:#E69875;">-</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">]</span></span>
<span class="line"><span style="color:#D3C6AA;"> </span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    ##  重新组合字符串</span></span>
<span class="line"><span style="color:#D3C6AA;">    output </span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;"> &#39; &#39;</span><span style="color:#859289;">.</span><span style="color:#A7C080;">join</span><span style="color:#D3C6AA;">(inputWords)</span></span>
<span class="line"><span style="color:#D3C6AA;">     </span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> output</span></span>
<span class="line"><span style="color:#D3C6AA;"> </span></span>
<span class="line"><span style="color:#E67E80;">if</span><span style="color:#D3C6AA;"> __name__ </span><span style="color:#E69875;">==</span><span style="color:#DBBC7F;"> &quot;__main__&quot;</span><span style="color:#D3C6AA;">:</span></span>
<span class="line"><span style="color:#A7C080;">    input</span><span style="color:#E69875;"> =</span><span style="color:#DBBC7F;"> &#39;I like runoob&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">    rw </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> reverseWords</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">input</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#A7C080;">    print</span><span style="color:#D3C6AA;">(rw) </span><span style="color:#859289;font-style:italic;">##  输出结果：runoob like I</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="tuple-元组" tabindex="-1">Tuple（元组） <a class="header-anchor" href="#tuple-元组" aria-label="Permalink to &quot;Tuple（元组）&quot;">​</a></h2><p>元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号 () 里，元素之间用逗号隔开。 虽然元组的元素不可改变，但它可以包含可变的对象，比如list列表。</p><p>元组中的元素类型也可以不相同：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#7FBBB3;">tuple</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> ( </span><span style="color:#DBBC7F;">&#39;abcd&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">786</span><span style="color:#D3C6AA;"> , </span><span style="color:#D699B6;">2.23</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;runoob&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">70.2</span><span style="color:#D3C6AA;">  )</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">tup3 </span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;"> &quot;a&quot;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&quot;b&quot;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&quot;c&quot;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&quot;d&quot;</span><span style="color:#D3C6AA;">;   </span><span style="color:#859289;font-style:italic;">##   不需要括号也可以</span></span>
<span class="line"><span style="color:#D3C6AA;">tup4 </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> tup3, (</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">2</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">3</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">4</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">5</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#A7C080;">print</span><span style="color:#D3C6AA;">(tup3)</span></span>
<span class="line"><span style="color:#A7C080;">print</span><span style="color:#D3C6AA;">(tup4)</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  输出：(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;)</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##       ((&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;), (1, 2, 3, 4, 5))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>构造包含 0 个或 1 个元素的元组比较特殊，所以有一些额外的语法规则：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">tup1 </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> ()    </span><span style="color:#859289;font-style:italic;">##  空元组</span></span>
<span class="line"><span style="color:#D3C6AA;">tup2 </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> (</span><span style="color:#D699B6;">20</span><span style="color:#D3C6AA;">,) </span><span style="color:#859289;font-style:italic;">##  一个元素，需要在元素后添加逗号</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="set-集合" tabindex="-1">Set（集合） <a class="header-anchor" href="#set-集合" aria-label="Permalink to &quot;Set（集合）&quot;">​</a></h2><p>集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。</p><p>基本功能是进行成员关系测试和删除重复元素。</p><p>可以使用大括号 <code>{ }</code> 或者 <code>set()</code> 函数创建集合。</p><blockquote><p>注意：创建一个空集合必须用 <code>set()</code> 而不是 <code>{ }</code>，因为 <code>{ }</code> 是用来创建一个空字典。</p></blockquote><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">student </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span><span style="color:#DBBC7F;">&#39;Tom&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;Jim&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;Mary&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;Tom&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;Jack&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;Rose&#39;</span><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#A7C080;">print</span><span style="color:#D3C6AA;">(student)   </span><span style="color:#859289;font-style:italic;">##  输出集合，重复的元素被自动去掉</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  成员测试</span></span>
<span class="line"><span style="color:#E67E80;">if</span><span style="color:#DBBC7F;"> &#39;Rose&#39;</span><span style="color:#E69875;"> in</span><span style="color:#D3C6AA;"> student :</span></span>
<span class="line"><span style="color:#A7C080;">    print</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;Rose 在集合中&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#E67E80;">else</span><span style="color:#D3C6AA;"> :</span></span>
<span class="line"><span style="color:#A7C080;">    print</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;Rose 不在集合中&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  set可以进行集合运算</span></span>
<span class="line"><span style="color:#D3C6AA;">a </span><span style="color:#E69875;">=</span><span style="color:#7FBBB3;"> set</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;abracadabra&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">b </span><span style="color:#E69875;">=</span><span style="color:#7FBBB3;"> set</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;alacazam&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;"> </span></span>
<span class="line"><span style="color:#A7C080;">print</span><span style="color:#D3C6AA;">(a)         </span><span style="color:#859289;font-style:italic;">##  去重输出，顺序是随机的</span></span>
<span class="line"><span style="color:#A7C080;">print</span><span style="color:#D3C6AA;">(a </span><span style="color:#E69875;">-</span><span style="color:#D3C6AA;"> b)     </span><span style="color:#859289;font-style:italic;">##  a 和 b 的差集</span></span>
<span class="line"><span style="color:#A7C080;">print</span><span style="color:#D3C6AA;">(a </span><span style="color:#E69875;">|</span><span style="color:#D3C6AA;"> b)     </span><span style="color:#859289;font-style:italic;">##  a 和 b 的并集</span></span>
<span class="line"><span style="color:#A7C080;">print</span><span style="color:#D3C6AA;">(a </span><span style="color:#E69875;">&amp;</span><span style="color:#D3C6AA;"> b)     </span><span style="color:#859289;font-style:italic;">##  a 和 b 的交集</span></span>
<span class="line"><span style="color:#A7C080;">print</span><span style="color:#D3C6AA;">(a </span><span style="color:#E69875;">^</span><span style="color:#D3C6AA;"> b)     </span><span style="color:#859289;font-style:italic;">##  a 和 b 中不同时存在的元素</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="dictionary-字典" tabindex="-1">Dictionary（字典） <a class="header-anchor" href="#dictionary-字典" aria-label="Permalink to &quot;Dictionary（字典）&quot;">​</a></h2><p>列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。</p><p>字典是一种映射类型，字典用 <code>{ }</code> 标识，它是一个无序的 <code>键(key) : 值(value)</code>的集合。 键(key)必须使用不可变类型。 在同一个字典中，键(key)必须是唯一的。</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#7FBBB3;">dict</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> {}</span></span>
<span class="line"><span style="color:#D3C6AA;">dict[</span><span style="color:#DBBC7F;">&#39;one&#39;</span><span style="color:#D3C6AA;">] </span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;"> &quot;1 - 菜鸟教程&quot;</span></span>
<span class="line"><span style="color:#D3C6AA;">dict[</span><span style="color:#D699B6;">2</span><span style="color:#D3C6AA;">]     </span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;"> &quot;2 - 菜鸟工具&quot;</span></span>
<span class="line"><span style="color:#D3C6AA;"> </span></span>
<span class="line"><span style="color:#D3C6AA;">tinydict </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#DBBC7F;">&#39;name&#39;</span><span style="color:#D3C6AA;">: </span><span style="color:#DBBC7F;">&#39;runoob&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#DBBC7F;">&#39;code&#39;</span><span style="color:#D3C6AA;">:</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">, </span></span>
<span class="line"><span style="color:#DBBC7F;">&#39;site&#39;</span><span style="color:#D3C6AA;">: </span><span style="color:#DBBC7F;">&#39;www.runoob.com&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#D3C6AA;"> </span></span>
<span class="line"><span style="color:#A7C080;">print </span><span style="color:#D3C6AA;">(dict[</span><span style="color:#DBBC7F;">&#39;one&#39;</span><span style="color:#D3C6AA;">])       </span><span style="color:#859289;font-style:italic;">##  输出键为 &#39;one&#39; 的值</span></span>
<span class="line"><span style="color:#A7C080;">print </span><span style="color:#D3C6AA;">(dict[</span><span style="color:#D699B6;">2</span><span style="color:#D3C6AA;">])           </span><span style="color:#859289;font-style:italic;">##  输出键为 2 的值</span></span>
<span class="line"><span style="color:#A7C080;">print </span><span style="color:#D3C6AA;">(tinydict)          </span><span style="color:#859289;font-style:italic;">##  输出完整的字典</span></span>
<span class="line"><span style="color:#A7C080;">print </span><span style="color:#D3C6AA;">(tinydict</span><span style="color:#859289;">.</span><span style="color:#A7C080;">keys</span><span style="color:#D3C6AA;">())   </span><span style="color:#859289;font-style:italic;">##  输出所有键</span></span>
<span class="line"><span style="color:#A7C080;">print </span><span style="color:#D3C6AA;">(tinydict</span><span style="color:#859289;">.</span><span style="color:#A7C080;">values</span><span style="color:#D3C6AA;">()) </span><span style="color:#859289;font-style:italic;">##  输出所有值</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>构造函数 <code>dict()</code> 可以直接从键值对序列中构建字典如下：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">dict1 </span><span style="color:#E69875;">=</span><span style="color:#7FBBB3;"> dict</span><span style="color:#D3C6AA;">([(</span><span style="color:#DBBC7F;">&#39;Runoob&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">), (</span><span style="color:#DBBC7F;">&#39;Google&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">2</span><span style="color:#D3C6AA;">), (</span><span style="color:#DBBC7F;">&#39;Taobao&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">3</span><span style="color:#D3C6AA;">)])</span></span>
<span class="line"><span style="color:#D3C6AA;">dict2 </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {x: x</span><span style="color:#E69875;">**</span><span style="color:#D699B6;">2</span><span style="color:#E67E80;"> for</span><span style="color:#D3C6AA;"> x </span><span style="color:#E67E80;">in</span><span style="color:#D3C6AA;"> (</span><span style="color:#D699B6;">2</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">4</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">6</span><span style="color:#D3C6AA;">)}</span></span>
<span class="line"><span style="color:#D3C6AA;">dict3 </span><span style="color:#E69875;">=</span><span style="color:#7FBBB3;"> dict</span><span style="color:#D3C6AA;">(Runoob</span><span style="color:#E69875;">=</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">, Google</span><span style="color:#E69875;">=</span><span style="color:#D699B6;">2</span><span style="color:#D3C6AA;">, Taobao</span><span style="color:#E69875;">=</span><span style="color:#D699B6;">3</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  输出：</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  dict1</span></span>
<span class="line"><span style="color:#D3C6AA;">{</span><span style="color:#DBBC7F;">&#39;Runoob&#39;</span><span style="color:#D3C6AA;">: </span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;Google&#39;</span><span style="color:#D3C6AA;">: </span><span style="color:#D699B6;">2</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;Taobao&#39;</span><span style="color:#D3C6AA;">: </span><span style="color:#D699B6;">3</span><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  dict2</span></span>
<span class="line"><span style="color:#D3C6AA;">{</span><span style="color:#D699B6;">2</span><span style="color:#D3C6AA;">: </span><span style="color:#D699B6;">4</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">4</span><span style="color:#D3C6AA;">: </span><span style="color:#D699B6;">16</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">6</span><span style="color:#D3C6AA;">: </span><span style="color:#D699B6;">36</span><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  dict3</span></span>
<span class="line"><span style="color:#D3C6AA;">{</span><span style="color:#DBBC7F;">&#39;Runoob&#39;</span><span style="color:#D3C6AA;">: </span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;Google&#39;</span><span style="color:#D3C6AA;">: </span><span style="color:#D699B6;">2</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;Taobao&#39;</span><span style="color:#D3C6AA;">: </span><span style="color:#D699B6;">3</span><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>使用推导式（字典推导）</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">{x: x</span><span style="color:#E69875;">**</span><span style="color:#D699B6;">2</span><span style="color:#E67E80;"> for</span><span style="color:#D3C6AA;"> x </span><span style="color:#E67E80;">in</span><span style="color:#D3C6AA;"> (</span><span style="color:#D699B6;">2</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">4</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">6</span><span style="color:#D3C6AA;">)}</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  输出：{2: 4, 4: 16, 6: 36}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>注意：</strong> 1、字典是一种映射类型，它的元素是键值对。 2、字典的关键字必须为不可变类型，且不能重复。 3、创建空字典使用 { }。</p><h2 id="import-与-from-import" tabindex="-1">import 与 from...import <a class="header-anchor" href="#import-与-from-import" aria-label="Permalink to &quot;import 与 from...import&quot;">​</a></h2><p>在 python 用 import 或者 from...import 来导入相应的模块。</p><p>将整个模块(somemodule)导入，格式为： <code>import somemodule</code></p><p>从某个模块中导入某个函数,格式为： <code>from somemodule import somefunction</code></p><p>从某个模块中导入多个函数,格式为： <code>from somemodule import firstfunc, secondfunc, thirdfunc</code></p><p>将某个模块中的全部函数导入，格式为： <code>from somemodule import *</code></p><h2 id="循环语句" tabindex="-1">循环语句 <a class="header-anchor" href="#循环语句" aria-label="Permalink to &quot;循环语句&quot;">​</a></h2><h4 id="while-循环" tabindex="-1"><strong>while 循环</strong> <a class="header-anchor" href="#while-循环" aria-label="Permalink to &quot;**while 循环**&quot;">​</a></h4><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">sum</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> 0</span></span>
<span class="line"><span style="color:#D3C6AA;">counter </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 1</span></span>
<span class="line"><span style="color:#E67E80;">while</span><span style="color:#D3C6AA;"> counter </span><span style="color:#E69875;">&lt;=</span><span style="color:#D3C6AA;"> n:</span></span>
<span class="line"><span style="color:#A7C080;">    sum</span><span style="color:#E69875;"> =</span><span style="color:#A7C080;"> sum</span><span style="color:#E69875;"> +</span><span style="color:#D3C6AA;"> counter</span></span>
<span class="line"><span style="color:#D3C6AA;">    counter </span><span style="color:#E69875;">+=</span><span style="color:#D699B6;"> 1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>while 循环使用 else 语句</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">count </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 0</span></span>
<span class="line"><span style="color:#E67E80;">while</span><span style="color:#D3C6AA;"> count </span><span style="color:#E69875;">&lt;</span><span style="color:#D699B6;"> 5</span><span style="color:#D3C6AA;">:</span></span>
<span class="line"><span style="color:#A7C080;">   print </span><span style="color:#D3C6AA;">(count, </span><span style="color:#DBBC7F;">&quot; 小于 5&quot;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">   count </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> count </span><span style="color:#E69875;">+</span><span style="color:#D699B6;"> 1</span></span>
<span class="line"><span style="color:#E67E80;">else</span><span style="color:#D3C6AA;">:</span></span>
<span class="line"><span style="color:#A7C080;">   print </span><span style="color:#D3C6AA;">(count, </span><span style="color:#DBBC7F;">&quot; 大于或等于 5&quot;</span><span style="color:#D3C6AA;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="for循环" tabindex="-1">for循环 <a class="header-anchor" href="#for循环" aria-label="Permalink to &quot;for循环&quot;">​</a></h4><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">for</span><span style="color:#E69875;"> &lt;</span><span style="color:#D3C6AA;">variable</span><span style="color:#E69875;">&gt;</span><span style="color:#E67E80;"> in</span><span style="color:#E69875;"> &lt;</span><span style="color:#D3C6AA;">sequence</span><span style="color:#E69875;">&gt;</span><span style="color:#D3C6AA;">:</span></span>
<span class="line"><span style="color:#E69875;">    &lt;</span><span style="color:#D3C6AA;">statements</span><span style="color:#E69875;">&gt;</span></span>
<span class="line"><span style="color:#E67E80;">else</span><span style="color:#D3C6AA;">:</span></span>
<span class="line"><span style="color:#E69875;">    &lt;</span><span style="color:#D3C6AA;">statements</span><span style="color:#E69875;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">languages </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [</span><span style="color:#DBBC7F;">&quot;C&quot;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&quot;C++&quot;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&quot;Perl&quot;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&quot;Python&quot;</span><span style="color:#D3C6AA;">] </span></span>
<span class="line"><span style="color:#E67E80;">    for</span><span style="color:#D3C6AA;"> x </span><span style="color:#E67E80;">in</span><span style="color:#D3C6AA;"> languages:</span></span>
<span class="line"><span style="color:#A7C080;">    print </span><span style="color:#D3C6AA;">(x)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在字典中遍历时，关键字和对应的值可以使用 <code>items()</code> 方法同时解读出来：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">knights </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span><span style="color:#DBBC7F;">&#39;gallahad&#39;</span><span style="color:#D3C6AA;">: </span><span style="color:#DBBC7F;">&#39;the pure&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;robin&#39;</span><span style="color:#D3C6AA;">: </span><span style="color:#DBBC7F;">&#39;the brave&#39;</span><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#E67E80;">for</span><span style="color:#D3C6AA;"> key, value </span><span style="color:#E67E80;">in</span><span style="color:#D3C6AA;"> knights</span><span style="color:#859289;">.</span><span style="color:#A7C080;">items</span><span style="color:#D3C6AA;">():</span></span>
<span class="line"><span style="color:#A7C080;">    print</span><span style="color:#D3C6AA;">(key, value)</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  输出：gallahad the pure</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##       robin the brave</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在序列中遍历时，索引位置和对应值可以使用 <code>enumerate()</code> 函数同时得到：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">for</span><span style="color:#D3C6AA;"> i, v </span><span style="color:#E67E80;">in</span><span style="color:#A7C080;"> enumerate</span><span style="color:#D3C6AA;">([</span><span style="color:#DBBC7F;">&#39;tic&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;tac&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;toe&#39;</span><span style="color:#D3C6AA;">]):</span></span>
<span class="line"><span style="color:#A7C080;">    print</span><span style="color:#D3C6AA;">(i, v)</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  输出：0 tic</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##       1 tac</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##       2 toe</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>同时遍历两个或更多的序列，可以使用 <code>zip()</code> 组合：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">##  同时遍历两个或更多的序列，可以使用 zip() 组合：</span></span>
<span class="line"><span style="color:#D3C6AA;">questions </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [</span><span style="color:#DBBC7F;">&#39;name&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;quest&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;favorite color&#39;</span><span style="color:#D3C6AA;">]</span></span>
<span class="line"><span style="color:#D3C6AA;">answers </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [</span><span style="color:#DBBC7F;">&#39;lancelot&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;the holy grail&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;blue&#39;</span><span style="color:#D3C6AA;">]</span></span>
<span class="line"><span style="color:#E67E80;">for</span><span style="color:#D3C6AA;"> q, a </span><span style="color:#E67E80;">in</span><span style="color:#A7C080;"> zip</span><span style="color:#D3C6AA;">(questions, answers):</span></span>
<span class="line"><span style="color:#A7C080;">    print</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;What is your {0}?  It is {1}.&#39;</span><span style="color:#859289;">.</span><span style="color:#A7C080;">format</span><span style="color:#D3C6AA;">(q, a))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  What is your name?  It is lancelot.</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  What is your quest?  It is the holy grail.</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  What is your favorite color?  It is blue.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>要反向遍历一个序列，首先指定这个序列，然后调用 <code>reversed()</code> 函数：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">for</span><span style="color:#D3C6AA;"> i </span><span style="color:#E67E80;">in</span><span style="color:#A7C080;"> reversed</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">range</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">10</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">2</span><span style="color:#D3C6AA;">)):</span></span>
<span class="line"><span style="color:#A7C080;">    print</span><span style="color:#D3C6AA;">(i)</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  输出 9 7 5 3 1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>要按顺序遍历一个序列，使用 <code>sorted()</code> 函数返回一个已排序的序列，并不修改原值：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">basket </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [</span><span style="color:#DBBC7F;">&#39;apple&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;orange&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;apple&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;pear&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;orange&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;banana&#39;</span><span style="color:#D3C6AA;">]</span></span>
<span class="line"><span style="color:#E67E80;">for</span><span style="color:#D3C6AA;"> f </span><span style="color:#E67E80;">in</span><span style="color:#A7C080;"> sorted</span><span style="color:#D3C6AA;">(</span><span style="color:#7FBBB3;">set</span><span style="color:#D3C6AA;">(basket)):</span></span>
<span class="line"><span style="color:#A7C080;">    print</span><span style="color:#D3C6AA;">(f)</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  输出：apple banana orange pear</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="range-循环" tabindex="-1">range()循环 <a class="header-anchor" href="#range-循环" aria-label="Permalink to &quot;range()循环&quot;">​</a></h4><p>如果你需要遍历数字序列，可以使用内置range()函数。它会生成数列</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">for</span><span style="color:#D3C6AA;"> i </span><span style="color:#E67E80;">in</span><span style="color:#A7C080;"> range</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">5</span><span style="color:#D3C6AA;">):</span></span>
<span class="line"><span style="color:#A7C080;">    print</span><span style="color:#D3C6AA;">(i)</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    ##  0 1 2 3 4</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  第二个参数是范围</span></span>
<span class="line"><span style="color:#E67E80;">for</span><span style="color:#D3C6AA;"> i </span><span style="color:#E67E80;">in</span><span style="color:#A7C080;"> range</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">5</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">9</span><span style="color:#D3C6AA;">) :</span></span>
<span class="line"><span style="color:#A7C080;">    print</span><span style="color:#D3C6AA;">(i)</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    ##  5 6 7 8</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  第三个参数是步长</span></span>
<span class="line"><span style="color:#E67E80;">for</span><span style="color:#D3C6AA;"> i </span><span style="color:#E67E80;">in</span><span style="color:#A7C080;"> range</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">0</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">10</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">3</span><span style="color:#D3C6AA;">) :</span></span>
<span class="line"><span style="color:#A7C080;">    print</span><span style="color:#D3C6AA;">(i)</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    ##  0 3 6 9</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  使用range()函数来创建一个列表</span></span>
<span class="line"><span style="color:#7FBBB3;">list</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">range</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">5</span><span style="color:#D3C6AA;">))</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  [0, 1, 2, 3, 4]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h4 id="pass-语句" tabindex="-1">pass 语句 <a class="header-anchor" href="#pass-语句" aria-label="Permalink to &quot;pass 语句&quot;">​</a></h4><p>Python pass是空语句，是为了保持程序结构的完整性。 pass 不做任何事情，一般用做占位语句。</p><h2 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数&quot;">​</a></h2><h4 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h4><p><strong>必需参数</strong><strong>关键字参数</strong></p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">def</span><span style="color:#A7C080;"> printinfo</span><span style="color:#D3C6AA;">(name,</span><span style="color:#D3C6AA;"> age):</span></span>
<span class="line"><span style="color:#A7C080;">   print </span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;名字: &quot;</span><span style="color:#D3C6AA;">, name)</span></span>
<span class="line"><span style="color:#A7C080;">   print </span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;年龄: &quot;</span><span style="color:#D3C6AA;">, age)</span></span>
<span class="line"><span style="color:#E67E80;">   return</span></span>
<span class="line"><span style="color:#D3C6AA;"> </span></span>
<span class="line"><span style="color:#A7C080;">printinfo</span><span style="color:#D3C6AA;">(age</span><span style="color:#E69875;">=</span><span style="color:#D699B6;">50</span><span style="color:#D3C6AA;">, name</span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;">&quot;runoob&quot;</span><span style="color:#D3C6AA;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>默认参数</strong></p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">def</span><span style="color:#A7C080;"> printinfo</span><span style="color:#D3C6AA;">(name,</span><span style="color:#D3C6AA;"> age</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> 35</span><span style="color:#D3C6AA;">):</span></span>
<span class="line"><span style="color:#A7C080;">   print </span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;名字: &quot;</span><span style="color:#D3C6AA;">, name)</span></span>
<span class="line"><span style="color:#A7C080;">   print </span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;年龄: &quot;</span><span style="color:#D3C6AA;">, age)</span></span>
<span class="line"><span style="color:#E67E80;">   return</span></span>
<span class="line"><span style="color:#D3C6AA;"> </span></span>
<span class="line"><span style="color:#A7C080;">printinfo</span><span style="color:#D3C6AA;">(name</span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;">&quot;runoob&quot;</span><span style="color:#D3C6AA;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>不定长参数</strong> 你可能需要一个函数能处理比当初声明时更多的参数。这些参数叫做不定长参数。</p><p>加了星号 <code>*</code> 的参数会以元组(tuple)的形式导入，存放所有未命名的变量参数。</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">def</span><span style="color:#A7C080;"> printinfo</span><span style="color:#D3C6AA;">(</span><span style="color:#D3C6AA;"> arg1,</span><span style="color:#E69875;"> *</span><span style="color:#D3C6AA;">vartuple</span><span style="color:#D3C6AA;"> ):</span></span>
<span class="line"><span style="color:#A7C080;">   print </span><span style="color:#D3C6AA;">(arg1)</span></span>
<span class="line"><span style="color:#A7C080;">   print </span><span style="color:#D3C6AA;">(vartuple)</span></span>
<span class="line"><span style="color:#D3C6AA;"> </span></span>
<span class="line"><span style="color:#A7C080;">printinfo</span><span style="color:#D3C6AA;">( </span><span style="color:#D699B6;">70</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">60</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">50</span><span style="color:#D3C6AA;"> )</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  输出: 70</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##       (60, 50)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>加了两个星号 <code>**</code> 的参数会以字典的形式导入。</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">def</span><span style="color:#A7C080;"> printinfo</span><span style="color:#D3C6AA;">(</span><span style="color:#D3C6AA;"> arg1,</span><span style="color:#E69875;"> **</span><span style="color:#D3C6AA;">vardict</span><span style="color:#D3C6AA;"> ):</span></span>
<span class="line"><span style="color:#A7C080;">   print </span><span style="color:#D3C6AA;">(arg1)</span></span>
<span class="line"><span style="color:#A7C080;">   print </span><span style="color:#D3C6AA;">(vardict)</span></span>
<span class="line"><span style="color:#D3C6AA;"> </span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  调用printinfo 函数</span></span>
<span class="line"><span style="color:#A7C080;">printinfo</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">, a</span><span style="color:#E69875;">=</span><span style="color:#D699B6;">2</span><span style="color:#D3C6AA;">,b</span><span style="color:#E69875;">=</span><span style="color:#D699B6;">3</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  输出: 1</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##       {&#39;a&#39;: 2, &#39;b&#39;: 3}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>声明函数时，参数中星号 <code>*</code> 可以单独出现，例如:</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">def</span><span style="color:#A7C080;"> f</span><span style="color:#D3C6AA;">(a,b,</span><span style="color:#E69875;">*</span><span style="color:#A7C080;">,</span><span style="color:#D3C6AA;">c):</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> a</span><span style="color:#E69875;">+</span><span style="color:#D3C6AA;">b</span><span style="color:#E69875;">+</span><span style="color:#D3C6AA;">c</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>但如果单独出现星号 <code>*</code> 后的参数必须用关键字传入。</p><h4 id="mutable对象与immutable对象" tabindex="-1">mutable对象与immutable对象 <a class="header-anchor" href="#mutable对象与immutable对象" aria-label="Permalink to &quot;mutable对象与immutable对象&quot;">​</a></h4><p>python 中一切都是对象，严格意义我们不能说值传递还是引用传递，我们应该说传不可变对象和传可变对象。</p><blockquote><p>python 函数的参数传递： 不可变类型：类似 c++ 的值传递，如 整数、字符串、元组。如fun（a），传递的只是a的值，没有影响a对象本身。比如在 fun（a）内部修改 a 的值，只是修改另一个复制的对象，不会影响 a 本身。 可变类型：类似 c++ 的引用传递，如 列表，字典。如 fun(la)，则是将 la 真正的传过去，修改后fun外部的la也会受影响</p></blockquote><p>传不可变对象实例</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">def</span><span style="color:#A7C080;"> ChangeInt</span><span style="color:#D3C6AA;">(</span><span style="color:#D3C6AA;"> a</span><span style="color:#D3C6AA;"> ):</span></span>
<span class="line"><span style="color:#D3C6AA;">    a </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 10</span></span>
<span class="line"><span style="color:#D3C6AA;"> </span></span>
<span class="line"><span style="color:#D3C6AA;">b </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 2</span></span>
<span class="line"><span style="color:#A7C080;">ChangeInt</span><span style="color:#D3C6AA;">(b)</span></span>
<span class="line"><span style="color:#A7C080;">print</span><span style="color:#D3C6AA;">( b ) </span><span style="color:#859289;font-style:italic;">##  结果是 2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>传可变对象实例</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">##  可写函数说明</span></span>
<span class="line"><span style="color:#E67E80;">def</span><span style="color:#A7C080;"> changeme</span><span style="color:#D3C6AA;">(</span><span style="color:#D3C6AA;"> mylist</span><span style="color:#D3C6AA;"> ):</span></span>
<span class="line"><span style="color:#DBBC7F;">   &quot;修改传入的列表&quot;</span></span>
<span class="line"><span style="color:#D3C6AA;">   mylist</span><span style="color:#859289;">.</span><span style="color:#A7C080;">append</span><span style="color:#D3C6AA;">([</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">2</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">3</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">4</span><span style="color:#D3C6AA;">])</span></span>
<span class="line"><span style="color:#A7C080;">   print </span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;函数内取值: &quot;</span><span style="color:#D3C6AA;">, mylist)</span></span>
<span class="line"><span style="color:#E67E80;">   return</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  调用changeme函数</span></span>
<span class="line"><span style="color:#D3C6AA;">mylist </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [</span><span style="color:#D699B6;">10</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">20</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">30</span><span style="color:#D3C6AA;">]</span></span>
<span class="line"><span style="color:#A7C080;">changeme</span><span style="color:#D3C6AA;">( mylist )</span></span>
<span class="line"><span style="color:#A7C080;">print </span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;函数外取值: &quot;</span><span style="color:#D3C6AA;">, mylist)</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  输出：函数内取值:  [10, 20, 30, [1, 2, 3, 4]]</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  输出：函数外取值:  [10, 20, 30, [1, 2, 3, 4]]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h4 id="匿名函数" tabindex="-1">匿名函数 <a class="header-anchor" href="#匿名函数" aria-label="Permalink to &quot;匿名函数&quot;">​</a></h4><p>使用 <code>lambda</code> 来创建匿名函数。 所谓匿名，意即不再使用 <code>def</code> 语句这样标准的形式定义一个函数。 lambda 只是一个表达式，函数体比 def 简单很多。 lambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去。 lambda 函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数。 虽然lambda函数看起来只能写一行，却不等同于C或C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">lambda</span><span style="color:#A7C080;"> [arg1 [,</span><span style="color:#D3C6AA;">arg2,</span><span style="color:#A7C080;">.....argn]]</span><span style="color:#D3C6AA;">:expression</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">##  可写函数说明</span></span>
<span class="line"><span style="color:#A7C080;">sum</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> lambda</span><span style="color:#D3C6AA;"> arg1,</span><span style="color:#D3C6AA;"> arg2: arg1 </span><span style="color:#E69875;">+</span><span style="color:#D3C6AA;"> arg2</span></span>
<span class="line"><span style="color:#D3C6AA;"> </span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  调用sum函数</span></span>
<span class="line"><span style="color:#A7C080;">print</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">sum</span><span style="color:#D3C6AA;">( </span><span style="color:#D699B6;">10</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">20</span><span style="color:#D3C6AA;"> )) </span><span style="color:#859289;font-style:italic;">##  30</span></span>
<span class="line"><span style="color:#A7C080;">print</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">sum</span><span style="color:#D3C6AA;">( </span><span style="color:#D699B6;">20</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">20</span><span style="color:#D3C6AA;"> )) </span><span style="color:#859289;font-style:italic;">##  40</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="列表推导式" tabindex="-1">列表推导式 <a class="header-anchor" href="#列表推导式" aria-label="Permalink to &quot;列表推导式&quot;">​</a></h2><p>列表推导式 把某种操作应用于序列或可迭代对象的每个元素上，然后使用其结果来创建列表，或者通过满足某些特定条件元素来创建子序列。</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">[(x, y) </span><span style="color:#E67E80;">for</span><span style="color:#D3C6AA;"> x </span><span style="color:#E67E80;">in</span><span style="color:#D3C6AA;"> [</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">2</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">3</span><span style="color:#D3C6AA;">] </span><span style="color:#E67E80;">for</span><span style="color:#D3C6AA;"> y </span><span style="color:#E67E80;">in</span><span style="color:#D3C6AA;"> [</span><span style="color:#D699B6;">3</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">,</span><span style="color:#D699B6;">4</span><span style="color:#D3C6AA;">] </span><span style="color:#E67E80;">if</span><span style="color:#D3C6AA;"> x </span><span style="color:#E69875;">!=</span><span style="color:#D3C6AA;"> y]</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  等价于</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  等价于</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  combs = []</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  for x in [1,2,3]:</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##      for y in [3,1,4]:</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##          if x != y:</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##              combs.append((x, y))</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  combs</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>看代码理解用法：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">vec </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [</span><span style="color:#D699B6;">2</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">4</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">6</span><span style="color:#D3C6AA;">]</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  我们将列表中每个数值乘三，获得一个新的列表：</span></span>
<span class="line"><span style="color:#D3C6AA;">[</span><span style="color:#D699B6;">3</span><span style="color:#E69875;">*</span><span style="color:#D3C6AA;">x </span><span style="color:#E67E80;">for</span><span style="color:#D3C6AA;"> x </span><span style="color:#E67E80;">in</span><span style="color:#D3C6AA;"> vec]</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  输出：[6, 12, 18]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">[[x, x</span><span style="color:#E69875;">**</span><span style="color:#D699B6;">2</span><span style="color:#D3C6AA;">] </span><span style="color:#E67E80;">for</span><span style="color:#D3C6AA;"> x </span><span style="color:#E67E80;">in</span><span style="color:#D3C6AA;"> vec]</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  输出：[[2, 4], [4, 16], [6, 36]]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  我们可以用 if 子句作为过滤器：</span></span>
<span class="line"><span style="color:#D3C6AA;">[</span><span style="color:#D699B6;">3</span><span style="color:#E69875;">*</span><span style="color:#D3C6AA;">x </span><span style="color:#E67E80;">for</span><span style="color:#D3C6AA;"> x </span><span style="color:#E67E80;">in</span><span style="color:#D3C6AA;"> vec </span><span style="color:#E67E80;">if</span><span style="color:#D3C6AA;"> x </span><span style="color:#E69875;">&gt;</span><span style="color:#D699B6;"> 3</span><span style="color:#D3C6AA;">]</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  输出：[12, 18]</span></span>
<span class="line"><span style="color:#D3C6AA;">[</span><span style="color:#D699B6;">3</span><span style="color:#E69875;">*</span><span style="color:#D3C6AA;">x </span><span style="color:#E67E80;">for</span><span style="color:#D3C6AA;"> x </span><span style="color:#E67E80;">in</span><span style="color:#D3C6AA;"> vec </span><span style="color:#E67E80;">if</span><span style="color:#D3C6AA;"> x </span><span style="color:#E69875;">&lt;</span><span style="color:#D699B6;"> 2</span><span style="color:#D3C6AA;">]</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  输出：[]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">vec1 </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [</span><span style="color:#D699B6;">2</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">4</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">6</span><span style="color:#D3C6AA;">]</span></span>
<span class="line"><span style="color:#D3C6AA;">vec2 </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [</span><span style="color:#D699B6;">4</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">3</span><span style="color:#D3C6AA;">, </span><span style="color:#E69875;">-</span><span style="color:#D699B6;">9</span><span style="color:#D3C6AA;">]</span></span>
<span class="line"><span style="color:#D3C6AA;">[x</span><span style="color:#E69875;">*</span><span style="color:#D3C6AA;">y </span><span style="color:#E67E80;">for</span><span style="color:#D3C6AA;"> x </span><span style="color:#E67E80;">in</span><span style="color:#D3C6AA;"> vec1 </span><span style="color:#E67E80;">for</span><span style="color:#D3C6AA;"> y </span><span style="color:#E67E80;">in</span><span style="color:#D3C6AA;"> vec2]</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  输出：[8, 6, -18, 16, 12, -36, 24, 18, -54]</span></span>
<span class="line"><span style="color:#D3C6AA;">[x</span><span style="color:#E69875;">+</span><span style="color:#D3C6AA;">y </span><span style="color:#E67E80;">for</span><span style="color:#D3C6AA;"> x </span><span style="color:#E67E80;">in</span><span style="color:#D3C6AA;"> vec1 </span><span style="color:#E67E80;">for</span><span style="color:#D3C6AA;"> y </span><span style="color:#E67E80;">in</span><span style="color:#D3C6AA;"> vec2]</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  输出：[6, 5, -7, 8, 7, -5, 10, 9, -3]</span></span>
<span class="line"><span style="color:#D3C6AA;">[vec1[i]</span><span style="color:#E69875;">*</span><span style="color:#D3C6AA;">vec2[i] </span><span style="color:#E67E80;">for</span><span style="color:#D3C6AA;"> i </span><span style="color:#E67E80;">in</span><span style="color:#A7C080;"> range</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">len</span><span style="color:#D3C6AA;">(vec1))]</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  输出：[8, 12, -54]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>这里我们对序列里每一个元素逐个调用某方法：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">freshfruit </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [</span><span style="color:#DBBC7F;">&#39;  banana&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;  loganberry &#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;passion fruit  &#39;</span><span style="color:#D3C6AA;">]</span></span>
<span class="line"><span style="color:#D3C6AA;">[weapon</span><span style="color:#859289;">.</span><span style="color:#A7C080;">strip</span><span style="color:#D3C6AA;">() </span><span style="color:#E67E80;">for</span><span style="color:#D3C6AA;"> weapon </span><span style="color:#E67E80;">in</span><span style="color:#D3C6AA;"> freshfruit]</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  输出：[&#39;banana&#39;, &#39;loganberry&#39;, &#39;passion fruit&#39;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="迭代器-iterators" tabindex="-1">迭代器(Iterators) <a class="header-anchor" href="#迭代器-iterators" aria-label="Permalink to &quot;迭代器(Iterators)&quot;">​</a></h2><p>迭代器是一个可以记住遍历的位置的对象，是访问集合元素的一种方式。 迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。 迭代器有两个基本的方法：<code>iter()</code> 和<code> next()</code>。</p><p>迭代器对象可以使用常规for语句进行遍历：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">list_iter </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">2</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">3</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">4</span><span style="color:#D3C6AA;">]</span></span>
<span class="line"><span style="color:#D3C6AA;">it </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> iter</span><span style="color:#D3C6AA;">(list_iter)    </span><span style="color:#859289;font-style:italic;">##  创建迭代器对象</span></span>
<span class="line"><span style="color:#A7C080;">print</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">next</span><span style="color:#D3C6AA;">(it))   </span><span style="color:#859289;font-style:italic;">##  输出迭代器的下一个元素</span></span>
<span class="line"><span style="color:#A7C080;">print</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">next</span><span style="color:#D3C6AA;">(it))</span></span>
<span class="line"><span style="color:#E67E80;">for</span><span style="color:#D3C6AA;"> x </span><span style="color:#E67E80;">in</span><span style="color:#D3C6AA;"> it:</span></span>
<span class="line"><span style="color:#A7C080;">    print</span><span style="color:#D3C6AA;">(x, end</span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;">&quot; &quot;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  输出： 1</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##        2</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##        3 4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>把一个类作为一个迭代器使用需要在类中实现两个方法 <strong>iter</strong>() 与 <strong>next</strong>() 。</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">##  __iter__() 方法返回一个特殊的迭代器对象， 这个迭代器对象实现了 __next__() 方法并通过 StopIteration 异常标识迭代的完成。</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  __next__() 方法会返回下一个迭代器对象。</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  在 \`__next__()\` 方法中我们可以设置在完成指定循环次数后触发 \`StopIteration\` 异常来结束迭代。</span></span>
<span class="line"><span style="color:#E67E80;">class</span><span style="color:#7FBBB3;"> MyNumbers</span><span style="color:#D3C6AA;">:</span></span>
<span class="line"><span style="color:#E67E80;">    def</span><span style="color:#A7C080;"> __iter__</span><span style="color:#D3C6AA;">(self):</span></span>
<span class="line"><span style="color:#D699B6;">        self</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">a </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 6</span></span>
<span class="line"><span style="color:#E67E80;">        return</span><span style="color:#D699B6;"> self</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">    def</span><span style="color:#A7C080;"> __next__</span><span style="color:#D3C6AA;">(self):</span></span>
<span class="line"><span style="color:#E67E80;">        if</span><span style="color:#D699B6;"> self</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">a </span><span style="color:#E69875;">&lt;=</span><span style="color:#D699B6;"> 10</span><span style="color:#D3C6AA;">:</span></span>
<span class="line"><span style="color:#D3C6AA;">            x </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> self</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">a</span></span>
<span class="line"><span style="color:#D699B6;">            self</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">a </span><span style="color:#E69875;">+=</span><span style="color:#D699B6;"> 1</span></span>
<span class="line"><span style="color:#E67E80;">            return</span><span style="color:#D3C6AA;"> x</span></span>
<span class="line"><span style="color:#E67E80;">        else</span><span style="color:#D3C6AA;">:</span></span>
<span class="line"><span style="color:#E67E80;">            raise</span><span style="color:#7FBBB3;"> StopIteration</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">instanceClass </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> MyNumbers</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#D3C6AA;">instanceIter </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> iter</span><span style="color:#D3C6AA;">(instanceClass)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  print(next(instanceIter))</span></span>
<span class="line"><span style="color:#E67E80;">for</span><span style="color:#D3C6AA;"> x </span><span style="color:#E67E80;">in</span><span style="color:#D3C6AA;"> instanceIter:</span></span>
<span class="line"><span style="color:#A7C080;">    print</span><span style="color:#D3C6AA;">(x)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="生成器-generator" tabindex="-1">生成器（generator） <a class="header-anchor" href="#生成器-generator" aria-label="Permalink to &quot;生成器（generator）&quot;">​</a></h2><p>使用了 yield 的函数被称为生成器（generator），跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作。 调用一个生成器函数，返回的是一个迭代器对象。 在调用生成器运行的过程中，<strong>每次遇到 yield 时函数会暂停并保存当前所有的运行信息，返回 yield 的值</strong>, 并在下一次执行 next() 方法时从当前位置继续运行。</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">import</span><span style="color:#D3C6AA;"> sys</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">def</span><span style="color:#A7C080;"> fibonacci</span><span style="color:#D3C6AA;">(n):  </span><span style="color:#859289;font-style:italic;">##  生成器函数 - 斐波那契</span></span>
<span class="line"><span style="color:#D3C6AA;">    a, b, counter </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 0</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">0</span></span>
<span class="line"><span style="color:#E67E80;">    while</span><span style="color:#83C092;"> True</span><span style="color:#D3C6AA;">:</span></span>
<span class="line"><span style="color:#E67E80;">        if</span><span style="color:#D3C6AA;"> counter </span><span style="color:#E69875;">&gt;</span><span style="color:#D3C6AA;"> n:</span></span>
<span class="line"><span style="color:#A7C080;">            print</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;当前计数器：&#39;</span><span style="color:#D3C6AA;">, counter)</span></span>
<span class="line"><span style="color:#E67E80;">            return</span></span>
<span class="line"><span style="color:#E67E80;">        yield</span><span style="color:#D3C6AA;"> a, b</span></span>
<span class="line"><span style="color:#D3C6AA;">        a, b </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> b, a </span><span style="color:#E69875;">+</span><span style="color:#D3C6AA;"> b</span></span>
<span class="line"><span style="color:#D3C6AA;">        counter </span><span style="color:#E69875;">+=</span><span style="color:#D699B6;"> 1</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">f </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> fibonacci</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">10</span><span style="color:#D3C6AA;">)  </span><span style="color:#859289;font-style:italic;">##  f 是一个迭代器，由生成器返回生成</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">while</span><span style="color:#83C092;"> True</span><span style="color:#D3C6AA;">:</span></span>
<span class="line"><span style="color:#E67E80;">    try</span><span style="color:#D3C6AA;">:</span></span>
<span class="line"><span style="color:#A7C080;">        print</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">next</span><span style="color:#D3C6AA;">(f))</span></span>
<span class="line"><span style="color:#E67E80;">    except</span><span style="color:#7FBBB3;"> StopIteration</span><span style="color:#D3C6AA;">:</span></span>
<span class="line"><span style="color:#D3C6AA;">        sys</span><span style="color:#859289;">.</span><span style="color:#A7C080;">exit</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  输出：</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  (0, 1)</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  (1, 1)</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  (1, 2)</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  (2, 3)</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  (3, 5)</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  (5, 8)</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  (8, 13)</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  (13, 21)</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  (21, 34)</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  (34, 55)</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  (55, 89)</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">##  当前计数器： 11</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div>`,119)]))}const D=l(r,[["render",t]]);export{d as __pageData,D as default};
