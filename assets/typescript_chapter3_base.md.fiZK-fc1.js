import{_ as n,c as a,o as p,ag as l}from"./chunks/framework.D-6U7MZ9.js";const d=JSON.parse('{"title":"编写基础请求代码","description":"","frontmatter":{},"headers":[],"relativePath":"typescript/chapter3/base.md","filePath":"typescript/chapter3/base.md","lastUpdated":1562065220000}'),e={name:"typescript/chapter3/base.md"};function o(r,s,c,t,i,y){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="编写基础请求代码" tabindex="-1">编写基础请求代码 <a class="header-anchor" href="#编写基础请求代码" aria-label="Permalink to &quot;编写基础请求代码&quot;">​</a></h1><p>我们这节课开始编写 <code>ts-axios</code> 库，我们的目标是实现简单的发送请求功能，即客户端通过 <code>XMLHttpRequest</code> 对象把请求发送到 server 端，server 端能收到请求并响应即可。</p><p>我们实现 <code>axios</code> 最基本的操作，通过传入一个对象发送请求，如下：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">axios</span><span style="color:#D3C6AA;">({</span></span>
<span class="line"><span style="color:#D3C6AA;">  method</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;get&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  url</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;/simple/get&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  params</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    a</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 1</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">    b</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 2</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="创建入口文件" tabindex="-1">创建入口文件 <a class="header-anchor" href="#创建入口文件" aria-label="Permalink to &quot;创建入口文件&quot;">​</a></h2><p>我们删除 <code>src</code> 目录下的文件，先创建一个 <code>index.ts</code> 文件，作为整个库的入口文件，然后我们先定义一个 <code>axios</code> 方法，并把它导出，如下：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> axios</span><span style="color:#D3C6AA;">(config)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> default</span><span style="color:#D3C6AA;"> axios</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这里 TypeScript 编译器会检查到错误，分别是 <code>config</code> 的声明上有隐含的 <code>any</code> 报错，以及代码块为空。代码块为空我们比较好理解，第一个错误的原因是因为我们给 TypeScript 编译配置的 <code>strict</code> 设置为 <code>true</code> 导致。</p><h3 id="编译配置文件-tsconfig-json" tabindex="-1">编译配置文件 tsconfig.json <a class="header-anchor" href="#编译配置文件-tsconfig-json" aria-label="Permalink to &quot;编译配置文件 tsconfig.json&quot;">​</a></h3><p><code>tsconfig.json</code> 文件中指定了用来编译这个项目的根文件和编译选项，关于它的具体学习，我希望同学们去<a href="https://www.typescriptlang.org/docs/handbook/tsconfig-json.html" target="_blank" rel="noreferrer">官网</a>系统学习一下</p><p>我们在之前讲 TypeScript 的基础时，会运行 <code>tsc</code> 命令去编译 TypeScript 文件，编译器会从当前目录开始去查找 <code>tsconfig.json</code> 文件，作为编译时的一些编译选项。</p><p>我们来看一下 tsconfig.json 文件，它包含了很多编译时的配置，其中我们把 <code>strict</code> 设置为 <code>true</code>，它相当于启用所有严格类型的检查选项。启用 <code>--strict</code> 相当于启用 <code>--noImplicitAny</code>,<code>--noImplicitThis</code>,<code>--alwaysStrict</code>，<code>--strictNullChecks</code> 和 <code>--strictFunctionTypes</code> 和 <code>--strictPropertyInitialization</code>。</p><p>我们讲 TypeScript 的基础时提到了 <code>--strictNullChecks</code>，其它的编译配置我建议同学们都去查看它的<a href="https://www.typescriptlang.org/docs/handbook/compiler-options.html" target="_blank" rel="noreferrer">官网文档</a>，把它当做手册去查阅即可。</p><h3 id="定义-axiosrequestconfig-接口类型" tabindex="-1">定义 AxiosRequestConfig 接口类型 <a class="header-anchor" href="#定义-axiosrequestconfig-接口类型" aria-label="Permalink to &quot;定义 AxiosRequestConfig 接口类型&quot;">​</a></h3><p>接下来，我们需要给 <code>config</code> 参数定义一种接口类型。我们创建一个 <code>types</code> 目录，在下面创建一个 <code>index.ts</code> 文件，作为我们项目中公用的类型定义文件。</p><p>接下来我们来定义 <code>AxiosRequestConfig</code> 接口类型：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> interface</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  url</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span></span>
<span class="line"><span style="color:#D3C6AA;">  method</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span></span>
<span class="line"><span style="color:#D3C6AA;">  data</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span></span>
<span class="line"><span style="color:#D3C6AA;">  params</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>其中，<code>url</code> 为请求的地址，必选属性；而其余属性都是可选属性。<code>method</code> 是请求的 HTTP 方法；<code>data</code> 是 <code>post</code>、<code>patch</code> 等类型请求的数据，放到 <code>request body</code> 中的；<code>params</code> 是 <code>get</code>、<code>head</code> 等类型请求的数据，拼接到 <code>url</code> 的 <code>query string</code> 中的。</p><p>为了让 <code>method</code> 只能传入合法的字符串，我们定义一种字符串字面量类型 <code>Method</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">export</span><span style="color:#E69875;"> type</span><span style="color:#83C092;"> Method</span><span style="color:#E69875;"> =</span><span style="color:#DBBC7F;"> &#39;get&#39;</span><span style="color:#E69875;"> |</span><span style="color:#DBBC7F;"> &#39;GET&#39;</span></span>
<span class="line"><span style="color:#E69875;">  |</span><span style="color:#DBBC7F;"> &#39;delete&#39;</span><span style="color:#E69875;"> |</span><span style="color:#DBBC7F;"> &#39;Delete&#39;</span></span>
<span class="line"><span style="color:#E69875;">  |</span><span style="color:#DBBC7F;"> &#39;head&#39;</span><span style="color:#E69875;"> |</span><span style="color:#DBBC7F;"> &#39;HEAD&#39;</span></span>
<span class="line"><span style="color:#E69875;">  |</span><span style="color:#DBBC7F;"> &#39;options&#39;</span><span style="color:#E69875;"> |</span><span style="color:#DBBC7F;"> &#39;OPTIONS&#39;</span></span>
<span class="line"><span style="color:#E69875;">  |</span><span style="color:#DBBC7F;"> &#39;post&#39;</span><span style="color:#E69875;"> |</span><span style="color:#DBBC7F;"> &#39;POST&#39;</span></span>
<span class="line"><span style="color:#E69875;">  |</span><span style="color:#DBBC7F;"> &#39;put&#39;</span><span style="color:#E69875;"> |</span><span style="color:#DBBC7F;"> &#39;PUT&#39;</span></span>
<span class="line"><span style="color:#E69875;">  |</span><span style="color:#DBBC7F;"> &#39;patch&#39;</span><span style="color:#E69875;"> |</span><span style="color:#DBBC7F;"> &#39;PATCH&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>接着我们把 <code>AxiosRequestConfig</code> 中的 <code>method</code> 属性类型改成这种字符串字面量类型：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> interface</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  url</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span></span>
<span class="line"><span style="color:#D3C6AA;">  method</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Method</span></span>
<span class="line"><span style="color:#D3C6AA;">  data</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span></span>
<span class="line"><span style="color:#D3C6AA;">  params</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>然后回到 <code>index.ts</code>，我们引入 <code>AxiosRequestConfig</code> 类型，作为 <code>config</code> 的参数类型，如下：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">import</span><span style="color:#D3C6AA;"> { AxiosRequestConfig } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;./types&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> axios</span><span style="color:#D3C6AA;">(config</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> default</span><span style="color:#D3C6AA;"> axios</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>那么接下来，我们就来实现这个函数体内部的逻辑——发送请求。</p><h2 id="利用-xmlhttprequest-发送请求" tabindex="-1">利用 XMLHttpRequest 发送请求 <a class="header-anchor" href="#利用-xmlhttprequest-发送请求" aria-label="Permalink to &quot;利用 XMLHttpRequest 发送请求&quot;">​</a></h2><p>我们并不想在 <code>index.ts</code> 中去实现发送请求的逻辑，我们利用模块化的编程思想，把这个功能拆分到一个单独的模块中。</p><p>于是我们在 <code>src</code> 目录下创建一个 <code>xhr.ts</code> 文件，我们导出一个 <code>xhr</code> 方法，它接受一个 <code>config</code> 参数，类型也是 <code>AxiosRequestConfig</code> 类型。</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">import</span><span style="color:#D3C6AA;"> { AxiosRequestConfig } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;./types&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> default</span><span style="color:#E67E80;"> function</span><span style="color:#A7C080;"> xhr</span><span style="color:#D3C6AA;">(config</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>接下来，我们来实现这个函数体逻辑，如下：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> default</span><span style="color:#E67E80;"> function</span><span style="color:#A7C080;"> xhr</span><span style="color:#D3C6AA;">(config</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> void</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> {</span><span style="color:#D3C6AA;"> data</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> null</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> url,</span><span style="color:#D3C6AA;"> method</span><span style="color:#E69875;"> =</span><span style="color:#DBBC7F;"> &#39;get&#39;</span><span style="color:#D3C6AA;"> }</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> config</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> request</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> XMLHttpRequest</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">  request</span><span style="color:#859289;">.</span><span style="color:#A7C080;">open</span><span style="color:#D3C6AA;">(method</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toUpperCase</span><span style="color:#D3C6AA;">(),</span><span style="color:#D3C6AA;"> url,</span><span style="color:#D699B6;"> true</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">  request</span><span style="color:#859289;">.</span><span style="color:#A7C080;">send</span><span style="color:#D3C6AA;">(data)</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>我们首先通过解构赋值的语法从 <code>config</code> 中拿到对应的属性值赋值给我的变量，并且还定义了一些默认值，因为在 <code>AxiosRequestConfig</code> 接口的定义中，有些属性是可选的。</p><p>接着我们实例化了一个 <code>XMLHttpRequest</code> 对象，然后调用了它的 <code>open</code> 方法，传入了对应的一些参数，最后调用 <code>send</code> 方法发送请求。</p><p>对于 <code>XMLHttpRequest</code> 的学习，我希望同学们去 <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest" target="_blank" rel="noreferrer">mdn</a> 上系统地学习一下它的一些属性和方法，当做参考资料，因为在后续的开发中我们可能会反复查阅这些文档资料。</p><h3 id="引入-xhr-模块" tabindex="-1">引入 xhr 模块 <a class="header-anchor" href="#引入-xhr-模块" aria-label="Permalink to &quot;引入 xhr 模块&quot;">​</a></h3><p>编写好了 <code>xhr</code> 模块，我们就需要在 <code>index.ts</code> 中去引入这个模块，如下：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">import</span><span style="color:#D3C6AA;"> { AxiosRequestConfig } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;./types&#39;</span></span>
<span class="line"><span style="color:#D699B6;">import</span><span style="color:#D3C6AA;"> xhr </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;./xhr&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> axios</span><span style="color:#D3C6AA;">(config</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> void</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">  xhr</span><span style="color:#D3C6AA;">(config)</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> default</span><span style="color:#D3C6AA;"> axios</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>那么至此，我们基本的发送请求代码就编写完毕了，接下来我们来写一个小 demo，来使用我们编写的 axios 库去发送请求。</p><h2 id="demo-编写" tabindex="-1">demo 编写 <a class="header-anchor" href="#demo-编写" aria-label="Permalink to &quot;demo 编写&quot;">​</a></h2><p>我们会利用 Node.js 的 <a href="http://expressjs.com/" target="_blank" rel="noreferrer"><code>express</code></a> 库去运行我们的 demo，利用 <a href="https://webpack.js.org/" target="_blank" rel="noreferrer"><code>webpack</code></a> 来作为 demo 的构建工具。</p><h3 id="依赖安装" tabindex="-1">依赖安装 <a class="header-anchor" href="#依赖安装" aria-label="Permalink to &quot;依赖安装&quot;">​</a></h3><p>我们先来安装一些编写 demo 需要的依赖包，如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;webpack&quot;: &quot;^4.28.4&quot;,</span></span>
<span class="line"><span>&quot;webpack-dev-middleware&quot;: &quot;^3.5.0&quot;,</span></span>
<span class="line"><span>&quot;webpack-hot-middleware&quot;: &quot;^2.24.3&quot;,</span></span>
<span class="line"><span>&quot;ts-loader&quot;: &quot;^5.3.3&quot;,</span></span>
<span class="line"><span>&quot;tslint-loader&quot;: &quot;^3.5.4&quot;,</span></span>
<span class="line"><span>&quot;express&quot;: &quot;^4.16.4&quot;,</span></span>
<span class="line"><span>&quot;body-parser&quot;: &quot;^1.18.3&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>其中，<code>webpack</code> 是打包构建工具，<code>webpack-dev-middleware</code> 和 <code>webpack-hot-middleware</code> 是 2 个 <code>express</code> 的 <code>webpack</code> 中间件，<code>ts-loader</code> 和 <code>tslint-loader</code> 是 <code>webpack</code> 需要的 TypeScript 相关 loader，<code>express</code> 是 Node.js 的服务端框架，<code>body-parser</code> 是 <code>express</code> 的一个中间件，解析 <code>body</code> 数据用的。</p><h3 id="编写-webpack-配置文件" tabindex="-1">编写 webpack 配置文件 <a class="header-anchor" href="#编写-webpack-配置文件" aria-label="Permalink to &quot;编写 webpack 配置文件&quot;">​</a></h3><p>在 <code>examples</code> 目录下创建 <code>webpack</code> 配置文件 <code>webpack.config.js</code>：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> fs </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;fs&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> path </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;path&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> webpack </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;webpack&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#83C092;">module</span><span style="color:#859289;">.</span><span style="color:#83C092;">exports</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  mode</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;development&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">  /**</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">   * 我们会在 examples 目录下建多个子目录</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">   * 我们会把不同章节的 demo 放到不同的子目录中</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">   * 每个子目录的下会创建一个 app.ts</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">   * app.ts 作为 webpack 构建的入口文件</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">   * entries 收集了多目录个入口文件，并且每个入口还引入了一个用于热更新的文件</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">   * entries 是一个对象，key 为目录名</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#D3C6AA;">  entry</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> fs</span><span style="color:#859289;">.</span><span style="color:#A7C080;">readdirSync</span><span style="color:#D3C6AA;">(__dirname)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">reduce</span><span style="color:#D3C6AA;">((entries, dir) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">    const</span><span style="color:#D3C6AA;"> fullDir </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> path</span><span style="color:#859289;">.</span><span style="color:#A7C080;">join</span><span style="color:#D3C6AA;">(__dirname, dir)</span></span>
<span class="line"><span style="color:#E69875;">    const</span><span style="color:#D3C6AA;"> entry </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> path</span><span style="color:#859289;">.</span><span style="color:#A7C080;">join</span><span style="color:#D3C6AA;">(fullDir, </span><span style="color:#DBBC7F;">&#39;app.ts&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#E67E80;">    if</span><span style="color:#D3C6AA;"> (fs</span><span style="color:#859289;">.</span><span style="color:#A7C080;">statSync</span><span style="color:#D3C6AA;">(fullDir)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">isDirectory</span><span style="color:#D3C6AA;">() </span><span style="color:#E69875;">&amp;&amp;</span><span style="color:#D3C6AA;"> fs</span><span style="color:#859289;">.</span><span style="color:#A7C080;">existsSync</span><span style="color:#D3C6AA;">(entry)) {</span></span>
<span class="line"><span style="color:#D3C6AA;">      entries[dir] </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [</span><span style="color:#DBBC7F;">&#39;webpack-hot-middleware/client&#39;</span><span style="color:#D3C6AA;">, entry]</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> entries</span></span>
<span class="line"><span style="color:#D3C6AA;">  }, {}),</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">  /**</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">   * 根据不同的目录名称，打包生成目标 js，名称和目录名一致</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#D3C6AA;">  output</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    path</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> path</span><span style="color:#859289;">.</span><span style="color:#A7C080;">join</span><span style="color:#D3C6AA;">(__dirname, </span><span style="color:#DBBC7F;">&#39;__build__&#39;</span><span style="color:#D3C6AA;">),</span></span>
<span class="line"><span style="color:#D3C6AA;">    filename</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;[name].js&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">    publicPath</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;/__build__/&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">  module</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    rules</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span></span>
<span class="line"><span style="color:#D3C6AA;">      {</span></span>
<span class="line"><span style="color:#D3C6AA;">        test</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> /</span><span style="color:#A7C080;">\\.</span><span style="color:#DBBC7F;">ts</span><span style="color:#E67E80;">$</span><span style="color:#DBBC7F;">/</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">        enforce</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;pre&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">        use</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span></span>
<span class="line"><span style="color:#D3C6AA;">          {</span></span>
<span class="line"><span style="color:#D3C6AA;">            loader</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;tslint-loader&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">          }</span></span>
<span class="line"><span style="color:#D3C6AA;">        ]</span></span>
<span class="line"><span style="color:#D3C6AA;">      },</span></span>
<span class="line"><span style="color:#D3C6AA;">      {</span></span>
<span class="line"><span style="color:#D3C6AA;">        test</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> /</span><span style="color:#A7C080;">\\.</span><span style="color:#DBBC7F;">tsx</span><span style="color:#E69875;">?</span><span style="color:#E67E80;">$</span><span style="color:#DBBC7F;">/</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">        use</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span></span>
<span class="line"><span style="color:#D3C6AA;">          {</span></span>
<span class="line"><span style="color:#D3C6AA;">            loader</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;ts-loader&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">            options</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">              transpileOnly</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> true</span></span>
<span class="line"><span style="color:#D3C6AA;">            }</span></span>
<span class="line"><span style="color:#D3C6AA;">          }</span></span>
<span class="line"><span style="color:#D3C6AA;">        ]</span></span>
<span class="line"><span style="color:#D3C6AA;">      }</span></span>
<span class="line"><span style="color:#D3C6AA;">    ]</span></span>
<span class="line"><span style="color:#D3C6AA;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">  resolve</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    extensions</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span><span style="color:#DBBC7F;">&#39;.ts&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;.tsx&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;.js&#39;</span><span style="color:#D3C6AA;">]</span></span>
<span class="line"><span style="color:#D3C6AA;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">  plugins</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span></span>
<span class="line"><span style="color:#E67E80;">    new</span><span style="color:#D3C6AA;"> webpack</span><span style="color:#859289;">.</span><span style="color:#A7C080;">HotModuleReplacementPlugin</span><span style="color:#D3C6AA;">(),</span></span>
<span class="line"><span style="color:#E67E80;">    new</span><span style="color:#D3C6AA;"> webpack</span><span style="color:#859289;">.</span><span style="color:#A7C080;">NoEmitOnErrorsPlugin</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#D3C6AA;">  ]</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br></div></div><h3 id="编写-server-文件" tabindex="-1">编写 server 文件 <a class="header-anchor" href="#编写-server-文件" aria-label="Permalink to &quot;编写 server 文件&quot;">​</a></h3><p>在 <code>examples</code> 目录下创建 <code>server.js</code> 文件：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> express </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;express&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> bodyParser </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;body-parser&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> webpack </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;webpack&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> webpackDevMiddleware </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;webpack-dev-middleware&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> webpackHotMiddleware </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;webpack-hot-middleware&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> WebpackConfig </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;./webpack.config&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> app </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> express</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> compiler </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> webpack</span><span style="color:#D3C6AA;">(WebpackConfig)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">app</span><span style="color:#859289;">.</span><span style="color:#A7C080;">use</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">webpackDevMiddleware</span><span style="color:#D3C6AA;">(compiler, {</span></span>
<span class="line"><span style="color:#D3C6AA;">  publicPath</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;/__build__/&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  stats</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    colors</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> true</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">    chunks</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> false</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">app</span><span style="color:#859289;">.</span><span style="color:#A7C080;">use</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">webpackHotMiddleware</span><span style="color:#D3C6AA;">(compiler))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">app</span><span style="color:#859289;">.</span><span style="color:#A7C080;">use</span><span style="color:#D3C6AA;">(express</span><span style="color:#859289;">.</span><span style="color:#A7C080;">static</span><span style="color:#D3C6AA;">(__dirname))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">app</span><span style="color:#859289;">.</span><span style="color:#A7C080;">use</span><span style="color:#D3C6AA;">(bodyParser</span><span style="color:#859289;">.</span><span style="color:#A7C080;">json</span><span style="color:#D3C6AA;">())</span></span>
<span class="line"><span style="color:#D3C6AA;">app</span><span style="color:#859289;">.</span><span style="color:#A7C080;">use</span><span style="color:#D3C6AA;">(bodyParser</span><span style="color:#859289;">.</span><span style="color:#A7C080;">urlencoded</span><span style="color:#D3C6AA;">({ extended</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> true</span><span style="color:#D3C6AA;"> }))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> port </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> process</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">env</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">PORT </span><span style="color:#E69875;">||</span><span style="color:#D699B6;"> 8080</span></span>
<span class="line"><span style="color:#83C092;">module</span><span style="color:#859289;">.</span><span style="color:#83C092;">exports</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> app</span><span style="color:#859289;">.</span><span style="color:#A7C080;">listen</span><span style="color:#D3C6AA;">(port, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">\`Server listening on http://localhost:</span><span style="color:#A7C080;">\${</span><span style="color:#D3C6AA;">port</span><span style="color:#A7C080;">}</span><span style="color:#DBBC7F;">, Ctrl+C to stop\`</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h3 id="编写-demo-代码" tabindex="-1">编写 demo 代码 <a class="header-anchor" href="#编写-demo-代码" aria-label="Permalink to &quot;编写 demo 代码&quot;">​</a></h3><p>首先在 <code>examples</code> 目录下创建 <code>index.html</code> 和 <code>global.css</code>，作为所有 <code>demo</code> 的入口文件已全局样式文件。</p><p><code>index.html</code>：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">&lt;!</span><span style="color:#E69875;">DOCTYPE</span><span style="color:#DBBC7F;"> html</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">&lt;</span><span style="color:#E69875;">html</span><span style="color:#DBBC7F;"> lang</span><span style="color:#A7C080;">=</span><span style="color:#A7C080;">&quot;en&quot;</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">  &lt;</span><span style="color:#E69875;">head</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;</span><span style="color:#E69875;">meta</span><span style="color:#DBBC7F;"> charset</span><span style="color:#A7C080;">=</span><span style="color:#A7C080;">&quot;utf-8&quot;</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;</span><span style="color:#E69875;">title</span><span style="color:#A7C080;">&gt;</span><span style="color:#D3C6AA;">ts-axios examples</span><span style="color:#A7C080;">&lt;/</span><span style="color:#E69875;">title</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;</span><span style="color:#E69875;">link</span><span style="color:#DBBC7F;"> rel</span><span style="color:#A7C080;">=</span><span style="color:#A7C080;">&quot;stylesheet&quot;</span><span style="color:#DBBC7F;"> href</span><span style="color:#A7C080;">=</span><span style="color:#A7C080;">&quot;/global.css&quot;</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">  &lt;/</span><span style="color:#E69875;">head</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">  &lt;</span><span style="color:#E69875;">body</span><span style="color:#DBBC7F;"> style</span><span style="color:#A7C080;">=</span><span style="color:#A7C080;">&quot;padding: 0 20px&quot;</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;</span><span style="color:#E69875;">h1</span><span style="color:#A7C080;">&gt;</span><span style="color:#D3C6AA;">ts-axios examples</span><span style="color:#A7C080;">&lt;/</span><span style="color:#E69875;">h1</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;</span><span style="color:#E69875;">ul</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">      &lt;</span><span style="color:#E69875;">li</span><span style="color:#A7C080;">&gt;&lt;</span><span style="color:#E69875;">a</span><span style="color:#DBBC7F;"> href</span><span style="color:#A7C080;">=</span><span style="color:#A7C080;">&quot;simple&quot;</span><span style="color:#A7C080;">&gt;</span><span style="color:#D3C6AA;">Simple</span><span style="color:#A7C080;">&lt;/</span><span style="color:#E69875;">a</span><span style="color:#A7C080;">&gt;&lt;/</span><span style="color:#E69875;">li</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;/</span><span style="color:#E69875;">ul</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">  &lt;/</span><span style="color:#E69875;">body</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">&lt;/</span><span style="color:#E69875;">html</span><span style="color:#A7C080;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><code>global.css</code>：</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">html</span><span style="color:#859289;">,</span><span style="color:#D699B6;"> body</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#83C092;">  font-family</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> -apple-system</span><span style="color:#859289;">,</span><span style="color:#A7C080;"> BlinkMacSystemFont</span><span style="color:#859289;">,</span><span style="color:#A7C080;"> &quot;Segoe UI&quot;</span><span style="color:#859289;">,</span><span style="color:#A7C080;"> Roboto</span><span style="color:#859289;">,</span><span style="color:#A7C080;"> Helvetica</span><span style="color:#859289;">,</span><span style="color:#A7C080;"> Arial</span><span style="color:#859289;">,</span><span style="color:#A7C080;"> sans-serif</span><span style="color:#859289;">,</span><span style="color:#A7C080;"> &quot;Apple Color Emoji&quot;</span><span style="color:#859289;">,</span><span style="color:#A7C080;"> &quot;Segoe UI Emoji&quot;</span><span style="color:#859289;">,</span><span style="color:#A7C080;"> &quot;Segoe UI Symbol&quot;</span><span style="color:#859289;">;</span></span>
<span class="line"><span style="color:#83C092;">  color</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> #</span><span style="color:#A7C080;">2c3e50</span><span style="color:#859289;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D699B6;">ul</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#83C092;">  line-height</span><span style="color:#859289;">:</span><span style="color:#A7C080;"> 1.5</span><span style="color:#E69875;">em</span><span style="color:#859289;">;</span></span>
<span class="line"><span style="color:#83C092;">  padding-left</span><span style="color:#859289;">:</span><span style="color:#A7C080;"> 1.5</span><span style="color:#E69875;">em</span><span style="color:#859289;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D699B6;">a</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#83C092;">  color</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> #</span><span style="color:#A7C080;">7f8c8d</span><span style="color:#859289;">;</span></span>
<span class="line"><span style="color:#83C092;">  text-decoration</span><span style="color:#859289;">:</span><span style="color:#A7C080;"> none</span><span style="color:#859289;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D699B6;">a</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;">hover</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#83C092;">  color</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> #</span><span style="color:#A7C080;">4fc08d</span><span style="color:#859289;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>然后在 <code>examples</code> 目录下创建 <code>simple</code> 目录，作为本章节的 demo 目录，在该目录下再创建 <code>index.html</code> 和 <code>app.ts</code> 文件</p><p><code>index.html</code> 文件如下:</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">&lt;!</span><span style="color:#E69875;">DOCTYPE</span><span style="color:#DBBC7F;"> html</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">&lt;</span><span style="color:#E69875;">html</span><span style="color:#DBBC7F;"> lang</span><span style="color:#A7C080;">=</span><span style="color:#A7C080;">&quot;en&quot;</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">  &lt;</span><span style="color:#E69875;">head</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;</span><span style="color:#E69875;">meta</span><span style="color:#DBBC7F;"> charset</span><span style="color:#A7C080;">=</span><span style="color:#A7C080;">&quot;utf-8&quot;</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;</span><span style="color:#E69875;">title</span><span style="color:#A7C080;">&gt;</span><span style="color:#D3C6AA;">Simple example</span><span style="color:#A7C080;">&lt;/</span><span style="color:#E69875;">title</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">  &lt;/</span><span style="color:#E69875;">head</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">  &lt;</span><span style="color:#E69875;">body</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;</span><span style="color:#E69875;">script</span><span style="color:#DBBC7F;"> src</span><span style="color:#A7C080;">=</span><span style="color:#A7C080;">&quot;/__build__/simple.js&quot;</span><span style="color:#A7C080;">&gt;&lt;/</span><span style="color:#E69875;">script</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">  &lt;/</span><span style="color:#E69875;">body</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">&lt;/</span><span style="color:#E69875;">html</span><span style="color:#A7C080;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><code>app.ts</code> 文件如下：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">import</span><span style="color:#D3C6AA;"> axios </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;../../src/index&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">axios</span><span style="color:#D3C6AA;">({</span></span>
<span class="line"><span style="color:#D3C6AA;">  method</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;get&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  url</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;/simple/get&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  params</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    a</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 1</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">    b</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 2</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>因为我们这里通过 <code>axios</code> 发送了请求，那么我们的 server 端要实现对应的路由接口，我们来修改 <code>server.js</code>，添加如下代码：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> router </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> express</span><span style="color:#859289;">.</span><span style="color:#A7C080;">Router</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">router</span><span style="color:#859289;">.</span><span style="color:#A7C080;">get</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/simple/get&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">(req,</span><span style="color:#D3C6AA;"> res)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  res</span><span style="color:#859289;">.</span><span style="color:#A7C080;">json</span><span style="color:#D3C6AA;">({</span></span>
<span class="line"><span style="color:#D3C6AA;">    msg</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> \`hello world\`</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">app</span><span style="color:#859289;">.</span><span style="color:#A7C080;">use</span><span style="color:#D3C6AA;">(router)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="运行-demo" tabindex="-1">运行 demo <a class="header-anchor" href="#运行-demo" aria-label="Permalink to &quot;运行 demo&quot;">​</a></h3><p>接着我们在 <code>package.json</code> 中去新增一个 <code>npm script</code>：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;dev&quot;: &quot;node examples/server.js&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后我们去控制台执行命令</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">npm</span><span style="color:#DBBC7F;"> run</span><span style="color:#DBBC7F;"> dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>相当于执行了 <code>node examples/server.js</code>，会开启我们的 server。</p><p>接着我们打开 chrome 浏览器，访问 <code>http://localhost:8080/</code> 即可访问我们的 demo 了，我们点到 <code>Simple</code> 目录下，通过开发者工具的 network 部分我们可以看到成功发送到了一条请求，并在 response 中看到了服务端返回的数据。</p><p>至此，我们就实现了一个简单的请求发送，并编写了相关的 demo。但是现在存在一些问题：我们传入的 <code>params</code> 数据并没有用，也没有拼接到 <code>url</code> 上；我们对 request body 的数据格式、请求头 headers 也没有做处理；另外我们虽然从网络层面收到了响应的数据，但是我们代码层面也并没有对响应的数据做处理。那么下面一章，我们就来解决这些问题。</p>`,71)]))}const b=n(e,[["render",o]]);export{d as __pageData,b as default};
