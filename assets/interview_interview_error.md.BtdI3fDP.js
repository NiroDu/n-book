import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.D-6U7MZ9.js";const b=JSON.parse('{"title":"面试中遇上的题","description":"","frontmatter":{},"headers":[],"relativePath":"interview/interview_error.md","filePath":"interview/interview_error.md","lastUpdated":1589456201000}'),e={name:"interview/interview_error.md"};function o(r,s,c,t,y,i){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="面试中遇上的题" tabindex="-1">面试中遇上的题 <a class="header-anchor" href="#面试中遇上的题" aria-label="Permalink to &quot;面试中遇上的题&quot;">​</a></h1><h2 id="第-1-题" tabindex="-1">第 1 题 <a class="header-anchor" href="#第-1-题" aria-label="Permalink to &quot;第 1 题&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">typeof</span><span style="color:#D699B6;"> null</span><span style="color:#D3C6AA;">); </span><span style="color:#859289;font-style:italic;">// object</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof" target="_blank" rel="noreferrer">解析</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof" target="_blank" rel="noreferrer">instanceof</a></p><p><a href="https://www.jianshu.com/p/585926ae62cc" target="_blank" rel="noreferrer">Object.prototype.toString.call()</a></p><h2 id="第-2-题" tabindex="-1">第 2 题 <a class="header-anchor" href="#第-2-题" aria-label="Permalink to &quot;第 2 题&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> i, j, k;</span></span>
<span class="line"><span style="color:#E67E80;">for</span><span style="color:#D3C6AA;"> (i </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 0</span><span style="color:#D3C6AA;">, j </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 0</span><span style="color:#D3C6AA;">; i </span><span style="color:#E69875;">&lt;</span><span style="color:#D699B6;"> 8</span><span style="color:#D3C6AA;">, j </span><span style="color:#E69875;">&lt;</span><span style="color:#D699B6;"> 5</span><span style="color:#D3C6AA;">; i</span><span style="color:#E69875;">++</span><span style="color:#D3C6AA;">, j</span><span style="color:#E69875;">++</span><span style="color:#D3C6AA;">) {</span></span>
<span class="line"><span style="color:#D3C6AA;">  k </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> i </span><span style="color:#E69875;">+</span><span style="color:#D3C6AA;"> j;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(i, j, k); </span><span style="color:#859289;font-style:italic;">// 5,5,8</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> i, j, k;</span></span>
<span class="line"><span style="color:#E67E80;">for</span><span style="color:#D3C6AA;"> (i </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 0</span><span style="color:#D3C6AA;">, j </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 0</span><span style="color:#D3C6AA;">; i </span><span style="color:#E69875;">&lt;</span><span style="color:#D699B6;"> 8</span><span style="color:#D3C6AA;">, j </span><span style="color:#E69875;">&lt;</span><span style="color:#D699B6;"> 5</span><span style="color:#D3C6AA;">; i</span><span style="color:#E69875;">++</span><span style="color:#D3C6AA;">, j</span><span style="color:#E69875;">++</span><span style="color:#D3C6AA;">) {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;i:&quot;</span><span style="color:#D3C6AA;">, i);</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;j:&quot;</span><span style="color:#D3C6AA;">, j);</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;k-before:&quot;</span><span style="color:#D3C6AA;">, k);</span></span>
<span class="line"><span style="color:#D3C6AA;">  k </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> i </span><span style="color:#E69875;">+</span><span style="color:#D3C6AA;"> j;</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;k-after:&quot;</span><span style="color:#D3C6AA;">, k);</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(i, j, k);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="第-3-题" tabindex="-1">第 3 题 <a class="header-anchor" href="#第-3-题" aria-label="Permalink to &quot;第 3 题&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> foo </span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;"> &quot;Hello&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  var</span><span style="color:#D3C6AA;"> bar</span><span style="color:#E69875;"> =</span><span style="color:#DBBC7F;"> &quot;World&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;1:&quot;</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> foo</span><span style="color:#E69875;"> +</span><span style="color:#D3C6AA;"> bar);</span></span>
<span class="line"><span style="color:#D3C6AA;">})();</span></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;2:&quot;</span><span style="color:#D3C6AA;">, foo </span><span style="color:#E69875;">+</span><span style="color:#D3C6AA;"> bar);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">输出答案：</span></span>
<span class="line"><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">: HelloWorld</span></span>
<span class="line"><span style="color:#D3C6AA;">Uncaught </span><span style="color:#83C092;">ReferenceError</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> bar is not defined</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>自执行函数把变量 bar 限定在其中了。</p><h2 id="第-4-题" tabindex="-1">第 4 题 <a class="header-anchor" href="#第-4-题" aria-label="Permalink to &quot;第 4 题&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">for</span><span style="color:#D3C6AA;"> (</span><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> i </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 0</span><span style="color:#D3C6AA;">; i </span><span style="color:#E69875;">&lt;</span><span style="color:#D699B6;"> 4</span><span style="color:#D3C6AA;">; i</span><span style="color:#E69875;">++</span><span style="color:#D3C6AA;">) {</span></span>
<span class="line"><span style="color:#A7C080;">  setTimeout</span><span style="color:#D3C6AA;">(() </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(i);</span></span>
<span class="line"><span style="color:#D3C6AA;">  }, </span><span style="color:#D699B6;">0</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#7FBBB3;">Promise</span><span style="color:#859289;">.</span><span style="color:#A7C080;">resolve</span><span style="color:#D3C6AA;">()</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(() </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">2</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span>
<span class="line"><span style="color:#D3C6AA;">(() </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">3</span><span style="color:#D3C6AA;">))();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">输出答案：</span></span>
<span class="line"><span style="color:#D699B6;">3</span></span>
<span class="line"><span style="color:#D699B6;">2</span></span>
<span class="line"><span style="color:#D699B6;">4</span></span>
<span class="line"><span style="color:#D699B6;">4</span></span>
<span class="line"><span style="color:#D699B6;">4</span></span>
<span class="line"><span style="color:#D699B6;">4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>解析：关键处是输出了 4 次 4。</p><p>settimeout 是异步执行，0ms 后往任务队列里面添加一个任务，只有主线上的全部执行完，才会执行任务队列里的任务，当主线执行完成后，i 是 4，所以此时再去执行任务队列里的任务时，i 全部是 4 了。对于打印 4 次是：每一次 for 循环的时候，settimeout 都执行一次，但是里面的函数没有被执行，而是被放到了任务队列里面，等待执行，for 循环了 4 次，就放了 4 次，当主线程执行完成后，才进入任务队列里面执行。</p><p>想要它按着 0,1,2,3 的顺序输出，有两种办法，一个是使用 let，另外一个方式是自执行函数限定。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">方式一：</span><span style="color:#E69875;">let</span></span>
<span class="line"><span style="color:#E67E80;">for</span><span style="color:#D3C6AA;">(</span><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> i </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 0</span><span style="color:#D3C6AA;">; i </span><span style="color:#E69875;">&lt;</span><span style="color:#D699B6;"> 4</span><span style="color:#D3C6AA;">; i</span><span style="color:#E69875;">++</span><span style="color:#D3C6AA;">) {</span></span>
<span class="line"><span style="color:#A7C080;">  setTimeout</span><span style="color:#D3C6AA;">(()</span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;">{</span></span>
<span class="line"><span style="color:#D3C6AA;">    console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(i);</span></span>
<span class="line"><span style="color:#D3C6AA;">  },</span><span style="color:#D699B6;">0</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#D3C6AA;">方式二：自执行函数</span></span>
<span class="line"><span style="color:#E67E80;">for</span><span style="color:#D3C6AA;">(</span><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> i </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 0</span><span style="color:#D3C6AA;">; i </span><span style="color:#E69875;">&lt;</span><span style="color:#D699B6;"> 4</span><span style="color:#D3C6AA;">; i</span><span style="color:#E69875;">++</span><span style="color:#D3C6AA;">) {</span></span>
<span class="line"><span style="color:#A7C080;">  setTimeout</span><span style="color:#D3C6AA;">((()</span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;">{</span></span>
<span class="line"><span style="color:#D3C6AA;">    console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(i);</span></span>
<span class="line"><span style="color:#D3C6AA;">  })(),</span><span style="color:#D699B6;">0</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="第-5-题" tabindex="-1">第 5 题 <a class="header-anchor" href="#第-5-题" aria-label="Permalink to &quot;第 5 题&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">var</span><span style="color:#A7C080;"> F</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {};</span></span>
<span class="line"><span style="color:#7FBBB3;">Object</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">prototype</span><span style="color:#859289;">.</span><span style="color:#A7C080;">a</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;Object&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"><span style="color:#7FBBB3;">Function</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">prototype</span><span style="color:#859289;">.</span><span style="color:#A7C080;">b</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;Function&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> f </span><span style="color:#E69875;">=</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> F</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#E67E80;">try</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  f</span><span style="color:#859289;">.</span><span style="color:#A7C080;">a</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#D3C6AA;">} </span><span style="color:#E67E80;">catch</span><span style="color:#D3C6AA;"> (e) {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;fa-error&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#E67E80;">try</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  f</span><span style="color:#859289;">.</span><span style="color:#A7C080;">b</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#D3C6AA;">} </span><span style="color:#E67E80;">catch</span><span style="color:#D3C6AA;"> (e) {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;fb-error&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#E67E80;">try</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  F</span><span style="color:#859289;">.</span><span style="color:#A7C080;">a</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#D3C6AA;">} </span><span style="color:#E67E80;">catch</span><span style="color:#D3C6AA;"> (e) {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;Fa-error&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#E67E80;">try</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  F</span><span style="color:#859289;">.</span><span style="color:#A7C080;">b</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#D3C6AA;">} </span><span style="color:#E67E80;">catch</span><span style="color:#D3C6AA;"> (e) {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;Fb-error&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">输出答案：</span></span>
<span class="line"><span style="color:#D3C6AA;">Object</span></span>
<span class="line"><span style="color:#D3C6AA;">fb</span><span style="color:#E69875;">-</span><span style="color:#D3C6AA;">error</span></span>
<span class="line"><span style="color:#D3C6AA;">Object</span></span>
<span class="line"><span style="color:#D3C6AA;">Function</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>解析： f 的原型链：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">f</span><span style="color:#DBBC7F;"> -----</span><span style="color:#E69875;">&gt;</span><span style="color:#DBBC7F;"> F.prototype</span><span style="color:#DBBC7F;"> -----</span><span style="color:#E69875;">&gt;</span><span style="color:#DBBC7F;"> Object.prototype</span><span style="color:#DBBC7F;"> -----</span><span style="color:#E69875;">&gt;</span><span style="color:#DBBC7F;"> null</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>F 的原型链：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">F</span><span style="color:#DBBC7F;"> -----</span><span style="color:#E69875;">&gt;</span><span style="color:#DBBC7F;"> Function.prototype</span><span style="color:#DBBC7F;"> -----</span><span style="color:#E69875;">&gt;</span><span style="color:#DBBC7F;"> Object.prototype</span><span style="color:#DBBC7F;"> -----</span><span style="color:#E69875;">&gt;</span><span style="color:#DBBC7F;"> null</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>所以当 f.b()时，因为 f 的原型链上找不到 b 方法，所以报错。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">f</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">__proto__ </span><span style="color:#E69875;">===</span><span style="color:#7FBBB3;"> F</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">prototype; </span><span style="color:#859289;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#D3C6AA;">F</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">__proto__ </span><span style="color:#E69875;">===</span><span style="color:#7FBBB3;"> Function</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">prototype; </span><span style="color:#859289;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">f</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">__proto__</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">__proto__ </span><span style="color:#E69875;">===</span><span style="color:#7FBBB3;"> Object</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">prototype; </span><span style="color:#859289;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#D3C6AA;">F</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">__proto__</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">__proto__ </span><span style="color:#E69875;">===</span><span style="color:#7FBBB3;"> Object</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">prototype; </span><span style="color:#859289;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">f</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">constructor </span><span style="color:#E69875;">===</span><span style="color:#D3C6AA;"> F; </span><span style="color:#859289;font-style:italic;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><a href="https://www.cnblogs.com/xiaohuochai/p/5721552.html" target="_blank" rel="noreferrer">好文 - 一张图理解 prototype、proto 和 constructor 的三角关系</a></p><h2 id="第-6-题" tabindex="-1">第 6 题 <a class="header-anchor" href="#第-6-题" aria-label="Permalink to &quot;第 6 题&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> obj1 </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  name</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;obj1&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#A7C080;">  sayName</span><span style="color:#859289;">:</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">name);</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">name </span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;"> &quot;name&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> obj2 </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> { name</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;obj2&quot;</span><span style="color:#D3C6AA;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> obj3 </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  name</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;obj3&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#A7C080;">  sayName</span><span style="color:#859289;">:</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    (</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">      console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">name);</span></span>
<span class="line"><span style="color:#D3C6AA;">    })(</span><span style="color:#D699B6;">this</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> obj4 </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  name</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;obj4&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#A7C080;">  sayName</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">name);</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">obj1</span><span style="color:#859289;">.</span><span style="color:#A7C080;">sayName</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#D3C6AA;">obj3</span><span style="color:#859289;">.</span><span style="color:#A7C080;">sayName</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#D3C6AA;">obj4</span><span style="color:#859289;">.</span><span style="color:#A7C080;">sayName</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">obj1</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">sayName</span><span style="color:#859289;">.</span><span style="color:#A7C080;">call</span><span style="color:#D3C6AA;">(obj2);</span></span>
<span class="line"><span style="color:#D3C6AA;">obj3</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">sayName</span><span style="color:#859289;">.</span><span style="color:#A7C080;">call</span><span style="color:#D3C6AA;">(obj2);</span></span>
<span class="line"><span style="color:#D3C6AA;">obj4</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">sayName</span><span style="color:#859289;">.</span><span style="color:#A7C080;">call</span><span style="color:#D3C6AA;">(obj2);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">输出答案：</span></span>
<span class="line"><span style="color:#D3C6AA;">obj1</span></span>
<span class="line"><span style="color:#D3C6AA;">name</span></span>
<span class="line"><span style="color:#D3C6AA;">name</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">obj2</span></span>
<span class="line"><span style="color:#D3C6AA;">name</span></span>
<span class="line"><span style="color:#D3C6AA;">name</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>解析： obj3.sayName.call(obj2); 箭头函数没有自身的 this，会直接忽略掉 call 的第一个参数，所以没法改掉 this 的指向。</p><p>obj4.sayName.call(obj2); 自执行函数也没法通过 call 来改变（不确定正误）</p><h2 id="第-7-题" tabindex="-1">第 7 题 <a class="header-anchor" href="#第-7-题" aria-label="Permalink to &quot;第 7 题&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> promise </span><span style="color:#E69875;">=</span><span style="color:#E67E80;"> new</span><span style="color:#7FBBB3;"> Promise</span><span style="color:#D3C6AA;">((resolve, reject) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#A7C080;">  resolve</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">2</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">promise</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(() </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">3</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">4</span><span style="color:#D3C6AA;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">输出答案：</span></span>
<span class="line"><span style="color:#D699B6;">1</span></span>
<span class="line"><span style="color:#D699B6;">2</span></span>
<span class="line"><span style="color:#D699B6;">4</span></span>
<span class="line"><span style="color:#D699B6;">3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="第-8-题-讲讲-vue-和-react-的异同" tabindex="-1">第 8 题 讲讲 Vue 和 React 的异同 <a class="header-anchor" href="#第-8-题-讲讲-vue-和-react-的异同" aria-label="Permalink to &quot;第 8 题 讲讲 Vue 和 React 的异同&quot;">​</a></h2><p>讲讲 Vue 和 React 的不同处和相同处。</p><h3 id="_1-virtual-dom" tabindex="-1">1. Virtual DOM <a class="header-anchor" href="#_1-virtual-dom" aria-label="Permalink to &quot;1. Virtual DOM&quot;">​</a></h3><p>Vue宣称可以更快地计算出Virtual DOM的差异，这是由于它在渲染过程中，会跟踪每一个组件的依赖关系，不需要重新渲染整个组件树。</p><p>而对于React而言，每当应用的状态被改变时，全部子组件都会重新渲染。当然，这可以通过shouldComponentUpdate这个生命周期方法来进行控制，但Vue将此视为默认的优化。</p><h3 id="_2-组件化" tabindex="-1">2. 组件化 <a class="header-anchor" href="#_2-组件化" aria-label="Permalink to &quot;2. 组件化&quot;">​</a></h3><p>在Vue中，如果你遵守一定的规则，你可以使用单文件组件，HTML, JavaScript和CSS都写在一个文件之中。你不再需要在.vue组件文件中引入CSS，虽然这也是可以的。</p><p>React也是非常相似的，JavaScript与JSX被写入同一个组件文件中。</p><h3 id="_3-props" tabindex="-1">3. Props <a class="header-anchor" href="#_3-props" aria-label="Permalink to &quot;3. Props&quot;">​</a></h3><p>React和Vue都有&#39;props&#39;的概念，这是properties的简写。props在组件中是一个特殊的属性，允许父组件往子组件传送数据。</p><h3 id="_4-模板-vs-jsx" tabindex="-1">4. 模板 vs JSX <a class="header-anchor" href="#_4-模板-vs-jsx" aria-label="Permalink to &quot;4. 模板 vs JSX&quot;">​</a></h3><p>React与Vue最大的不同是模板的编写。Vue鼓励你去写近似常规HTML的模板。写起来很接近标准HTML元素，只是多了一些属性。</p><p>React推荐你所有的模板通用JavaScript的语法扩展——JSX书写。 React/JSX乍看之下，觉得非常啰嗦，但使用JavaScript而不是模板来开发，赋予了开发者许多编程能力。</p><p>Vue鼓励你去使用HTML模板去进行渲染，Vue的模板语法去除了往视图/组件中添加逻辑的诱惑，保持了关注点分离。</p><h3 id="_5-状态管理-vs-对象属性" tabindex="-1">5. 状态管理 vs 对象属性 <a class="header-anchor" href="#_5-状态管理-vs-对象属性" aria-label="Permalink to &quot;5. 状态管理 vs 对象属性&quot;">​</a></h3><p>在React中你需要使用setState()方法去更新状态。</p><p>在Vue中，state对象并不是必须的，数据由data属性在Vue对象中进行管理。</p><p>而在Vue中，则不需要使用如setState()之类的方法去改变它的状态，在Vue对象中，data参数就是应用中数据的保存者。</p><p>对于管理大型应用中的状态这一话题而言，Vue.js的作者尤雨溪曾说过，（Vue的）解决方案适用于小型应用，但对于对于大型应用而言不太适合。</p><p><a href="http://caibaojian.com/vue-vs-react.html" target="_blank" rel="noreferrer">Vue与React两个框架的区别和优势对比</a></p><h2 id="第-9-题-讲讲-redux-的工作机制" tabindex="-1">第 9 题 讲讲 Redux 的工作机制 <a class="header-anchor" href="#第-9-题-讲讲-redux-的工作机制" aria-label="Permalink to &quot;第 9 题 讲讲 Redux 的工作机制&quot;">​</a></h2><h2 id="第-10-题-讲讲-redux-createstore-的实现原理" tabindex="-1">第 10 题 讲讲 Redux createStore 的实现原理 <a class="header-anchor" href="#第-10-题-讲讲-redux-createstore-的实现原理" aria-label="Permalink to &quot;第 10 题 讲讲 Redux createStore 的实现原理&quot;">​</a></h2><p><a href="https://www.jianshu.com/p/670817164b91" target="_blank" rel="noreferrer">createStore 原理及作用</a></p><p><a href="https://segmentfault.com/a/1190000011835213" target="_blank" rel="noreferrer">redux 源码解读－－createStore 源码解析</a></p><h2 id="第-11-题" tabindex="-1">第 11 题 <a class="header-anchor" href="#第-11-题" aria-label="Permalink to &quot;第 11 题&quot;">​</a></h2><p>有一个商品 id 数组 <code>[&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;,&#39;6&#39;,&#39;7&#39;,&#39;8&#39;];</code>，遍历该数组取得每个商品的 id，并且用该 id 去请求商品详情数据 <code>{name:&#39;a&#39;,...}</code>，并把每条详情数据都存到一个新的数组 resultArray 中。</p><p>做法一</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">async</span><span style="color:#E67E80;"> function</span><span style="color:#A7C080;"> getDetailInfo</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> array</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> [</span><span style="color:#DBBC7F;">&quot;1&quot;</span><span style="color:#D3C6AA;">,</span><span style="color:#DBBC7F;"> &quot;2&quot;</span><span style="color:#D3C6AA;">,</span><span style="color:#DBBC7F;"> &quot;3&quot;</span><span style="color:#D3C6AA;">,</span><span style="color:#DBBC7F;"> &quot;4&quot;</span><span style="color:#D3C6AA;">,</span><span style="color:#DBBC7F;"> &quot;5&quot;</span><span style="color:#D3C6AA;">,</span><span style="color:#DBBC7F;"> &quot;6&quot;</span><span style="color:#D3C6AA;">,</span><span style="color:#DBBC7F;"> &quot;7&quot;</span><span style="color:#D3C6AA;">,</span><span style="color:#DBBC7F;"> &quot;8&quot;</span><span style="color:#D3C6AA;">];</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> resultArray</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">  for</span><span style="color:#D3C6AA;"> (</span><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> item</span><span style="color:#E67E80;"> of</span><span style="color:#D3C6AA;"> array)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">    const</span><span style="color:#D3C6AA;"> response</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> await</span><span style="color:#D3C6AA;"> axios</span><span style="color:#859289;">.</span><span style="color:#A7C080;">get</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;.../detail&quot;</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">      params</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span><span style="color:#D3C6AA;"> id</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> item</span><span style="color:#D3C6AA;"> }</span></span>
<span class="line"><span style="color:#D3C6AA;">    });</span></span>
<span class="line"><span style="color:#D3C6AA;">    resultArray</span><span style="color:#859289;">.</span><span style="color:#A7C080;">push</span><span style="color:#D3C6AA;">(response</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">data);</span></span>
<span class="line"><span style="color:#D3C6AA;">    console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;resultArray:&quot;</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> resultArray);</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>做法二</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> getDetailInfo</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 创建一个resolve状态的变量，以便可以直接执行then()</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> sequence</span><span style="color:#E69875;"> =</span><span style="color:#7FBBB3;"> Promise</span><span style="color:#859289;">.</span><span style="color:#A7C080;">resolve</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // array.forEach(function(item) {</span></span>
<span class="line"><span style="color:#E67E80;">  for</span><span style="color:#D3C6AA;"> (</span><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> item</span><span style="color:#E67E80;"> of</span><span style="color:#D3C6AA;"> array)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    function</span><span style="color:#A7C080;"> axioss</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">      return</span><span style="color:#E67E80;"> new</span><span style="color:#7FBBB3;"> Promise</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">(resolve,</span><span style="color:#D3C6AA;"> reject)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">        axios</span></span>
<span class="line"><span style="color:#859289;">          .</span><span style="color:#A7C080;">get</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;.../detail&quot;</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">            params</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span><span style="color:#D3C6AA;"> id</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> item</span><span style="color:#D3C6AA;"> }</span></span>
<span class="line"><span style="color:#D3C6AA;">          })</span></span>
<span class="line"><span style="color:#859289;">          .</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">(response)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">            resultArray</span><span style="color:#859289;">.</span><span style="color:#A7C080;">push</span><span style="color:#D3C6AA;">(response</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">data</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">data);</span></span>
<span class="line"><span style="color:#D3C6AA;">            console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;resultArray:&quot;</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> resultArray);</span></span>
<span class="line"><span style="color:#A7C080;">            resolve</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#D3C6AA;">          });</span></span>
<span class="line"><span style="color:#D3C6AA;">      });</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // 第一次执行了上方声明的resolve状态后，遍历数组中会返回新的resolve状态，把resolve状态再重新赋给sequence，以便下一次Promise的继续执行</span></span>
<span class="line"><span style="color:#D3C6AA;">    sequence</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> sequence</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(axioss);</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // );</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="第-12-题-讲讲-vue-的双向绑定" tabindex="-1">第 12 题 讲讲 Vue 的双向绑定 <a class="header-anchor" href="#第-12-题-讲讲-vue-的双向绑定" aria-label="Permalink to &quot;第 12 题 讲讲 Vue 的双向绑定&quot;">​</a></h2><p>实现简单的双向绑定</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">&lt;</span><span style="color:#E69875;">body</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">  &lt;</span><span style="color:#E69875;">div</span><span style="color:#DBBC7F;"> id</span><span style="color:#A7C080;">=</span><span style="color:#A7C080;">&quot;app&quot;</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;</span><span style="color:#E69875;">input</span><span style="color:#DBBC7F;"> type</span><span style="color:#A7C080;">=</span><span style="color:#A7C080;">&quot;text&quot;</span><span style="color:#DBBC7F;"> id</span><span style="color:#A7C080;">=</span><span style="color:#A7C080;">&quot;txt&quot;</span><span style="color:#A7C080;"> /&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;</span><span style="color:#E69875;">p</span><span style="color:#DBBC7F;"> id</span><span style="color:#A7C080;">=</span><span style="color:#A7C080;">&quot;show&quot;</span><span style="color:#A7C080;">&gt;&lt;/</span><span style="color:#E69875;">p</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">  &lt;/</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">&lt;/</span><span style="color:#E69875;">body</span><span style="color:#A7C080;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> obj </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {};</span></span>
<span class="line"><span style="color:#D3C6AA;">Object</span><span style="color:#859289;">.</span><span style="color:#A7C080;">defineProperty</span><span style="color:#D3C6AA;">(obj, </span><span style="color:#DBBC7F;">&quot;txt&quot;</span><span style="color:#D3C6AA;">, {</span></span>
<span class="line"><span style="color:#A7C080;">  get</span><span style="color:#859289;">:</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> obj;</span></span>
<span class="line"><span style="color:#D3C6AA;">  },</span></span>
<span class="line"><span style="color:#A7C080;">  set</span><span style="color:#859289;">:</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">(newValue)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    document</span><span style="color:#859289;">.</span><span style="color:#A7C080;">getElementById</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;txt&quot;</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">value</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> newValue;</span></span>
<span class="line"><span style="color:#D3C6AA;">    document</span><span style="color:#859289;">.</span><span style="color:#A7C080;">getElementById</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;show&quot;</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">innerHTML</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> newValue;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span>
<span class="line"><span style="color:#D3C6AA;">document</span><span style="color:#859289;">.</span><span style="color:#A7C080;">addEventListener</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;keyup&quot;</span><span style="color:#D3C6AA;">, </span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">(e)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  obj</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">txt</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> e</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">target</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">value;</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>假如要遍历去劫持对象：</p><p>下例中希望是内部变量，所以才弄了newKey，用户通过访问<code>data.a</code>访问，而不是<code>data._a</code>，所以分别对key和newKey设置了不同的enumerable。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> data </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  _a</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 1</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  _b</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 2</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"><span style="color:#D3C6AA;">Object</span><span style="color:#859289;">.</span><span style="color:#A7C080;">keys</span><span style="color:#D3C6AA;">(data)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">forEach</span><span style="color:#D3C6AA;">(key </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;data:&quot;</span><span style="color:#D3C6AA;">, data); </span><span style="color:#859289;font-style:italic;">// {_a: 1, _b: 2}</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;key:&quot;</span><span style="color:#D3C6AA;">, key); </span><span style="color:#859289;font-style:italic;">// _a, _b</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> newKey </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> key</span><span style="color:#859289;">.</span><span style="color:#A7C080;">slice</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;newKey:&quot;</span><span style="color:#D3C6AA;">, newKey); </span><span style="color:#859289;font-style:italic;">// a, b</span></span>
<span class="line"><span style="color:#D3C6AA;">  Object</span><span style="color:#859289;">.</span><span style="color:#A7C080;">defineProperty</span><span style="color:#D3C6AA;">(data, newKey, {</span></span>
<span class="line"><span style="color:#A7C080;">    get</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#D3C6AA;">      console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">\`get: </span><span style="color:#A7C080;">\${</span><span style="color:#D3C6AA;">newKey</span><span style="color:#A7C080;">}</span><span style="color:#DBBC7F;">\`</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#E67E80;">      return</span><span style="color:#D3C6AA;"> data[key];</span></span>
<span class="line"><span style="color:#D3C6AA;">    },</span></span>
<span class="line"><span style="color:#A7C080;">    set</span><span style="color:#D3C6AA;">(newValue) {</span></span>
<span class="line"><span style="color:#D3C6AA;">      console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">\`set: newKey:</span><span style="color:#A7C080;">\${</span><span style="color:#D3C6AA;">newKey</span><span style="color:#A7C080;">}</span><span style="color:#DBBC7F;">, newValue:</span><span style="color:#A7C080;">\${</span><span style="color:#D3C6AA;">newValue</span><span style="color:#A7C080;">}</span><span style="color:#DBBC7F;">\`</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D699B6;">      this</span><span style="color:#D3C6AA;">[key] </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> newValue;</span></span>
<span class="line"><span style="color:#D3C6AA;">    },</span></span>
<span class="line"><span style="color:#D3C6AA;">    enumerable</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> true</span></span>
<span class="line"><span style="color:#D3C6AA;">  });</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 内部的key，不可枚举</span></span>
<span class="line"><span style="color:#D3C6AA;">  Object</span><span style="color:#859289;">.</span><span style="color:#A7C080;">defineProperty</span><span style="color:#D3C6AA;">(data, key, {</span></span>
<span class="line"><span style="color:#D3C6AA;">    enumerable</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> false</span></span>
<span class="line"><span style="color:#D3C6AA;">  });</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h2 id="js-浮点数运算的精度问题" tabindex="-1">JS 浮点数运算的精度问题 <a class="header-anchor" href="#js-浮点数运算的精度问题" aria-label="Permalink to &quot;JS 浮点数运算的精度问题&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">0</span><span style="color:#D3C6AA;">.</span><span style="color:#D699B6;">1</span><span style="color:#E69875;"> +</span><span style="color:#D699B6;"> 0</span><span style="color:#D3C6AA;">.</span><span style="color:#D699B6;">2</span><span style="color:#E69875;"> ==</span><span style="color:#D699B6;"> 0</span><span style="color:#D3C6AA;">.</span><span style="color:#D699B6;">3</span><span style="color:#D3C6AA;">); </span><span style="color:#859289;font-style:italic;">// false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><a href="https://www.html.cn/archives/7340" target="_blank" rel="noreferrer">解答</a></p><h2 id="es6-的-const-并非一定为常量" tabindex="-1">ES6 的 const 并非一定为常量 <a class="header-anchor" href="#es6-的-const-并非一定为常量" aria-label="Permalink to &quot;ES6 的 const 并非一定为常量&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> foo </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {};</span></span>
<span class="line"><span style="color:#D3C6AA;">foo</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">name </span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;"> &quot;a&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(foo</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">name); </span><span style="color:#859289;font-style:italic;">// 打印 &quot;a&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>const 实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。 但<strong>对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，const 只能保证这个指针是固定的（即总是指向另一个固定的地址），至于它指向的数据结构是不是可变的，就完全不能控制了</strong>。因此，将一个对象声明为常量必须非常小心。</p><p><a href="https://blog.fundebug.com/2018/07/25/es6-const/" target="_blank" rel="noreferrer">解答</a></p><h2 id="vue-组件-data-为什么必须是函数" tabindex="-1">Vue 组件 data 为什么必须是函数？ <a class="header-anchor" href="#vue-组件-data-为什么必须是函数" aria-label="Permalink to &quot;Vue 组件 data 为什么必须是函数？&quot;">​</a></h2><p><a href="https://juejin.im/entry/59225ff8a22b9d005885cb15" target="_blank" rel="noreferrer">Vue 组件 data 为什么必须是函数？</a></p><h2 id="用关键字new创建对象都做了什么" tabindex="-1">用关键字new创建对象都做了什么？ <a class="header-anchor" href="#用关键字new创建对象都做了什么" aria-label="Permalink to &quot;用关键字new创建对象都做了什么？&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> Person </span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">name</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> name;</span></span>
<span class="line"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">age</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> age;</span></span>
<span class="line"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">job</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> job;</span></span>
<span class="line"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#A7C080;">sayName </span><span style="color:#E69875;">=</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;"> ()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">        return</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">name;</span></span>
<span class="line"><span style="color:#D3C6AA;">    };</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> person </span><span style="color:#E69875;">=</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> Person</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;tom&quot;</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">21</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&quot;WEB&quot;</span><span style="color:#D3C6AA;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>使用关键字new创建新实例对象经过了以下几步：</p><p>1、创建一个新对象，如：var person = {};</p><p>2、新对象的_proto_属性指向构造函数的原型对象。</p><p>3、将构造函数的作用域赋值给新对象。（也所以this对象指向新对象）</p><p>4、执行构造函数内部的代码，将属性添加给person中的this对象。</p><p>5、返回新对象person。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> person </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {};</span></span>
<span class="line"><span style="color:#D3C6AA;">person</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">__proto__ </span><span style="color:#E69875;">=</span><span style="color:#7FBBB3;"> Person</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">prototype; </span><span style="color:#859289;font-style:italic;">//引用构造函数的原型对象</span></span>
<span class="line"><span style="color:#D3C6AA;">Person</span><span style="color:#859289;">.</span><span style="color:#A7C080;">call</span><span style="color:#D3C6AA;">(person); </span><span style="color:#859289;font-style:italic;">//将构造函数的作用域给person,即：this值指向person</span></span>
<span class="line"><span style="color:#E67E80;">return</span><span style="color:#D3C6AA;"> person;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> newFunc </span><span style="color:#D3C6AA;">(name)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  var</span><span style="color:#D3C6AA;"> o</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> {};</span></span>
<span class="line"><span style="color:#D3C6AA;">  o</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">__proto__</span><span style="color:#E69875;"> =</span><span style="color:#7FBBB3;"> Person</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">prototype;</span><span style="color:#859289;font-style:italic;">//绑定Person的原型</span></span>
<span class="line"><span style="color:#D3C6AA;">  Person</span><span style="color:#859289;">.</span><span style="color:#A7C080;">call</span><span style="color:#D3C6AA;">(o,</span><span style="color:#D3C6AA;"> name);</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> o;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>更抽象通用的写法：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> newFunc </span><span style="color:#D3C6AA;">(constructor){</span></span>
<span class="line"><span style="color:#E69875;">  var</span><span style="color:#D3C6AA;"> o</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> {};</span></span>
<span class="line"><span style="color:#D3C6AA;">  o</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">__proto__</span><span style="color:#E69875;"> =</span><span style="color:#7FBBB3;"> constructor</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">prototype;</span></span>
<span class="line"><span style="color:#D3C6AA;">  constructor</span><span style="color:#859289;">.</span><span style="color:#A7C080;">apply</span><span style="color:#D3C6AA;">(o,</span><span style="color:#7FBBB3;"> Array</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">prototype</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">slice</span><span style="color:#859289;">.</span><span style="color:#A7C080;">call</span><span style="color:#D3C6AA;">(arguments,</span><span style="color:#D699B6;"> 1</span><span style="color:#D3C6AA;">));</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> o;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> person1 </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> newFunc</span><span style="color:#D3C6AA;">(Person, </span><span style="color:#DBBC7F;">&#39;MeloGuo&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">21</span><span style="color:#D3C6AA;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="手写实现bind" tabindex="-1">手写实现bind <a class="header-anchor" href="#手写实现bind" aria-label="Permalink to &quot;手写实现bind&quot;">​</a></h2><p>bind的作用与call和apply相同，区别是call和apply是立即调用函数，而bind是返回了一个函数，需要调用的时候再执行。 一个简单的bind函数实现如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#7FBBB3;">Function</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">prototype</span><span style="color:#859289;">.</span><span style="color:#A7C080;">bind</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">(ctx)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">    var</span><span style="color:#D3C6AA;"> fn</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> this</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">        fn</span><span style="color:#859289;">.</span><span style="color:#A7C080;">apply</span><span style="color:#D3C6AA;">(ctx,</span><span style="color:#D3C6AA;"> arguments);</span></span>
<span class="line"><span style="color:#D3C6AA;">    };</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>第二种</p><p>不传入第一个参数，那么默认为 window。 改变了 this 指向，让新的对象可以执行该函数。那么思路是否可以变成给新的对象添加一个函数，然后在执行完以后删除？</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#7FBBB3;">Function</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">prototype</span><span style="color:#859289;">.</span><span style="color:#A7C080;">myBind</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;"> (context)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  if</span><span style="color:#D3C6AA;"> (</span><span style="color:#E67E80;">typeof</span><span style="color:#D699B6;"> this</span><span style="color:#E69875;"> !==</span><span style="color:#DBBC7F;"> &#39;function&#39;</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    throw</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> TypeError</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;Error&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#E69875;">  var</span><span style="color:#D3C6AA;"> _this</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> this</span></span>
<span class="line"><span style="color:#E69875;">  var</span><span style="color:#D3C6AA;"> args</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> [</span><span style="color:#E69875;">...</span><span style="color:#D3C6AA;">arguments]</span><span style="color:#859289;">.</span><span style="color:#A7C080;">slice</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 返回一个函数</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#E67E80;"> function</span><span style="color:#A7C080;"> F</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // 因为返回了一个函数，我们可以 new F()，所以需要判断</span></span>
<span class="line"><span style="color:#E67E80;">    if</span><span style="color:#D3C6AA;"> (</span><span style="color:#D699B6;">this</span><span style="color:#E67E80;"> instanceof</span><span style="color:#7FBBB3;"> F</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">      return</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> _this</span><span style="color:#D3C6AA;">(</span><span style="color:#E69875;">...</span><span style="color:#D3C6AA;">args,</span><span style="color:#E69875;"> ...</span><span style="color:#D3C6AA;">arguments)</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> _this</span><span style="color:#859289;">.</span><span style="color:#A7C080;">apply</span><span style="color:#D3C6AA;">(context,</span><span style="color:#D3C6AA;"> args</span><span style="color:#859289;">.</span><span style="color:#A7C080;">concat</span><span style="color:#D3C6AA;">(</span><span style="color:#E69875;">...</span><span style="color:#D3C6AA;">arguments))</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="第-18-题-react-中-setstate-什么时候是同步的-什么时候是异步的" tabindex="-1">第 18 题：React 中 setState 什么时候是同步的，什么时候是异步的？ <a class="header-anchor" href="#第-18-题-react-中-setstate-什么时候是同步的-什么时候是异步的" aria-label="Permalink to &quot;第 18 题：React 中 setState 什么时候是同步的，什么时候是异步的？&quot;">​</a></h2><p>在 React 中，如果是由 React 引发的事件处理（比如通过 onClick 引发的事件处理），调用 setState 不会同步更新 this.state，除此之外的 setState 调用会同步执行 this.state。所谓“除此之外”，指的是绕过 React 通过 addEventListener 直接添加的事件处理函数，还有通过 setTimeout/setInterval 产生的异步调用。</p><p><strong>原因：</strong> 在 React 的 setState 函数实现中，会根据一个变量 isBatchingUpdates 判断是直接更新 this.state 还是放到队列中回头再说，而 isBatchingUpdates 默认是 false，也就表示 setState 会同步更新 this.state，但是，有一个函数 batchedUpdates，这个函数会把 isBatchingUpdates 修改为t rue，而当 React 在调用事件处理函数之前就会调用这个 batchedUpdates，造成的后果就是由 React 控制的事件处理过程 setState 不会同步更新 this.state。</p><p><a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/17" target="_blank" rel="noreferrer">更多解析</a></p><h2 id="第-19-题-react-setstate-笔试题-下面的代码输出什么" tabindex="-1">第 19 题：React setState 笔试题，下面的代码输出什么？ <a class="header-anchor" href="#第-19-题-react-setstate-笔试题-下面的代码输出什么" aria-label="Permalink to &quot;第 19 题：React setState 笔试题，下面的代码输出什么？&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">class</span><span style="color:#7FBBB3;"> Example</span><span style="color:#E69875;"> extends</span><span style="color:#83C092;"> React</span><span style="color:#859289;">.</span><span style="color:#7FBBB3;">Component</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  constructor</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#D699B6;">    super</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">state </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">      val</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 0</span></span>
<span class="line"><span style="color:#D3C6AA;">    };</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#A7C080;">  componentDidMount</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#A7C080;">setState</span><span style="color:#D3C6AA;">({val</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">state</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">val </span><span style="color:#E69875;">+</span><span style="color:#D699B6;"> 1</span><span style="color:#D3C6AA;">});</span></span>
<span class="line"><span style="color:#D3C6AA;">    console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">state</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">val);    </span><span style="color:#859289;font-style:italic;">// 第 1 次 log</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#A7C080;">setState</span><span style="color:#D3C6AA;">({val</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">state</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">val </span><span style="color:#E69875;">+</span><span style="color:#D699B6;"> 1</span><span style="color:#D3C6AA;">});</span></span>
<span class="line"><span style="color:#D3C6AA;">    console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">state</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">val);    </span><span style="color:#859289;font-style:italic;">// 第 2 次 log</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">    setTimeout</span><span style="color:#D3C6AA;">(() </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D699B6;">      this</span><span style="color:#859289;">.</span><span style="color:#A7C080;">setState</span><span style="color:#D3C6AA;">({val</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">state</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">val </span><span style="color:#E69875;">+</span><span style="color:#D699B6;"> 1</span><span style="color:#D3C6AA;">});</span></span>
<span class="line"><span style="color:#D3C6AA;">      console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">state</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">val);  </span><span style="color:#859289;font-style:italic;">// 第 3 次 log</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D699B6;">      this</span><span style="color:#859289;">.</span><span style="color:#A7C080;">setState</span><span style="color:#D3C6AA;">({val</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">state</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">val </span><span style="color:#E69875;">+</span><span style="color:#D699B6;"> 1</span><span style="color:#D3C6AA;">});</span></span>
<span class="line"><span style="color:#D3C6AA;">      console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">state</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">val);  </span><span style="color:#859289;font-style:italic;">// 第 4 次 log</span></span>
<span class="line"><span style="color:#D3C6AA;">    }, </span><span style="color:#D699B6;">0</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#A7C080;">  render</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D699B6;"> null</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>解析：</p><p>1、第一次和第二次都是在 react 自身生命周期内，触发时 isBatchingUpdates 为 true，所以并不会直接执行更新 state，而是加入了 dirtyComponents，所以打印时获取的都是更新前的状态 0。</p><p>2、两次 setState 时，获取到 this.state.val 都是 0，所以执行时都是将 0 设置成 1，在 react 内部会被合并掉，只执行一次。设置完成后 state.val 值为 1。</p><p>3、setTimeout 中的代码，触发时 isBatchingUpdates 为 false，所以能够直接进行更新，所以连着输出 2，3。</p><p>输出： 0 0 2 3</p><p><a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/18" target="_blank" rel="noreferrer">更多解析</a></p>`,114)]))}const C=n(e,[["render",o]]);export{b as __pageData,C as default};
