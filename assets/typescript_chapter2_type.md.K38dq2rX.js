import{_ as n,c as a,o as l,ag as e}from"./chunks/framework.D-6U7MZ9.js";const A=JSON.parse('{"title":"基础类型","description":"","frontmatter":{},"headers":[],"relativePath":"typescript/chapter2/type.md","filePath":"typescript/chapter2/type.md","lastUpdated":1560508681000}'),p={name:"typescript/chapter2/type.md"};function o(r,s,c,t,i,y){return l(),a("div",null,s[0]||(s[0]=[e(`<h1 id="基础类型" tabindex="-1">基础类型 <a class="header-anchor" href="#基础类型" aria-label="Permalink to &quot;基础类型&quot;">​</a></h1><p>TypeScript 支持与 JavaScript 几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用。</p><h2 id="布尔值" tabindex="-1">布尔值 <a class="header-anchor" href="#布尔值" aria-label="Permalink to &quot;布尔值&quot;">​</a></h2><p>最基本的数据类型就是简单的 true/false 值，在JavaScript 和 TypeScript 里叫做 <code>boolean</code>（其它语言中也一样）。</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> isDone</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> boolean</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="数字" tabindex="-1">数字 <a class="header-anchor" href="#数字" aria-label="Permalink to &quot;数字&quot;">​</a></h2><p>和 JavaScript 一样，TypeScript 里的所有数字都是浮点数。 这些浮点数的类型是 number。 除了支持十进制和十六进制字面量，TypeScript 还支持 ECMAScript 2015中引入的二进制和八进制字面量。</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> decLiteral</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> 20</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> hexLiteral</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> 0x14</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> binaryLiteral</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> 0b10100</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> octalLiteral</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> 0o24</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="字符串" tabindex="-1">字符串 <a class="header-anchor" href="#字符串" aria-label="Permalink to &quot;字符串&quot;">​</a></h2><p>JavaScript 程序的另一项基本操作是处理网页或服务器端的文本数据。 像其它语言里一样，我们使用 <code>string</code> 表示文本数据类型。 和 JavaScript 一样，可以使用双引号（<code>&quot;</code>）或单引号（<code>&#39;</code>）表示字符串。</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> name</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#E69875;"> =</span><span style="color:#DBBC7F;"> &#39;bob&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">name </span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;"> &#39;smith&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>你还可以使用模版字符串，它可以定义多行文本和内嵌表达式。 这种字符串是被反引号包围（ <code>\`</code>），并且以 <code>\${ expr }</code> 这种形式嵌入表达式</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> name</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#E69875;"> =</span><span style="color:#DBBC7F;"> \`Yee\`</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> age</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> 37</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> sentence</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#E69875;"> =</span><span style="color:#DBBC7F;"> \`Hello, my name is </span><span style="color:#A7C080;">\${</span><span style="color:#D3C6AA;"> name</span><span style="color:#A7C080;"> }</span><span style="color:#DBBC7F;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBBC7F;">I&#39;ll be </span><span style="color:#A7C080;">\${</span><span style="color:#D3C6AA;"> age</span><span style="color:#E69875;"> +</span><span style="color:#D699B6;"> 1</span><span style="color:#A7C080;"> }</span><span style="color:#DBBC7F;"> years old next month.\`</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这与下面定义 <code>sentence</code> 的方式效果相同：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> sentence</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#E69875;"> =</span><span style="color:#DBBC7F;"> &#39;Hello, my name is &#39;</span><span style="color:#E69875;"> +</span><span style="color:#D3C6AA;"> name </span><span style="color:#E69875;">+</span><span style="color:#DBBC7F;"> &#39;.</span><span style="color:#A7C080;">\\n\\n</span><span style="color:#DBBC7F;">&#39;</span><span style="color:#E69875;"> +</span></span>
<span class="line"><span style="color:#DBBC7F;">    &#39;I</span><span style="color:#A7C080;">\\&#39;</span><span style="color:#DBBC7F;">ll be &#39;</span><span style="color:#E69875;"> +</span><span style="color:#D3C6AA;"> (age </span><span style="color:#E69875;">+</span><span style="color:#D699B6;"> 1</span><span style="color:#D3C6AA;">) </span><span style="color:#E69875;">+</span><span style="color:#DBBC7F;"> &#39; years old next month.&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h2><p>TypeScript 像 JavaScript 一样可以操作数组元素。 有两种方式可以定义数组。 第一种，可以在元素类型后面接上 <code>[]</code>，表示由此类型元素组成的一个数组：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> list</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">[] </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">2</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">3</span><span style="color:#D3C6AA;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>第二种方式是使用数组泛型，<code>Array&lt;元素类型&gt;</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> list</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Array</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#7FBBB3;">number</span><span style="color:#D3C6AA;">&gt; </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">2</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">3</span><span style="color:#D3C6AA;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="元组-tuple" tabindex="-1">元组 Tuple <a class="header-anchor" href="#元组-tuple" aria-label="Permalink to &quot;元组 Tuple&quot;">​</a></h2><p>元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 比如，你可以定义一对值分别为 <code>string</code> 和 <code>number</code> 类型的元组。</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> x</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span><span style="color:#7FBBB3;">string</span><span style="color:#D3C6AA;">, </span><span style="color:#7FBBB3;">number</span><span style="color:#D3C6AA;">]</span></span>
<span class="line"><span style="color:#D3C6AA;">x </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [</span><span style="color:#DBBC7F;">&#39;hello&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">10</span><span style="color:#D3C6AA;">] </span><span style="color:#859289;font-style:italic;">// OK</span></span>
<span class="line"><span style="color:#D3C6AA;">x </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [</span><span style="color:#D699B6;">10</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;hello&#39;</span><span style="color:#D3C6AA;">] </span><span style="color:#859289;font-style:italic;">// Error</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>当访问一个已知索引的元素，会得到正确的类型：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(x[</span><span style="color:#D699B6;">0</span><span style="color:#D3C6AA;">]</span><span style="color:#859289;">.</span><span style="color:#A7C080;">substr</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">)) </span><span style="color:#859289;font-style:italic;">// OK</span></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(x[</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">]</span><span style="color:#859289;">.</span><span style="color:#A7C080;">substr</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">)) </span><span style="color:#859289;font-style:italic;">// Error, &#39;number&#39; 不存在 &#39;substr&#39; 方法</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>当访问一个越界的元素，会使用联合类型替代：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">x[</span><span style="color:#D699B6;">3</span><span style="color:#D3C6AA;">] </span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;"> &#39;world&#39;</span><span style="color:#859289;font-style:italic;"> // OK, 字符串可以赋值给(string | number)类型</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(x[</span><span style="color:#D699B6;">5</span><span style="color:#D3C6AA;">]</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toString</span><span style="color:#D3C6AA;">()) </span><span style="color:#859289;font-style:italic;">// OK, &#39;string&#39; 和 &#39;number&#39; 都有 toString</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">x[</span><span style="color:#D699B6;">6</span><span style="color:#D3C6AA;">] </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> true</span><span style="color:#859289;font-style:italic;"> // Error, 布尔不是(string | number)类型</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>联合类型是高级主题，我们会在以后的章节里讨论它。</p><p><strong>注意</strong>：自从 TyeScript 3.1 版本之后，访问越界元素会报错，我们不应该再使用该特性。</p><h2 id="枚举" tabindex="-1">枚举 <a class="header-anchor" href="#枚举" aria-label="Permalink to &quot;枚举&quot;">​</a></h2><p><code>enum</code> 类型是对 JavaScript 标准数据类型的一个补充。 像 C# 等其它语言一样，使用枚举类型可以为一组数值赋予友好的名字。</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">enum</span><span style="color:#83C092;"> Color</span><span style="color:#D3C6AA;"> {Red, Green, Blue}</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> c</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Color</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> Color</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">Green</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>默认情况下，从 <code>0</code> 开始为元素编号。 你也可以手动的指定成员的数值。 例如，我们将上面的例子改成从 <code>1</code> 开始编号：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">enum</span><span style="color:#83C092;"> Color</span><span style="color:#D3C6AA;"> {Red </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 1</span><span style="color:#D3C6AA;">, Green, Blue}</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> c</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Color</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> Color</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">Green</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>或者，全部都采用手动赋值：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">enum</span><span style="color:#83C092;"> Color</span><span style="color:#D3C6AA;"> {Red </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 1</span><span style="color:#D3C6AA;">, Green </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 2</span><span style="color:#D3C6AA;">, Blue </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 4</span><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> c</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Color</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> Color</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">Green</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>枚举类型提供的一个便利是你可以由枚举的值得到它的名字。 例如，我们知道数值为 2，但是不确定它映射到 Color 里的哪个名字，我们可以查找相应的名字：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">enum</span><span style="color:#83C092;"> Color</span><span style="color:#D3C6AA;"> {Red </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 1</span><span style="color:#D3C6AA;">, Green, Blue}</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> colorName</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> Color[</span><span style="color:#D699B6;">2</span><span style="color:#D3C6AA;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(colorName)  </span><span style="color:#859289;font-style:italic;">// 显示&#39;Green&#39;因为上面代码里它的值是2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>源代码：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">enum</span><span style="color:#83C092;"> Color</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  Red </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 1</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  Green </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 2</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  Blue </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 5</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> colorName</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> Color[</span><span style="color:#D699B6;">2</span><span style="color:#D3C6AA;">];</span></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(colorName);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>编译后：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> Color;</span></span>
<span class="line"><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">(Color)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  Color[(Color[</span><span style="color:#DBBC7F;">&quot;Red&quot;</span><span style="color:#D3C6AA;">]</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> 1</span><span style="color:#D3C6AA;">)]</span><span style="color:#E69875;"> =</span><span style="color:#DBBC7F;"> &quot;Red&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">  Color[(Color[</span><span style="color:#DBBC7F;">&quot;Green&quot;</span><span style="color:#D3C6AA;">]</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> 2</span><span style="color:#D3C6AA;">)]</span><span style="color:#E69875;"> =</span><span style="color:#DBBC7F;"> &quot;Green&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">  Color[(Color[</span><span style="color:#DBBC7F;">&quot;Blue&quot;</span><span style="color:#D3C6AA;">]</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> 5</span><span style="color:#D3C6AA;">)]</span><span style="color:#E69875;"> =</span><span style="color:#DBBC7F;"> &quot;Blue&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">})(Color </span><span style="color:#E69875;">||</span><span style="color:#D3C6AA;"> (Color </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {}));</span></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> colorName </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> Color[</span><span style="color:#D699B6;">2</span><span style="color:#D3C6AA;">];</span></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(colorName);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="any" tabindex="-1">any <a class="header-anchor" href="#any" aria-label="Permalink to &quot;any&quot;">​</a></h2><p>有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。 这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。 这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。 那么我们可以使用 <code>any</code> 类型来标记这些变量：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> notSure</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> 4</span></span>
<span class="line"><span style="color:#D3C6AA;">notSure </span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;"> &#39;maybe a string instead&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">notSure </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> false</span><span style="color:#859289;font-style:italic;"> // 也可以是个 boolean</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在对现有代码进行改写的时候，<code>any</code> 类型是十分有用的，它允许你在编译时可选择地包含或移除类型检查。并且当你只知道一部分数据的类型时，<code>any</code> 类型也是有用的。 比如，你有一个数组，它包含了不同的类型的数据：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> list</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">[] </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">true</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;free&#39;</span><span style="color:#D3C6AA;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">list[</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">] </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 100</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="void" tabindex="-1">void <a class="header-anchor" href="#void" aria-label="Permalink to &quot;void&quot;">​</a></h2><p>某种程度上来说，<code>void</code> 类型像是与 <code>any</code> 类型相反，它表示没有任何类型。 当一个函数没有返回值时，你通常会见到其返回值类型是 <code>void</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> warnUser</span><span style="color:#D3C6AA;">()</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> void</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;This is my warning message&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>声明一个 <code>void</code> 类型的变量没有什么大用，因为你只能为它赋予 <code>undefined</code> 和 <code>null</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> unusable</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> void</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> undefined</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="null-和-undefined" tabindex="-1">null 和 undefined <a class="header-anchor" href="#null-和-undefined" aria-label="Permalink to &quot;null 和 undefined&quot;">​</a></h2><p>TypeScript 里，<code>undefined</code> 和 <code>null</code> 两者各自有自己的类型分别叫做 <code>undefined</code> 和 <code>null</code>。 和 <code>void</code> 相似，它们的本身的类型用处不是很大：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> u</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> undefined</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> undefined</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> n</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> null</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> null</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>默认情况下 <code>null</code> 和 <code>undefined</code> 是所有类型的子类型。 就是说你可以把 <code>null</code> 和 <code>undefined</code> 赋值给 <code>number</code> 类型的变量。</p><p>然而，当你指定了 <code>--strictNullChecks</code> 标记，<code>null</code> 和 <code>undefined</code> 只能赋值给 <code>void</code> 和它们各自，这能避免 很多常见的问题。 也许在某处你想传入一个 <code>string</code> 或 <code>null</code> 或 <code>undefined</code>，你可以使用联合类型 <code>string | null | undefined</code>。 再次说明，稍后我们会介绍联合类型。</p><h2 id="never" tabindex="-1">never <a class="header-anchor" href="#never" aria-label="Permalink to &quot;never&quot;">​</a></h2><p><code>never</code> 类型表示的是那些永不存在的值的类型。 例如， <code>never</code> 类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型； 变量也可能是 <code>never</code> 类型，当它们被永不为真的类型保护所约束时。</p><p><code>never</code> 类型是任何类型的子类型，也可以赋值给任何类型；然而，没有类型是 <code>never</code> 的子类型或可以赋值给<code>never</code> 类型（除了 <code>never</code> 本身之外）。 即使 <code>any</code> 也不可以赋值给 <code>never</code>。</p><p>下面是一些返回 <code>never</code> 类型的函数：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// 返回never的函数必须存在无法达到的终点</span></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> error</span><span style="color:#D3C6AA;">(message</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> never</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  throw</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> Error</span><span style="color:#D3C6AA;">(message)</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 推断的返回值类型为never</span></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> fail</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#A7C080;"> error</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;Something failed&quot;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 返回never的函数必须存在无法达到的终点</span></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> infiniteLoop</span><span style="color:#D3C6AA;">()</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> never</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  while</span><span style="color:#D3C6AA;"> (</span><span style="color:#D699B6;">true</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="object" tabindex="-1">object <a class="header-anchor" href="#object" aria-label="Permalink to &quot;object&quot;">​</a></h2><p><code>object</code> 表示非原始类型，也就是除 <code>number</code>，<code>string</code>，<code>boolean</code>，<code>symbol</code>，<code>null</code>或<code>undefined</code> 之外的类型。</p><p>使用 <code>object</code> 类型，就可以更好的表示像 <code>Object.create</code> 这样的 <code>API</code>。例如：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">declare</span><span style="color:#E67E80;"> function</span><span style="color:#A7C080;"> create</span><span style="color:#D3C6AA;">(o</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> object</span><span style="color:#E69875;"> |</span><span style="color:#7FBBB3;"> null</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> void</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">create</span><span style="color:#D3C6AA;">({</span><span style="color:#D3C6AA;"> prop:</span><span style="color:#D699B6;"> 0</span><span style="color:#D3C6AA;"> })</span><span style="color:#859289;font-style:italic;"> // OK</span></span>
<span class="line"><span style="color:#A7C080;">create</span><span style="color:#D3C6AA;">(null)</span><span style="color:#859289;font-style:italic;"> // OK</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">create</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">42</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;font-style:italic;"> // Error</span></span>
<span class="line"><span style="color:#A7C080;">create</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;string&#39;</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;font-style:italic;"> // Error</span></span>
<span class="line"><span style="color:#A7C080;">create</span><span style="color:#D3C6AA;">(false)</span><span style="color:#859289;font-style:italic;"> // Error</span></span>
<span class="line"><span style="color:#A7C080;">create</span><span style="color:#D3C6AA;">(undefined)</span><span style="color:#859289;font-style:italic;"> // Error</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="类型断言" tabindex="-1">类型断言 <a class="header-anchor" href="#类型断言" aria-label="Permalink to &quot;类型断言&quot;">​</a></h2><p>有时候你会遇到这样的情况，你会比 TypeScript 更了解某个值的详细信息。 通常这会发生在你清楚地知道一个实体具有比它现有类型更确切的类型。</p><p>通过类型断言这种方式可以告诉编译器，“相信我，我知道自己在干什么”。 类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。 它没有运行时的影响，只是在编译阶段起作用。 TypeScript 会假设你已经进行了必须的检查。</p><p>类型断言有两种形式。 其一是“尖括号”语法：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> someValue</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#E69875;"> =</span><span style="color:#DBBC7F;"> &#39;this is a string&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 把someValue强制转换为string类型</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> strLength</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> (&lt;</span><span style="color:#7FBBB3;">string</span><span style="color:#D3C6AA;">&gt;someValue)</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">length</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>另一个为 <code>as</code> 语法：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> someValue</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#E69875;"> =</span><span style="color:#DBBC7F;"> &#39;this is a string&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> strLength</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> (someValue </span><span style="color:#E67E80;">as</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">length</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>两种形式是等价的。 至于使用哪个大多数情况下是凭个人喜好；然而，当你在 TypeScript 里使用 JSX 时，只有 <code>as</code> 语法断言是被允许的。</p>`,74)]))}const u=n(p,[["render",o]]);export{A as __pageData,u as default};
