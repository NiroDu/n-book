import{_ as a,c as n,o as p,ag as l}from"./chunks/framework.D-6U7MZ9.js";const d=JSON.parse('{"title":"HTTP 授权","description":"","frontmatter":{},"headers":[],"relativePath":"typescript/chapter10/auth.md","filePath":"typescript/chapter10/auth.md","lastUpdated":1562148797000}'),e={name:"typescript/chapter10/auth.md"};function o(r,s,c,t,i,y){return p(),n("div",null,s[0]||(s[0]=[l(`<h1 id="http-授权" tabindex="-1">HTTP 授权 <a class="header-anchor" href="#http-授权" aria-label="Permalink to &quot;HTTP 授权&quot;">​</a></h1><h2 id="需求分析" tabindex="-1">需求分析 <a class="header-anchor" href="#需求分析" aria-label="Permalink to &quot;需求分析&quot;">​</a></h2><p>HTTP 协议中的 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization" target="_blank" rel="noreferrer">Authorization</a> 请求 header 会包含服务器用于验证用户代理身份的凭证，通常会在服务器返回 401 Unauthorized 状态码以及 WWW-Authenticate 消息头之后在后续请求中发送此消息头。</p><p>axios 库也允许你在请求配置中配置 <code>auth</code> 属性，<code>auth</code> 是一个对象结构，包含 <code>username</code> 和 <code>password</code> 2 个属性。一旦用户在请求的时候配置这俩属性，我们就会自动往 HTTP 的 请求 header 中添加 <code>Authorization</code> 属性，它的值为 <code>Basic 加密串</code>。 这里的加密串是 <code>username:password</code> base64 加密后的结果。</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">axios</span><span style="color:#859289;">.</span><span style="color:#A7C080;">post</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/more/post&#39;</span><span style="color:#D3C6AA;">, {</span></span>
<span class="line"><span style="color:#D3C6AA;">  a</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 1</span></span>
<span class="line"><span style="color:#D3C6AA;">}, {</span></span>
<span class="line"><span style="color:#D3C6AA;">  auth</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    username</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;Yee&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">    password</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;123456&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(res </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(res)</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="代码实现" tabindex="-1">代码实现 <a class="header-anchor" href="#代码实现" aria-label="Permalink to &quot;代码实现&quot;">​</a></h2><p>首先修改一下类型定义。</p><p><code>types/index.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> interface</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#D3C6AA;">  auth</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosBasicCredentials</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> interface</span><span style="color:#83C092;"> AxiosBasicCredentials</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  username</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span></span>
<span class="line"><span style="color:#D3C6AA;">  password</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>接着修改合并规则，因为 auth 也是一个对象格式，所以它的合并规则是 <code>deepMergeStrat</code>。</p><p><code>core/mergeConfig.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> stratKeysDeepMerge </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [</span><span style="color:#DBBC7F;">&#39;headers&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;auth&#39;</span><span style="color:#D3C6AA;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后修改发送请求前的逻辑。</p><p><code>core/xhr.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  /*...*/</span></span>
<span class="line"><span style="color:#D3C6AA;">  auth</span></span>
<span class="line"><span style="color:#D3C6AA;">} </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> config</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">if</span><span style="color:#D3C6AA;"> (auth) {</span></span>
<span class="line"><span style="color:#D3C6AA;">  headers[</span><span style="color:#DBBC7F;">&#39;Authorization&#39;</span><span style="color:#D3C6AA;">] </span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;"> &#39;Basic &#39;</span><span style="color:#E69875;"> +</span><span style="color:#A7C080;"> btoa</span><span style="color:#D3C6AA;">(auth</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">username </span><span style="color:#E69875;">+</span><span style="color:#DBBC7F;"> &#39;:&#39;</span><span style="color:#E69875;"> +</span><span style="color:#D3C6AA;"> auth</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">password)</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="demo-编写" tabindex="-1">demo 编写 <a class="header-anchor" href="#demo-编写" aria-label="Permalink to &quot;demo 编写&quot;">​</a></h2><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">axios</span><span style="color:#859289;">.</span><span style="color:#A7C080;">post</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/more/post&#39;</span><span style="color:#D3C6AA;">, {</span></span>
<span class="line"><span style="color:#D3C6AA;">  a</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 1</span></span>
<span class="line"><span style="color:#D3C6AA;">}, {</span></span>
<span class="line"><span style="color:#D3C6AA;">  auth</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    username</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;Yee&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">    password</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;123456&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(res </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(res)</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>另外，我们在 <code>server.js</code> 中对于这个路由接口写了一段小逻辑：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">router</span><span style="color:#859289;">.</span><span style="color:#A7C080;">post</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/more/post&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">(req,</span><span style="color:#D3C6AA;"> res)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> auth</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> req</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">headers</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">authorization</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> [type,</span><span style="color:#D3C6AA;"> credentials]</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> auth</span><span style="color:#859289;">.</span><span style="color:#A7C080;">split</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39; &#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">atob</span><span style="color:#D3C6AA;">(credentials))</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> [username,</span><span style="color:#D3C6AA;"> password]</span><span style="color:#E69875;"> =</span><span style="color:#A7C080;"> atob</span><span style="color:#D3C6AA;">(credentials)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">split</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;:&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#E67E80;">  if</span><span style="color:#D3C6AA;"> (type</span><span style="color:#E69875;"> ===</span><span style="color:#DBBC7F;"> &#39;Basic&#39;</span><span style="color:#E69875;"> &amp;&amp;</span><span style="color:#D3C6AA;"> username</span><span style="color:#E69875;"> ===</span><span style="color:#DBBC7F;"> &#39;Yee&#39;</span><span style="color:#E69875;"> &amp;&amp;</span><span style="color:#D3C6AA;"> password</span><span style="color:#E69875;"> ===</span><span style="color:#DBBC7F;"> &#39;123456&#39;</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    res</span><span style="color:#859289;">.</span><span style="color:#A7C080;">json</span><span style="color:#D3C6AA;">(req</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">body)</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span><span style="color:#E67E80;"> else</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    res</span><span style="color:#859289;">.</span><span style="color:#A7C080;">end</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;UnAuthorization&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>注意，这里我们需要安装第三方库 <code>atob</code> 实现 base64 串的解码。</p><p>至此，<code>ts-axios</code> 支持了 HTTP 授权功能，用户可以通过配置 auth 对象实现自动在请求 header 中添加 <code>Authorization</code> 属性。下一节课我们来实现自定义合法状态码功能。</p>`,21)]))}const C=a(e,[["render",o]]);export{d as __pageData,C as default};
