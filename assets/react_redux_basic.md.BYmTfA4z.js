import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.D-6U7MZ9.js";const e="/n-book/assets/redux_work_flow_1.D65WjwfT.png",o="/n-book/assets/redux_work_flow_2.DVP1nEbV.png",t="/n-book/assets/redux_work_flow_3.B44_8n8f.png",r="/n-book/assets/redux_dev_tool.CAw_jEe0.png",c="/n-book/assets/redux_work_flow_4.tjSucEcu.png",m=JSON.parse('{"title":"Redux 基础部分","description":"","frontmatter":{},"headers":[],"relativePath":"react/redux_basic.md","filePath":"react/redux_basic.md","lastUpdated":1552552413000}'),i={name:"react/redux_basic.md"};function y(A,s,u,d,b,C){return l(),a("div",null,s[0]||(s[0]=[p('<h1 id="redux-基础部分" tabindex="-1">Redux 基础部分 <a class="header-anchor" href="#redux-基础部分" aria-label="Permalink to &quot;Redux 基础部分&quot;">​</a></h1><p><img src="'+e+'" alt="redux_work_flow_1"><img src="'+o+'" alt="redux_work_flow_2"> Redux 是 Flux 框架的改良，新引入了 Reducer 这个概念。</p><h2 id="redux-三大原则" tabindex="-1">Redux 三大原则 <a class="header-anchor" href="#redux-三大原则" aria-label="Permalink to &quot;Redux 三大原则&quot;">​</a></h2><p><a href="https://redux.js.org/introduction/three-principles" target="_blank" rel="noreferrer">three-principles</a></p><ol><li><p>Single source of truth The state of your whole application is stored in an object tree within a single store.</p></li><li><p>State is read-only The only way to change the state is to emit an action, an object describing what happened.</p></li><li><p>Changes are made with pure functions To specify how the state tree is transformed by actions, you write pure reducers.</p></li></ol><h2 id="redux-工作流程" tabindex="-1">Redux 工作流程 <a class="header-anchor" href="#redux-工作流程" aria-label="Permalink to &quot;Redux 工作流程&quot;">​</a></h2><p><img src="'+t+`" alt="redux_work_flow_3"> 举个例子：</p><p>Store 是图书管理员</p><p>Reducers 是记录本（记录着所有图书信息和所有图书的借阅记录）</p><p>Action 是行为（借书，还书，改变内容）</p><p>Components 读者</p><h2 id="创建-store" tabindex="-1">创建 Store <a class="header-anchor" href="#创建-store" aria-label="Permalink to &quot;创建 Store&quot;">​</a></h2><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// store/reducer.js</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> defaultState </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  inputValue</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;123&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  list</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">2</span><span style="color:#D3C6AA;">]</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 返回一个函数，state指的是整个存储仓里的信息。例如整个图书馆的信息</span></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E67E80;"> default</span><span style="color:#D3C6AA;"> (state </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> defaultState, action) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> state;</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// store/index.js</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { createStore } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;redux&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> reducer </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;./reducer&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 把 reducer 传给 store，就例如把记录本给管理员使其方便进行操作。</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> store </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> createStore</span><span style="color:#D3C6AA;">(reducer);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E67E80;"> default</span><span style="color:#D3C6AA;"> store;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>this.state = store.getState(); 就可以把 store 里的值放到 this.state 里去，并在下方使用：</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">class</span><span style="color:#7FBBB3;"> TodoList</span><span style="color:#E69875;"> extends</span><span style="color:#7FBBB3;"> Component</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  constructor</span><span style="color:#D3C6AA;">(props) {</span></span>
<span class="line"><span style="color:#D699B6;">    super</span><span style="color:#D3C6AA;">(props);</span></span>
<span class="line highlighted"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">state </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> store</span><span style="color:#859289;">.</span><span style="color:#A7C080;">getState</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  render</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> (</span></span>
<span class="line"><span style="color:#A7C080;">      &lt;</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">        &lt;</span><span style="color:#7FBBB3;">Input</span><span style="color:#A7C080;"> value</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">state</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">inputValue</span><span style="color:#A7C080;">}</span><span style="color:#A7C080;"> /&gt;</span></span>
<span class="line highlighted"><span style="color:#A7C080;">        &lt;</span><span style="color:#7FBBB3;">List</span><span style="color:#A7C080;"> dataSource</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">state</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">list</span><span style="color:#A7C080;">}</span><span style="color:#A7C080;"> /&gt;</span></span>
<span class="line"><span style="color:#A7C080;">      &lt;/</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">    );</span></span>
<span class="line highlighted"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="redux-devtool-基本使用" tabindex="-1">Redux DevTool 基本使用 <a class="header-anchor" href="#redux-devtool-基本使用" aria-label="Permalink to &quot;Redux DevTool 基本使用&quot;">​</a></h2><p>官网用法：<a href="https://github.com/zalmoxisus/redux-devtools-extension#usage" target="_blank" rel="noreferrer">https://github.com/zalmoxisus/redux-devtools-extension#usage</a></p><p><img src="`+r+`" alt="redux_dev_tool"></p><p>在 createStore 函数中把以上参数带过去工具才能正常运行。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> store </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> createStore</span><span style="color:#D3C6AA;">(</span></span>
<span class="line"><span style="color:#D3C6AA;">  reducer,</span></span>
<span class="line"><span style="color:#D3C6AA;">  window</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">__REDUX_DEVTOOLS_EXTENSION__ </span><span style="color:#E69875;">&amp;&amp;</span><span style="color:#D3C6AA;"> window</span><span style="color:#859289;">.</span><span style="color:#A7C080;">__REDUX_DEVTOOLS_EXTENSION__</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#D3C6AA;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>当 window 下有 REDUX_DEVTOOLS_EXTENSION 时，执行 window.REDUX_DEVTOOLS_EXTENSION()。</p><h2 id="action-和-reducer-的编写" tabindex="-1">Action 和 Reducer 的编写 <a class="header-anchor" href="#action-和-reducer-的编写" aria-label="Permalink to &quot;Action 和 Reducer 的编写&quot;">​</a></h2><p>声明一个 action 语句，然后通过 store.dispatch() 传递给 store。</p><p><strong>在 React 中，store 接收到 action 后会自动的把 action 转发给 reducer，让 reducer 来处理并返回值给 store。</strong></p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">handleInputChange</span><span style="color:#D3C6AA;">(e) {</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> action </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    type</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;change_input_value&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">    value</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> e</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">target</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">value</span></span>
<span class="line"><span style="color:#D3C6AA;">  };</span></span>
<span class="line highlighted"><span style="color:#D3C6AA;">  store</span><span style="color:#859289;">.</span><span style="color:#A7C080;">dispatch</span><span style="color:#D3C6AA;">(action);</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Reducer 的处理：</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// store/reducer.js</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> defaultState </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  inputValue</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;123&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  list</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">2</span><span style="color:#D3C6AA;">]</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// reducer 可以接受state，但是绝不能修改state</span></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E67E80;"> default</span><span style="color:#D3C6AA;"> (state </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> defaultState, action) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  if</span><span style="color:#D3C6AA;"> (action</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">type </span><span style="color:#E69875;">===</span><span style="color:#DBBC7F;"> &quot;change_input_value&quot;</span><span style="color:#D3C6AA;">) {</span></span>
<span class="line highlighted"><span style="color:#E69875;">    const</span><span style="color:#D3C6AA;"> newState </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> JSON</span><span style="color:#859289;">.</span><span style="color:#A7C080;">parse</span><span style="color:#D3C6AA;">(JSON</span><span style="color:#859289;">.</span><span style="color:#A7C080;">stringify</span><span style="color:#D3C6AA;">(state));</span></span>
<span class="line highlighted"><span style="color:#D3C6AA;">    newState</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">inputValue </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> action</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">value;</span></span>
<span class="line highlighted"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> newState;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> state;</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>reducer 不能直接去更新 state 的值，所以深拷贝了一个副本进行修改，再返回新的 state 给 store。</p><p>store 接收到新的 state 之后，应该去更新 components 视图，components 使用 store.subscribe(F) 订阅 store 状态，store 一更新 components 就会自动执行方法 F。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> store </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;./store&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">class</span><span style="color:#7FBBB3;"> TodoList</span><span style="color:#E69875;"> extends</span><span style="color:#7FBBB3;"> Component</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  constructor</span><span style="color:#D3C6AA;">(props) {</span></span>
<span class="line"><span style="color:#D699B6;">    super</span><span style="color:#D3C6AA;">(props);</span></span>
<span class="line"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">state </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> store</span><span style="color:#859289;">.</span><span style="color:#A7C080;">getState</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">handleInputChange </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">handleInputChange</span><span style="color:#859289;">.</span><span style="color:#A7C080;">bind</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">this</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">handleStoreChange </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">handleStoreChange</span><span style="color:#859289;">.</span><span style="color:#A7C080;">bind</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">this</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">handleBtnClick </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">handleBtnClick</span><span style="color:#859289;">.</span><span style="color:#A7C080;">bind</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">this</span><span style="color:#D3C6AA;">);</span></span>
<span class="line highlighted"><span style="color:#D3C6AA;">    store</span><span style="color:#859289;">.</span><span style="color:#A7C080;">subscribe</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">handleStoreChange);</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">	// ...</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>方法更新，components 设置新的 state 值为 store 里的值，再重新执行 render 函数更新视图。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">handleStoreChange</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line highlighted"><span style="color:#D699B6;">	this</span><span style="color:#859289;">.</span><span style="color:#A7C080;">setState</span><span style="color:#D3C6AA;">(store</span><span style="color:#859289;">.</span><span style="color:#A7C080;">getState</span><span style="color:#D3C6AA;">());</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>再看一遍流程图：</p><p>声明一个 action 语句，然后通过 store.dispatch() 传递给 store。</p><p>store 会自动把接收到的 action 和当前的 state 传给 reducer，reducer 处理完后，再返回新的 state 给 store，store 里的数据被更新 （注意，是 store 对自己的数据进行更新，而不是 reducer 更新的），再返回给 components ，components 订阅 store 更新随之视图更新 。</p><p><img src="`+c+`" alt="redux_work_flow_4"></p><h2 id="actiontypes-的拆分" tabindex="-1">ActionTypes 的拆分 <a class="header-anchor" href="#actiontypes-的拆分" aria-label="Permalink to &quot;ActionTypes 的拆分&quot;">​</a></h2><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// store/constants.js</span></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E69875;"> const</span><span style="color:#D3C6AA;"> CHANGE_INPUT_VALUE </span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;"> &#39;change_input_value&#39;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E69875;"> const</span><span style="color:#D3C6AA;"> ADD_TODO_ITEM </span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;"> &#39;add_todo_item&#39;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E69875;"> const</span><span style="color:#D3C6AA;"> DELETE_TODO_ITEM </span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;"> &#39;delete_todo_item&#39;</span><span style="color:#D3C6AA;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>我们为什么要把字符串提取出来，放到一个常量中？</strong></p><p>因为常量或者是变量在代码里拼写错的时候，会报异常以便迅速定位，但是字符串拼写错就不会报异常难以排错。</p><h2 id="使用-actioncreator-统一创建-action" tabindex="-1">使用 actionCreator 统一创建 action <a class="header-anchor" href="#使用-actioncreator-统一创建-action" aria-label="Permalink to &quot;使用 actionCreator 统一创建 action&quot;">​</a></h2><p>目的：统一管理 action。</p><p>原来的写法，不利于维护，我们可以放在一个文件里统一管理。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">handleInputChange</span><span style="color:#D3C6AA;">(e) {</span></span>
<span class="line"><span style="color:#E69875;">	const</span><span style="color:#D3C6AA;"> action </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">		type</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> CHANGE_INPUT_VALUE,</span></span>
<span class="line"><span style="color:#D3C6AA;">		value</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> e</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">target</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">value</span></span>
<span class="line"><span style="color:#D3C6AA;">	};</span></span>
<span class="line"><span style="color:#D3C6AA;">	store</span><span style="color:#859289;">.</span><span style="color:#A7C080;">dispatch</span><span style="color:#D3C6AA;">(action);</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#A7C080;">handleBtnClick</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#E69875;">	const</span><span style="color:#D3C6AA;"> action </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">		type</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> ADD_TODO_ITEM</span></span>
<span class="line"><span style="color:#D3C6AA;">	};</span></span>
<span class="line"><span style="color:#D3C6AA;">	store</span><span style="color:#859289;">.</span><span style="color:#A7C080;">dispatch</span><span style="color:#D3C6AA;">(action);</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#A7C080;">handleItemDelete</span><span style="color:#D3C6AA;">(index) {</span></span>
<span class="line"><span style="color:#E69875;">	const</span><span style="color:#D3C6AA;"> action </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">		type</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> DELETE_TODO_ITEM,</span></span>
<span class="line"><span style="color:#D3C6AA;">		index</span></span>
<span class="line"><span style="color:#D3C6AA;">	};</span></span>
<span class="line"><span style="color:#D3C6AA;">	store</span><span style="color:#859289;">.</span><span style="color:#A7C080;">dispatch</span><span style="color:#D3C6AA;">(action);</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>新建一个 actionCreator.js 里统一写法，返回一个函数：</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// store/actionCreator.js</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { CHANGE_INPUT_VALUE, ADD_TODO_ITEM, DELETE_TODO_ITEM } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;./constants&#39;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E69875;"> const</span><span style="color:#A7C080;"> getInputChangeAction</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> (value) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> ({</span></span>
<span class="line"><span style="color:#D3C6AA;">	type</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> CHANGE_INPUT_VALUE,</span></span>
<span class="line"><span style="color:#D3C6AA;">	value</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E69875;"> const</span><span style="color:#A7C080;"> getAddItemAction</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> ({</span></span>
<span class="line"><span style="color:#D3C6AA;">	type</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> ADD_TODO_ITEM</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E69875;"> const</span><span style="color:#A7C080;"> getDeleteItemAction</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> (index) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> ({</span></span>
<span class="line"><span style="color:#D3C6AA;">	type</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> DELETE_TODO_ITEM,</span></span>
<span class="line"><span style="color:#D3C6AA;">	index</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>然后上面的可以简化为函数调用：</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">handleInputChange</span><span style="color:#D3C6AA;">(e) {</span></span>
<span class="line"><span style="color:#E69875;">	const</span><span style="color:#D3C6AA;"> action </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> getInputChangeAction</span><span style="color:#D3C6AA;">(e</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">target</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">value);</span></span>
<span class="line"><span style="color:#D3C6AA;">	store</span><span style="color:#859289;">.</span><span style="color:#A7C080;">dispatch</span><span style="color:#D3C6AA;">(action);</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#A7C080;">handleBtnClick</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#E69875;">	const</span><span style="color:#D3C6AA;"> action </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> getAddItemAction</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#D3C6AA;">	store</span><span style="color:#859289;">.</span><span style="color:#A7C080;">dispatch</span><span style="color:#D3C6AA;">(action);</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#A7C080;">handleItemDelete</span><span style="color:#D3C6AA;">(index) {</span></span>
<span class="line"><span style="color:#E69875;">	const</span><span style="color:#D3C6AA;"> action </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> getDeleteItemAction</span><span style="color:#D3C6AA;">(index);</span></span>
<span class="line"><span style="color:#D3C6AA;">	store</span><span style="color:#859289;">.</span><span style="color:#A7C080;">dispatch</span><span style="color:#D3C6AA;">(action);</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="redux-基础小结" tabindex="-1">Redux 基础小结 <a class="header-anchor" href="#redux-基础小结" aria-label="Permalink to &quot;Redux 基础小结&quot;">​</a></h2><ul><li>Store 是唯一的。</li><li>只有 Store 能改变自己的内容。</li><li>Reducer 必须是个纯函数。（纯函数是指 给定固定的输入，就一定会有固定的输出，而且不会有任何副作用。）</li></ul><p><strong>基础 API</strong></p><p>创建一个store：<code>const store = createStore(reducer);</code></p><p>派发一个action：<code>store.dispatch(action);</code></p><p>获取store的值：<code>store.getState();</code></p><p>订阅store的状态变化：<code>store.subscribe(Function);</code></p>`,56)]))}const h=n(i,[["render",y]]);export{m as __pageData,h as default};
