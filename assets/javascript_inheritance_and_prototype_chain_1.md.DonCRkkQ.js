import{_ as n,c as a,o as e,ag as p}from"./chunks/framework.D-6U7MZ9.js";const l="/n-book/assets/inheritance_and_prototype_chain_1.CeZoJsIL.png",A=JSON.parse('{"title":"Inheritance and the prototype chain 1 (继承与原型链 - 上)","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/inheritance_and_prototype_chain_1.md","filePath":"javascript/inheritance_and_prototype_chain_1.md","lastUpdated":1553078187000}'),o={name:"javascript/inheritance_and_prototype_chain_1.md"};function t(r,s,c,i,y,b){return e(),a("div",null,s[0]||(s[0]=[p(`<h1 id="inheritance-and-the-prototype-chain-1-继承与原型链-上" tabindex="-1">Inheritance and the prototype chain 1 (继承与原型链 - 上) <a class="header-anchor" href="#inheritance-and-the-prototype-chain-1-继承与原型链-上" aria-label="Permalink to &quot;Inheritance and the prototype chain 1 (继承与原型链 - 上)&quot;">​</a></h1><h2 id="写在前面" tabindex="-1">写在前面 <a class="header-anchor" href="#写在前面" aria-label="Permalink to &quot;写在前面&quot;">​</a></h2><p>(the <code>class</code> keyword is introduced in ES2015, but is syntactical sugar, JavaScript remains prototype-based).</p><p>When it comes to inheritance, JavaScript only has one construct: <code>objects</code>. Each object has a private property which holds a link to another object called its <strong>prototype</strong>. That prototype object has a prototype of its own, and so on until an object is reached with <code>null</code> as its prototype. By definition, <code>null</code> has no prototype, and acts as <strong>the final link in this prototype chain.</strong></p><p><strong>Nearly all objects in JavaScript are instances of <code>Object</code> which sits on the top of a prototype chain.</strong></p><p>For example：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> Foo</span><span style="color:#D3C6AA;">(){};</span></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> foo </span><span style="color:#E69875;">=</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> Foo</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(foo</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">__proto__ </span><span style="color:#E69875;">===</span><span style="color:#7FBBB3;"> Foo</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">prototype); </span><span style="color:#859289;font-style:italic;">// ture</span></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#7FBBB3;">Foo</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">prototype</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">__proto__ </span><span style="color:#E69875;">===</span><span style="color:#7FBBB3;"> Object</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">prototype); </span><span style="color:#859289;font-style:italic;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><img src="`+l+`" alt="inheritance_and_the_prototype_chain_1"></p><h2 id="inheritance-with-the-prototype-chain" tabindex="-1">Inheritance with the prototype chain <a class="header-anchor" href="#inheritance-with-the-prototype-chain" aria-label="Permalink to &quot;Inheritance with the prototype chain&quot;">​</a></h2><h3 id="inheriting-properties" tabindex="-1">Inheriting properties <a class="header-anchor" href="#inheriting-properties" aria-label="Permalink to &quot;Inheriting properties&quot;">​</a></h3><p>When trying to access a property of an object, the property will not only be sought on the object but on the prototype of the object, the prototype of the prototype, and so on until either a property with a matching name is found or the end of the prototype chain is reached.</p><p>Here is what happens when trying to access a property:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// Let&#39;s create an object o from function f with its own properties a and b:</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#A7C080;"> f</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;"> ()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D699B6;">   this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">a</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> 1</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D699B6;">   this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">b</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> 2</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> o </span><span style="color:#E69875;">=</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> f</span><span style="color:#D3C6AA;">(); </span><span style="color:#859289;font-style:italic;">// {a: 1, b: 2}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// add properties in f function&#39;s prototype</span></span>
<span class="line"><span style="color:#7FBBB3;">f</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">prototype</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">b </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 3</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#7FBBB3;">f</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">prototype</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">c </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 4</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// do not set the prototype f.prototype = {b:3,c:4}; this will break the prototype chain</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// o.[[Prototype]] has properties b and c.</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// o.[[Prototype]].[[Prototype]] is Object.prototype.</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// Finally, o.[[Prototype]].[[Prototype]].[[Prototype]] is null.</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// This is the end of the prototype chain, as null,</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// by definition, has no [[Prototype]].</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// Thus, the full prototype chain looks like:</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// {a: 1, b: 2} ---&gt; {b: 3, c: 4} ---&gt; Object.prototype ---&gt; null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(o</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">a); </span><span style="color:#859289;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// Is there an &#39;a&#39; own property on o? Yes, and its value is 1.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(o</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">b); </span><span style="color:#859289;font-style:italic;">// 2</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// Is there a &#39;b&#39; own property on o? Yes, and its value is 2.</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// The prototype also has a &#39;b&#39; property, but it&#39;s not visited. </span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// This is called &quot;property shadowing.&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(o</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">c); </span><span style="color:#859289;font-style:italic;">// 4</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// Is there a &#39;c&#39; own property on o? No, check its prototype.</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// Is there a &#39;c&#39; own property on o.[[Prototype]]? Yes, its value is 4.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(o</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">d); </span><span style="color:#859289;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// Is there a &#39;d&#39; own property on o? No, check its prototype.</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// Is there a &#39;d&#39; own property on o.[[Prototype]]? No, check its prototype.</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// o.[[Prototype]].[[Prototype]] is null, stop searching,</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// no property found, return undefined.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><p>Setting a property to an object creates an own property. The only exception to the getting and setting behavior rules is when there is an inherited property with a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects#Defining_getters_and_setters" target="_blank" rel="noreferrer">getter or a setter</a>.</p><h3 id="inheriting-methods" tabindex="-1">Inheriting “methods” <a class="header-anchor" href="#inheriting-methods" aria-label="Permalink to &quot;Inheriting “methods”&quot;">​</a></h3><p>JavaScript does not have &quot;methods&quot; in the form that class-based languages define them. In JavaScript, any function can be added to an object in the form of a property.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>When an inherited function is executed, the value of <code>this</code> points to <strong>the inheriting object</strong>, not to the prototype object where the function is an own property.</p></div><p>for example:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> o </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  a</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 2</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#A7C080;">  m</span><span style="color:#859289;">:</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">a</span><span style="color:#E69875;"> +</span><span style="color:#D699B6;"> 1</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(o</span><span style="color:#859289;">.</span><span style="color:#A7C080;">m</span><span style="color:#D3C6AA;">()); </span><span style="color:#859289;font-style:italic;">// 3</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// When calling o.m in this case, &#39;this&#39; refers to o</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> p </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> Object</span><span style="color:#859289;">.</span><span style="color:#A7C080;">create</span><span style="color:#D3C6AA;">(o);</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// p is an object that inherits from o</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">p</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">a </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 4</span><span style="color:#D3C6AA;">; </span><span style="color:#859289;font-style:italic;">// creates a property &#39;a&#39; on p</span></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(p</span><span style="color:#859289;">.</span><span style="color:#A7C080;">m</span><span style="color:#D3C6AA;">()); </span><span style="color:#859289;font-style:italic;">// 5</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// when p.m is called, &#39;this&#39; refers to p.</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// So when p inherits the function m of o, </span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// &#39;this.a&#39; means p.a, the property &#39;a&#39; of p</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="different-ways-to-create-objects-and-the-resulting-prototype-chain" tabindex="-1">Different ways to create objects and the resulting prototype chain <a class="header-anchor" href="#different-ways-to-create-objects-and-the-resulting-prototype-chain" aria-label="Permalink to &quot;Different ways to create objects and the resulting prototype chain&quot;">​</a></h2><h3 id="objects-created-with-syntax-constructs" tabindex="-1">Objects created with syntax constructs <a class="header-anchor" href="#objects-created-with-syntax-constructs" aria-label="Permalink to &quot;Objects created with syntax constructs&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> o </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {a</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 1</span><span style="color:#D3C6AA;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// The newly created object o has Object.prototype as its [[Prototype]]</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// o has no own property named &#39;hasOwnProperty&#39;</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// hasOwnProperty is an own property of Object.prototype. </span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// So o inherits hasOwnProperty from Object.prototype</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// Object.prototype has null as its prototype.</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// o ---&gt; Object.prototype ---&gt; null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> b </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [</span><span style="color:#DBBC7F;">&#39;yo&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;whadup&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;?&#39;</span><span style="color:#D3C6AA;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// Arrays inherit from Array.prototype </span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// (which has methods indexOf, forEach, etc.)</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// The prototype chain looks like:</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// b ---&gt; Array.prototype ---&gt; Object.prototype ---&gt; null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> f</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D699B6;"> 2</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// Functions inherit from Function.prototype </span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// (which has methods call, bind, etc.)</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// f ---&gt; Function.prototype ---&gt; Object.prototype ---&gt; null</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="with-a-constructor" tabindex="-1">With a constructor <a class="header-anchor" href="#with-a-constructor" aria-label="Permalink to &quot;With a constructor&quot;">​</a></h3><p>A <strong>&quot;constructor&quot;</strong> in JavaScript is just a function that happens to be called with the <code>new</code> operator.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> Graph</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D699B6;">  this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">vertices</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> [];</span></span>
<span class="line"><span style="color:#D699B6;">  this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">edges</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> [];</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7FBBB3;">Graph</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">prototype </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">  addVertex</span><span style="color:#859289;">:</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">(v)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">vertices</span><span style="color:#859289;">.</span><span style="color:#A7C080;">push</span><span style="color:#D3C6AA;">(v);</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> g </span><span style="color:#E69875;">=</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> Graph</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// g is an object with own properties &#39;vertices&#39; and &#39;edges&#39;.</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// g.[[Prototype]] is the value of Graph.prototype when new Graph() is executed.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="with-object-create" tabindex="-1">With <code>Object.create</code> <a class="header-anchor" href="#with-object-create" aria-label="Permalink to &quot;With \`Object.create\`&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> a </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {a</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 1</span><span style="color:#D3C6AA;">}; </span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// a ---&gt; Object.prototype ---&gt; null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> b </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> Object</span><span style="color:#859289;">.</span><span style="color:#A7C080;">create</span><span style="color:#D3C6AA;">(a);</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// b ---&gt; a ---&gt; Object.prototype ---&gt; null</span></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(b</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">a); </span><span style="color:#859289;font-style:italic;">// 1 (inherited)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> c </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> Object</span><span style="color:#859289;">.</span><span style="color:#A7C080;">create</span><span style="color:#D3C6AA;">(b);</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// c ---&gt; b ---&gt; a ---&gt; Object.prototype ---&gt; null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> d </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> Object</span><span style="color:#859289;">.</span><span style="color:#A7C080;">create</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">null</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// d ---&gt; null</span></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(d</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">hasOwnProperty); </span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// undefined, because d doesn&#39;t inherit from Object.prototype</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="with-the-class-keyword" tabindex="-1">With the <code>class</code> keyword <a class="header-anchor" href="#with-the-class-keyword" aria-label="Permalink to &quot;With the \`class\` keyword&quot;">​</a></h3><p>The new keywords include <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class" target="_blank" rel="noreferrer">class</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/constructor" target="_blank" rel="noreferrer">constructor</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static" target="_blank" rel="noreferrer">static</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends" target="_blank" rel="noreferrer">extends</a>, and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super" target="_blank" rel="noreferrer">super</a>.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#DBBC7F;">&#39;use strict&#39;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">class</span><span style="color:#7FBBB3;"> Polygon</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  constructor</span><span style="color:#D3C6AA;">(height, width) {</span></span>
<span class="line"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">height </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> height;</span></span>
<span class="line"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">width </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> width;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">class</span><span style="color:#7FBBB3;"> Square</span><span style="color:#E69875;"> extends</span><span style="color:#7FBBB3;"> Polygon</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  constructor</span><span style="color:#D3C6AA;">(sideLength) {</span></span>
<span class="line"><span style="color:#D699B6;">    super</span><span style="color:#D3C6AA;">(sideLength, sideLength);</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#E67E80;">  get</span><span style="color:#A7C080;"> area</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">height </span><span style="color:#E69875;">*</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">width;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#E67E80;">  set</span><span style="color:#A7C080;"> sideLength</span><span style="color:#D3C6AA;">(newLength) {</span></span>
<span class="line"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">height </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> newLength;</span></span>
<span class="line"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">width </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> newLength;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> square </span><span style="color:#E69875;">=</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> Square</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">2</span><span style="color:#D3C6AA;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h2 id="performance" tabindex="-1">Performance <a class="header-anchor" href="#performance" aria-label="Permalink to &quot;Performance&quot;">​</a></h2><p>The lookup time for properties that are high up on the prototype chain can have a negative impact on the performance, and this may be significant in the code where performance is critical.</p><p>Additionally, trying to access nonexistent properties will always traverse the full prototype chain.</p><p>To check whether an object has a property defined on itself and not somehere on its prototype chain, it is necessary to use the <code>hasOwnProperty</code> method which all objects inherit from <code>Object.prototype</code>.</p><p><code>hasOwnProperty</code> is the <strong>only</strong> thing in JavaScript which deals with properties and does not traverse the prototype chain.</p><p>let&#39;s take the above graph example code to illustrate it:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(g</span><span style="color:#859289;">.</span><span style="color:#A7C080;">hasOwnProperty</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;vertices&#39;</span><span style="color:#D3C6AA;">));</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(g</span><span style="color:#859289;">.</span><span style="color:#A7C080;">hasOwnProperty</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;nope&#39;</span><span style="color:#D3C6AA;">));</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(g</span><span style="color:#859289;">.</span><span style="color:#A7C080;">hasOwnProperty</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;addVertex&#39;</span><span style="color:#D3C6AA;">));</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(g</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">__proto__</span><span style="color:#859289;">.</span><span style="color:#A7C080;">hasOwnProperty</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;addVertex&#39;</span><span style="color:#D3C6AA;">));</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>Note: It is not enough to check whether a property is <code>undefined</code>. The property might very well exist, but its value just happens to be set to <code>undefined</code>.</p><h2 id="summary-of-methods-for-extending-the-protoype-chain" tabindex="-1">Summary of methods for extending the protoype chain <a class="header-anchor" href="#summary-of-methods-for-extending-the-protoype-chain" aria-label="Permalink to &quot;Summary of methods for extending the protoype chain&quot;">​</a></h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain#Summary_of_methods_for_extending_the_protoype_chain" target="_blank" rel="noreferrer">Look here</a></p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain#Summary_of_methods_for_extending_the_protoype_chain" target="_blank" rel="noreferrer">Inheritance and the prototype chain - JavaScript | MDN</a></p>`,42)]))}const d=n(o,[["render",t]]);export{A as __pageData,d as default};
