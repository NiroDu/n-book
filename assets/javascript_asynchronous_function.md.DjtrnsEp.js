import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.D-6U7MZ9.js";const b=JSON.parse('{"title":"asynchronous function（异步函数）","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/asynchronous_function.md","filePath":"javascript/asynchronous_function.md","lastUpdated":1539840422000}'),e={name:"javascript/asynchronous_function.md"};function o(c,s,r,t,i,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="asynchronous-function-异步函数" tabindex="-1">asynchronous function（异步函数） <a class="header-anchor" href="#asynchronous-function-异步函数" aria-label="Permalink to &quot;asynchronous function（异步函数）&quot;">​</a></h1><p>async function 是 Promise 用法的优化。</p><p>The purpose of <code>async/await</code> functions is to simplify the behavior of using promises synchronously and to perform some behavior on a group of <code>Promises</code>.</p><h2 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h2><blockquote><p>An <code>async</code> function can contain an <code>await</code> expression that pauses the execution of the async function and waits for the passed <code>Promise</code>&#39;s resolution, and then resumes the <code>async</code> function&#39;s execution and returns the resolved value.</p></blockquote><p>Remember, the <code>await</code> keyword is only valid inside <code>async</code> functions. If you use it outside of an <code>async</code> function&#39;s body, you will get a <code>SyntaxError</code>.</p><p>async 表示函数里有异步操作，await 表示紧跟在后面的表达式需要等待结果。</p><p>async 函数返回一个 Promise 对象，可以使用 then 方法添加回调函数。当函数执行的时候，一旦遇到 await 就会先返回，等到触发的异步操作完成，再接着执行函数体内后面的语句。</p><h2 id="用法" tabindex="-1">用法 <a class="header-anchor" href="#用法" aria-label="Permalink to &quot;用法&quot;">​</a></h2><h3 id="例子-1" tabindex="-1">例子 1 <a class="header-anchor" href="#例子-1" aria-label="Permalink to &quot;例子 1&quot;">​</a></h3><p>先看一个用 Promise 写的例子，我们再用 async 函数重写它：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// An API that returns a Promise will result in a promise chain, and it splits the function into many parts.</span></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> getProcessedData</span><span style="color:#D3C6AA;">(url)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#A7C080;"> downloadData</span><span style="color:#D3C6AA;">(url)</span><span style="color:#859289;font-style:italic;"> // returns a promise</span></span>
<span class="line"><span style="color:#859289;">    .</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(v</span><span style="color:#E69875;"> =&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">      return</span><span style="color:#A7C080;"> processDataInWorker</span><span style="color:#D3C6AA;">(v);</span><span style="color:#859289;font-style:italic;"> // returns a promise</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"><span style="color:#859289;">    .</span><span style="color:#A7C080;">catch</span><span style="color:#D3C6AA;">(e</span><span style="color:#E69875;"> =&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">      return</span><span style="color:#A7C080;"> downloadFallbackData</span><span style="color:#D3C6AA;">(url)</span><span style="color:#859289;font-style:italic;">  // returns a promise</span></span>
<span class="line"><span style="color:#D3C6AA;">    });</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...这里省略then做的事...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>it can be rewritten with a single async function as follows:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">async</span><span style="color:#E67E80;"> function</span><span style="color:#A7C080;"> getProcessedData</span><span style="color:#D3C6AA;">(url)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  let</span><span style="color:#D3C6AA;"> v;</span></span>
<span class="line"><span style="color:#E67E80;">  try</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    v</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> await</span><span style="color:#A7C080;"> downloadData</span><span style="color:#D3C6AA;">(url);</span><span style="color:#A7C080;"> </span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span><span style="color:#E67E80;"> catch</span><span style="color:#D3C6AA;">(e)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    v</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> await</span><span style="color:#A7C080;"> downloadFallbackData</span><span style="color:#D3C6AA;">(url);</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#A7C080;"> processDataInWorker</span><span style="color:#D3C6AA;">(v);</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">getProcessedData</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;http://www.balabala.com/getdata/&quot;</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;"> (result){</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">	// 返回 v 的值</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(result);</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="warning custom-block"><p class="custom-block-title">Note</p><p>上个例子中，return 语句中没有 await 操作符，因为 async function 的返回值将隐式传递给 Promise.resolve。（别忘了async函数的返回值是一个 Promise 对象）</p></div><h3 id="例子-2" tabindex="-1">例子 2 <a class="header-anchor" href="#例子-2" aria-label="Permalink to &quot;例子 2&quot;">​</a></h3><p>再看一个例子：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// 2秒后执行</span></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#A7C080;"> resolveAfter2Seconds</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;starting slow promise&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#E67E80;"> new</span><span style="color:#7FBBB3;"> Promise</span><span style="color:#D3C6AA;">(resolve</span><span style="color:#E69875;"> =&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">    setTimeout</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">      resolve</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">20</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">      console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;slow promise is done&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">    },</span><span style="color:#D699B6;"> 2000</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">  });</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 1秒后执行</span></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#A7C080;"> resolveAfter1Second</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;starting fast promise&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#E67E80;"> new</span><span style="color:#7FBBB3;"> Promise</span><span style="color:#D3C6AA;">(resolve</span><span style="color:#E69875;"> =&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">    setTimeout</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">      resolve</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">10</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">      console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;fast promise is done&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">    },</span><span style="color:#D699B6;"> 1000</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">  });</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 按顺序执行</span></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#A7C080;"> sequentialStart</span><span style="color:#E69875;"> =</span><span style="color:#E69875;"> async</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;==SEQUENTIAL START==&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 如果 await 操作符后的表达式不是一个 Promise 对象, 则它会被转换成一个 resolved 状态的 Promise 对象</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> slow</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> await</span><span style="color:#A7C080;"> resolveAfter2Seconds</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> fast</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> await</span><span style="color:#A7C080;"> resolveAfter1Second</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(slow);</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(fast);</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 同时执行</span></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#A7C080;"> concurrentStart</span><span style="color:#E69875;"> =</span><span style="color:#E69875;"> async</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;==CONCURRENT START with await==&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> slow</span><span style="color:#E69875;"> =</span><span style="color:#A7C080;"> resolveAfter2Seconds</span><span style="color:#D3C6AA;">();</span><span style="color:#859289;font-style:italic;"> // 立即启动计时器</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> fast</span><span style="color:#E69875;"> =</span><span style="color:#A7C080;"> resolveAfter1Second</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">await</span><span style="color:#D3C6AA;"> slow);</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">await</span><span style="color:#D3C6AA;"> fast);</span><span style="color:#859289;font-style:italic;"> // 等待 slow 完成, fast 也已经完成。</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 按顺序执行（串行）</span></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#A7C080;"> stillSerial</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;==CONCURRENT START with Promise.all==&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#7FBBB3;">  Promise</span><span style="color:#859289;">.</span><span style="color:#A7C080;">all</span><span style="color:#D3C6AA;">([</span><span style="color:#A7C080;">resolveAfter2Seconds</span><span style="color:#D3C6AA;">(),</span><span style="color:#A7C080;"> resolveAfter1Second</span><span style="color:#D3C6AA;">()])</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(([slow,</span><span style="color:#D3C6AA;"> fast])</span><span style="color:#E69875;"> =&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(slow);</span></span>
<span class="line"><span style="color:#D3C6AA;">    console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(fast);</span></span>
<span class="line"><span style="color:#D3C6AA;">  });</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 并行</span></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#A7C080;"> parallel</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;==PARALLEL with Promise.then==&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // in this case could be simply written as console.log(resolveAfter2Seconds());</span></span>
<span class="line"><span style="color:#A7C080;">  resolveAfter2Seconds</span><span style="color:#D3C6AA;">()</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">((message)</span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(message));</span><span style="color:#A7C080;"> </span></span>
<span class="line"><span style="color:#A7C080;">  resolveAfter1Second</span><span style="color:#D3C6AA;">()</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">((message)</span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(message));</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">sequentialStart</span><span style="color:#D3C6AA;">(); </span><span style="color:#859289;font-style:italic;">// sequentialStart 总共花了 2+1 秒</span></span>
<span class="line"><span style="color:#A7C080;">setTimeout</span><span style="color:#D3C6AA;">(concurrentStart, </span><span style="color:#D699B6;">4000</span><span style="color:#D3C6AA;">); </span><span style="color:#859289;font-style:italic;">// concurrentStart 总共花了 2 秒</span></span>
<span class="line"><span style="color:#A7C080;">setTimeout</span><span style="color:#D3C6AA;">(stillSerial, </span><span style="color:#D699B6;">7000</span><span style="color:#D3C6AA;">); </span><span style="color:#859289;font-style:italic;">// stillSerial 总共花了 2 秒</span></span>
<span class="line"><span style="color:#A7C080;">setTimeout</span><span style="color:#D3C6AA;">(parallel, </span><span style="color:#D699B6;">10000</span><span style="color:#D3C6AA;">); </span><span style="color:#859289;font-style:italic;">// 真正的并行运行</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br></div></div><div class="warning custom-block"><p class="custom-block-title">Note</p><p>在 sequentialStart 中，程序为第一个await停留了 2 秒，然后又为第二个await停留了 1 秒。直到第一个计时器结束后，第二个计时器才被创建。 在 concurrentStart 中，两个计时器均被创建，然后一起被await。这两个计时器同时运行的，但await的调用仍然是按顺序运行的，这意味着第二个await会等到第一个await运行结束。这使得代码完成运行只需要 2 秒，而不是 3 秒。这 2 秒是由最慢的计时器决定的。</p><p>使用了<code>Promise.all</code>的 stillSerial 的例子中也存在同样的情况。</p><p>如果希望同时await两个或者是更多的Promise对象，必须使用<code>Promise.then</code>，正如例子中parallel所做的那样。</p></div><h3 id="例子-3" tabindex="-1">例子 3 <a class="header-anchor" href="#例子-3" aria-label="Permalink to &quot;例子 3&quot;">​</a></h3><p><code>await</code>命令后面的<code>Promise</code>对象，运行结果可能是<code>rejected</code>，所以最好把<code>await</code>命令放在 <code>try...catch</code> 代码块中。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> resolveAfter2Seconds</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#E67E80;"> new</span><span style="color:#7FBBB3;"> Promise</span><span style="color:#D3C6AA;">(resolve</span><span style="color:#E69875;"> =&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">    setTimeout</span><span style="color:#D3C6AA;">(()</span><span style="color:#E69875;"> =&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">        console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;calling2&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#A7C080;">        resolve</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;resolved&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">    },</span><span style="color:#D699B6;"> 2000</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">  });</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">async</span><span style="color:#E67E80;"> function</span><span style="color:#A7C080;"> asyncCall</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;calling&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#E67E80;">  try</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">    var</span><span style="color:#D3C6AA;"> result</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> await</span><span style="color:#A7C080;"> resolveAfter2Seconds</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#D3C6AA;">    console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(result);</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span><span style="color:#E67E80;"> catch</span><span style="color:#D3C6AA;"> (err)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(err);</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 另一种写法</span></span>
<span class="line"><span style="color:#E69875;">async</span><span style="color:#E67E80;"> function</span><span style="color:#A7C080;"> asyncCall</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  await</span><span style="color:#A7C080;"> resolveAfter2Seconds</span><span style="color:#D3C6AA;">()</span><span style="color:#859289;">.</span><span style="color:#A7C080;">catch</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;"> (err){</span></span>
<span class="line"><span style="color:#D3C6AA;">    console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(err);</span></span>
<span class="line"><span style="color:#D3C6AA;">  });</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">asyncCall</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// &gt; &quot;calling&quot;</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 两秒后...</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// &gt; &quot;calling2&quot;</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// &gt; &quot;resolved&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h3 id="例子-4" tabindex="-1">例子 4 <a class="header-anchor" href="#例子-4" aria-label="Permalink to &quot;例子 4&quot;">​</a></h3><p><code>await</code>命令只能用在<code>async</code>函数之中，如果用在普通函数，就会报错。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">async</span><span style="color:#E67E80;"> function</span><span style="color:#A7C080;"> dbFuc</span><span style="color:#D3C6AA;">(db)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  let</span><span style="color:#D3C6AA;"> docs</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> [{},</span><span style="color:#D3C6AA;"> {},</span><span style="color:#D3C6AA;"> {}];</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 报错，因为await用在普通函数中了</span></span>
<span class="line"><span style="color:#D3C6AA;">  docs</span><span style="color:#859289;">.</span><span style="color:#A7C080;">forEach</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;"> (doc)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    await</span><span style="color:#D3C6AA;"> db</span><span style="color:#859289;">.</span><span style="color:#A7C080;">post</span><span style="color:#D3C6AA;">(doc);</span></span>
<span class="line"><span style="color:#D3C6AA;">  });</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">/* </span></span>
<span class="line"><span style="color:#859289;font-style:italic;">应该改成</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">docs.forEach(async function (doc) {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">*/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>假如<code>db.post</code>要求是继发执行， 而不是并发执行（同时执行），那么正确的写法是采用<code>for</code>循环，而不 <code>forEach</code> ：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">async</span><span style="color:#E67E80;"> function</span><span style="color:#A7C080;"> dbFuc</span><span style="color:#D3C6AA;">(db)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  let</span><span style="color:#D3C6AA;"> docs</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> [{},</span><span style="color:#D3C6AA;"> {},</span><span style="color:#D3C6AA;"> {}];</span></span>
<span class="line"><span style="color:#E67E80;">  for</span><span style="color:#D3C6AA;"> (</span><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> doc</span><span style="color:#E67E80;"> of</span><span style="color:#D3C6AA;"> docs)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    await</span><span style="color:#D3C6AA;"> db</span><span style="color:#859289;">.</span><span style="color:#A7C080;">post</span><span style="color:#D3C6AA;">(doc);</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>如果确实希望多个请求并发执行，可以使用<code>Promise.all</code>方法。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">async</span><span style="color:#E67E80;"> function</span><span style="color:#A7C080;"> dbFuc</span><span style="color:#D3C6AA;">(db)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  let</span><span style="color:#D3C6AA;"> docs</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> [{},</span><span style="color:#D3C6AA;"> {},</span><span style="color:#D3C6AA;"> {}];</span></span>
<span class="line"><span style="color:#E69875;">  let</span><span style="color:#D3C6AA;"> promises</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> docs</span><span style="color:#859289;">.</span><span style="color:#A7C080;">map</span><span style="color:#D3C6AA;">((doc)</span><span style="color:#E69875;"> =&gt;</span><span style="color:#D3C6AA;"> db</span><span style="color:#859289;">.</span><span style="color:#A7C080;">post</span><span style="color:#D3C6AA;">(doc));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">  let</span><span style="color:#D3C6AA;"> results</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> [];</span></span>
<span class="line"><span style="color:#E67E80;">  for</span><span style="color:#D3C6AA;"> (</span><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> promise</span><span style="color:#E67E80;"> of</span><span style="color:#D3C6AA;"> promises)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    results</span><span style="color:#859289;">.</span><span style="color:#A7C080;">push</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">await</span><span style="color:#D3C6AA;"> promise);</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(results);</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function" target="_blank" rel="noreferrer">async function - JavaScript | MDN</a></p><p><a href="http://www.ruanyifeng.com/blog/2015/05/async.html" target="_blank" rel="noreferrer">async 函数的含义和用法 - 阮一峰的网络日志</a></p>`,32)]))}const C=n(e,[["render",o]]);export{b as __pageData,C as default};
