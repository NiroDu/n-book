import{_ as n,c as a,o as p,ag as l}from"./chunks/framework.D-6U7MZ9.js";const C=JSON.parse('{"title":"headers 模块单元测试","description":"","frontmatter":{},"headers":[],"relativePath":"typescript/chapter11/headers.md","filePath":"typescript/chapter11/headers.md","lastUpdated":1578475296000}'),e={name:"typescript/chapter11/headers.md"};function o(r,s,c,t,A,y){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="headers-模块单元测试" tabindex="-1">headers 模块单元测试 <a class="header-anchor" href="#headers-模块单元测试" aria-label="Permalink to &quot;headers 模块单元测试&quot;">​</a></h1><p>之前我们测试了 <code>headers</code> 的基础方法模块，接下来我们会从业务角度测试 <code>headers</code> 的相关业务逻辑。</p><h2 id="测试代码编写" tabindex="-1">测试代码编写 <a class="header-anchor" href="#测试代码编写" aria-label="Permalink to &quot;测试代码编写&quot;">​</a></h2><p><code>test/headers.spec.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">import</span><span style="color:#D3C6AA;"> axios </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;../src/index&#39;</span></span>
<span class="line"><span style="color:#D699B6;">import</span><span style="color:#D3C6AA;"> { getAjaxRequest } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;./helper&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> testHeaderValue</span><span style="color:#D3C6AA;">(headers</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> key</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> val</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> void</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  let</span><span style="color:#D3C6AA;"> found</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">  for</span><span style="color:#D3C6AA;"> (</span><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> k</span><span style="color:#E67E80;"> in</span><span style="color:#D3C6AA;"> headers)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    if</span><span style="color:#D3C6AA;"> (k</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toLowerCase</span><span style="color:#D3C6AA;">()</span><span style="color:#E69875;"> ===</span><span style="color:#D3C6AA;"> key</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toLowerCase</span><span style="color:#D3C6AA;">())</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">      found</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> true</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(headers[k])</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(val)</span></span>
<span class="line"><span style="color:#E67E80;">      break</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">  if</span><span style="color:#D3C6AA;"> (</span><span style="color:#E69875;">!</span><span style="color:#D3C6AA;">found)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    if</span><span style="color:#D3C6AA;"> (</span><span style="color:#E67E80;">typeof</span><span style="color:#D3C6AA;"> val</span><span style="color:#E69875;"> ===</span><span style="color:#DBBC7F;"> &#39;undefined&#39;</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(headers</span><span style="color:#859289;">.</span><span style="color:#A7C080;">hasOwnProperty</span><span style="color:#D3C6AA;">(key))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBeFalsy</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span><span style="color:#E67E80;"> else</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">      throw</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> Error</span><span style="color:#D3C6AA;">(key</span><span style="color:#E69875;"> +</span><span style="color:#DBBC7F;"> &#39; was not found in headers&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">describe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;headers&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">  beforeEach</span><span style="color:#D3C6AA;">(() </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    jasmine</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">Ajax</span><span style="color:#859289;">.</span><span style="color:#A7C080;">install</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  afterEach</span><span style="color:#D3C6AA;">(() </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    jasmine</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">Ajax</span><span style="color:#859289;">.</span><span style="color:#A7C080;">uninstall</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should use default common headers&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">    const</span><span style="color:#D3C6AA;"> headers </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> axios</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">defaults</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">headers</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">common</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">    axios</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/foo&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#A7C080;"> getAjaxRequest</span><span style="color:#D3C6AA;">()</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(request </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">      for</span><span style="color:#D3C6AA;"> (</span><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> key </span><span style="color:#E67E80;">in</span><span style="color:#D3C6AA;"> headers) {</span></span>
<span class="line"><span style="color:#E67E80;">        if</span><span style="color:#D3C6AA;"> (headers</span><span style="color:#859289;">.</span><span style="color:#A7C080;">hasOwnProperty</span><span style="color:#D3C6AA;">(key)) {</span></span>
<span class="line"><span style="color:#A7C080;">          expect</span><span style="color:#D3C6AA;">(request</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">requestHeaders[key])</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toEqual</span><span style="color:#D3C6AA;">(headers[key])</span></span>
<span class="line"><span style="color:#D3C6AA;">        }</span></span>
<span class="line"><span style="color:#D3C6AA;">      }</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should add extra headers for post&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    axios</span><span style="color:#859289;">.</span><span style="color:#A7C080;">post</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/foo&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;fizz=buzz&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#A7C080;"> getAjaxRequest</span><span style="color:#D3C6AA;">()</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(request </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">      testHeaderValue</span><span style="color:#D3C6AA;">(request</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">requestHeaders, </span><span style="color:#DBBC7F;">&#39;Content-Type&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;application/x-www-form-urlencoded&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should use application/json when posting an object&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    axios</span><span style="color:#859289;">.</span><span style="color:#A7C080;">post</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/foo/bar&#39;</span><span style="color:#D3C6AA;">, {</span></span>
<span class="line"><span style="color:#D3C6AA;">      firstName</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;foo&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">      lastName</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;bar&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#A7C080;"> getAjaxRequest</span><span style="color:#D3C6AA;">()</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(request </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">      testHeaderValue</span><span style="color:#D3C6AA;">(request</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">requestHeaders, </span><span style="color:#DBBC7F;">&#39;Content-Type&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;application/json;charset=utf-8&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should remove content-type if data is empty&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    axios</span><span style="color:#859289;">.</span><span style="color:#A7C080;">post</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/foo&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#A7C080;"> getAjaxRequest</span><span style="color:#D3C6AA;">()</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(request </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">      testHeaderValue</span><span style="color:#D3C6AA;">(request</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">requestHeaders, </span><span style="color:#DBBC7F;">&#39;Content-Type&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">undefined</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  it</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should preserve content-type if data is false&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    axios</span><span style="color:#859289;">.</span><span style="color:#A7C080;">post</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/foo&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">false</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#A7C080;"> getAjaxRequest</span><span style="color:#D3C6AA;">()</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(request </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">      testHeaderValue</span><span style="color:#D3C6AA;">(request</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">requestHeaders, </span><span style="color:#DBBC7F;">&#39;Content-Type&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;application/x-www-form-urlencoded&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should remove content-type if data is FormData&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">    const</span><span style="color:#D3C6AA;"> data </span><span style="color:#E69875;">=</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> FormData</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#D3C6AA;">    data</span><span style="color:#859289;">.</span><span style="color:#A7C080;">append</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;foo&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;bar&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">    axios</span><span style="color:#859289;">.</span><span style="color:#A7C080;">post</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/foo&#39;</span><span style="color:#D3C6AA;">, data)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#A7C080;"> getAjaxRequest</span><span style="color:#D3C6AA;">()</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(request </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">      testHeaderValue</span><span style="color:#D3C6AA;">(request</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">requestHeaders, </span><span style="color:#DBBC7F;">&#39;Content-Type&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">undefined</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br></div></div><p>内部定义了 <code>testHeaderValue</code> 辅助函数，用于测试 <code>headers</code> 是否存在某个 <code>header name</code> 下的某个值。</p><p>至此我们完成了 <code>ts-axios</code> 库 <code>headers</code> 模块相关业务逻辑的测试，下一节课我们会对 <code>Axios</code> 的实例做测试。</p>`,7)]))}const D=n(e,[["render",o]]);export{C as __pageData,D as default};
