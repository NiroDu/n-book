import{_ as n,c as a,o as p,ag as e}from"./chunks/framework.D-6U7MZ9.js";const d=JSON.parse('{"title":"处理响应 header","description":"","frontmatter":{},"headers":[],"relativePath":"typescript/chapter4/response-header.md","filePath":"typescript/chapter4/response-header.md","lastUpdated":1562065220000}'),l={name:"typescript/chapter4/response-header.md"};function o(r,s,c,t,i,y){return p(),a("div",null,s[0]||(s[0]=[e(`<h1 id="处理响应-header" tabindex="-1">处理响应 header <a class="header-anchor" href="#处理响应-header" aria-label="Permalink to &quot;处理响应 header&quot;">​</a></h1><h2 id="需求分析" tabindex="-1">需求分析 <a class="header-anchor" href="#需求分析" aria-label="Permalink to &quot;需求分析&quot;">​</a></h2><p>我们通过 <code>XMLHttpRequest</code> 对象的 <code>getAllResponseHeaders</code> 方法获取到的值是如下一段字符串：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span>date: Fri, 05 Apr 2019 12:40:49 GMT</span></span>
<span class="line"><span>etag: W/&quot;d-Ssxx4FRxEutDLwo2+xkkxKc4y0k&quot;</span></span>
<span class="line"><span>connection: keep-alive</span></span>
<span class="line"><span>x-powered-by: Express</span></span>
<span class="line"><span>content-length: 13</span></span>
<span class="line"><span>content-type: application/json; charset=utf-8</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>每一行都是以回车符和换行符 <code>\\r\\n</code> 结束，它们是每个 <code>header</code> 属性的分隔符。对于上面这串字符串，我们希望最终解析成一个对象结构：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">{</span></span>
<span class="line"><span style="color:#D3C6AA;">  date</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> &#39;Fri</span><span style="color:#859289;">,</span><span style="color:#D3C6AA;"> 05 Apr 2019 12</span><span style="color:#859289;">:</span><span style="color:#D699B6;">40</span><span style="color:#D3C6AA;">:</span><span style="color:#D699B6;">49</span><span style="color:#D3C6AA;"> GMT&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">  etag: &#39;W/</span><span style="color:#859289;">&quot;</span><span style="color:#A7C080;">d-Ssxx4FRxEutDLwo2+xkkxKc4y0k</span><span style="color:#859289;">&quot;</span><span style="color:#D3C6AA;">&#39;</span><span style="color:#859289;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  connection</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> &#39;keep-alive&#39;</span><span style="color:#859289;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  &#39;x-powered-by&#39;</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> &#39;Express&#39;</span><span style="color:#859289;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  &#39;content-length&#39;</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> &#39;</span><span style="color:#D699B6;">13</span><span style="color:#D3C6AA;">&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">  &#39;content-type&#39;: &#39;application/json; charset=utf</span><span style="color:#D699B6;">-8</span><span style="color:#D3C6AA;">&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="parseheaders-函数实现及应用" tabindex="-1">parseHeaders 函数实现及应用 <a class="header-anchor" href="#parseheaders-函数实现及应用" aria-label="Permalink to &quot;parseHeaders 函数实现及应用&quot;">​</a></h2><p>根据需求分析，我们要实现一个 <code>parseHeaders</code> 工具函数。</p><p><code>helpers/headers.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> function</span><span style="color:#A7C080;"> parseHeaders</span><span style="color:#D3C6AA;">(headers</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  let</span><span style="color:#D3C6AA;"> parsed</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> Object</span><span style="color:#859289;">.</span><span style="color:#A7C080;">create</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">null</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#E67E80;">  if</span><span style="color:#D3C6AA;"> (</span><span style="color:#E69875;">!</span><span style="color:#D3C6AA;">headers)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> parsed</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">  headers</span><span style="color:#859289;">.</span><span style="color:#A7C080;">split</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;</span><span style="color:#A7C080;">\\r\\n</span><span style="color:#DBBC7F;">&#39;</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">forEach</span><span style="color:#D3C6AA;">(line</span><span style="color:#E69875;"> =&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">    let</span><span style="color:#D3C6AA;"> [key,</span><span style="color:#D3C6AA;"> val]</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> line</span><span style="color:#859289;">.</span><span style="color:#A7C080;">split</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;:&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">    key</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> key</span><span style="color:#859289;">.</span><span style="color:#A7C080;">trim</span><span style="color:#D3C6AA;">()</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toLowerCase</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#E67E80;">    if</span><span style="color:#D3C6AA;"> (</span><span style="color:#E69875;">!</span><span style="color:#D3C6AA;">key)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">      return</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#E67E80;">    if</span><span style="color:#D3C6AA;"> (val)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">      val</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> val</span><span style="color:#859289;">.</span><span style="color:#A7C080;">trim</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">    parsed[key]</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> val</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> parsed</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>然后我们使用这个工具函数：</p><p><code>xhr.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> responseHeaders </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> parseHeaders</span><span style="color:#D3C6AA;">(request</span><span style="color:#859289;">.</span><span style="color:#A7C080;">getAllResponseHeaders</span><span style="color:#D3C6AA;">())</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>接着我们再去看刚才的 demo，发现我们已经把响应的 <code>headers</code> 字段从字符串解析成对象结构了。那么接下来，我们在解决之前遗留的第二个问题：对响应 <code>data</code> 字段的处理。</p>`,14)]))}const b=n(l,[["render",o]]);export{d as __pageData,b as default};
