import{_ as n,c as a,o as p,ag as l}from"./chunks/framework.D-6U7MZ9.js";const i=JSON.parse('{"title":"辅助模块单元测试","description":"","frontmatter":{},"headers":[],"relativePath":"typescript/chapter11/helpers.md","filePath":"typescript/chapter11/helpers.md","lastUpdated":1578475296000}'),e={name:"typescript/chapter11/helpers.md"};function o(r,s,c,t,A,y){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="辅助模块单元测试" tabindex="-1">辅助模块单元测试 <a class="header-anchor" href="#辅助模块单元测试" aria-label="Permalink to &quot;辅助模块单元测试&quot;">​</a></h1><h2 id="准备工作" tabindex="-1">准备工作 <a class="header-anchor" href="#准备工作" aria-label="Permalink to &quot;准备工作&quot;">​</a></h2><p>通常我们会优先为一个库的辅助方法编写测试，我们会优先为 <code>ts-axios</code> 库的 <code>helpers</code> 目录下的模块编写测试。我们在 <code>test</code> 目录下创建一个 <code>helpers</code> 目录，创建一个 <code>boot.ts</code> 空文件，这个是因为我们上节课给 Jest 配置了 <code>setupFilesAfterEnv</code> 指向了这个文件，后面的章节我们会编写这个文件。</p><p>然后我们可以在控制台运行 <code>npm test</code>，它实际上是执行了 <code>jest --coverage</code> 来跑单元测试，我们会发现它会报错，没有匹配的测试文件，那是因为我们还没有在 <code>test</code> 目录下编写任何一个 .spec.ts 结尾的测试文件。接下来我们就来为这些辅助模块编写相应的测试。</p><h2 id="util-模块测试" tabindex="-1">util 模块测试 <a class="header-anchor" href="#util-模块测试" aria-label="Permalink to &quot;util 模块测试&quot;">​</a></h2><p><code>test/helpers/util.spec.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">import</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  isDate,</span></span>
<span class="line"><span style="color:#D3C6AA;">  isPlainObject,</span></span>
<span class="line"><span style="color:#D3C6AA;">  isFormData,</span></span>
<span class="line"><span style="color:#D3C6AA;">  isURLSearchParams,</span></span>
<span class="line"><span style="color:#D3C6AA;">  extend,</span></span>
<span class="line"><span style="color:#D3C6AA;">  deepMerge</span></span>
<span class="line"><span style="color:#D3C6AA;">} </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;../../src/helpers/util&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">describe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;helpers:util&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">  describe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;isXX&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should validate Date&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">isDate</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">new</span><span style="color:#A7C080;"> Date</span><span style="color:#D3C6AA;">()))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBeTruthy</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">isDate</span><span style="color:#D3C6AA;">(Date</span><span style="color:#859289;">.</span><span style="color:#A7C080;">now</span><span style="color:#D3C6AA;">()))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBeFalsy</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should validate PlainObject&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">isPlainObject</span><span style="color:#D3C6AA;">({}))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBeTruthy</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">isPlainObject</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">new</span><span style="color:#A7C080;"> Date</span><span style="color:#D3C6AA;">()))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBeFalsy</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should validate FormData&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">isFormData</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">new</span><span style="color:#A7C080;"> FormData</span><span style="color:#D3C6AA;">()))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBeTruthy</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">isFormData</span><span style="color:#D3C6AA;">({}))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBeFalsy</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should validate URLSearchParams&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">isURLSearchParams</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">new</span><span style="color:#A7C080;"> URLSearchParams</span><span style="color:#D3C6AA;">()))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBeTruthy</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">isURLSearchParams</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;foo=1&amp;bar=2&#39;</span><span style="color:#D3C6AA;">))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBeFalsy</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  describe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;extend&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should be mutable&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> a </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> Object</span><span style="color:#859289;">.</span><span style="color:#A7C080;">create</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">null</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> b </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> { foo</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 123</span><span style="color:#D3C6AA;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">      extend</span><span style="color:#D3C6AA;">(a, b)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(a</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">foo)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">123</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should extend properties&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> a</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> {</span><span style="color:#D3C6AA;"> foo</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 123</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> bar</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 456</span><span style="color:#D3C6AA;"> }</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> b</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> {</span><span style="color:#D3C6AA;"> bar</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 789</span><span style="color:#D3C6AA;"> }</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> c</span><span style="color:#E69875;"> =</span><span style="color:#A7C080;"> extend</span><span style="color:#D3C6AA;">(a,</span><span style="color:#D3C6AA;"> b)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(c</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">foo)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">123</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(c</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">bar)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">789</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  describe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;deepMerge&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should be immutable&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> a </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> Object</span><span style="color:#859289;">.</span><span style="color:#A7C080;">create</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">null</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> b</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> { foo</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 123</span><span style="color:#D3C6AA;"> }</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> c</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> { bar</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 456</span><span style="color:#D3C6AA;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">      deepMerge</span><span style="color:#D3C6AA;">(a, b, c)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">typeof</span><span style="color:#D3C6AA;"> a</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">foo)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;undefined&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">typeof</span><span style="color:#D3C6AA;"> a</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">bar)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;undefined&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">typeof</span><span style="color:#D3C6AA;"> b</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">bar)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;undefined&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">typeof</span><span style="color:#D3C6AA;"> c</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">foo)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;undefined&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should deepMerge properties&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> a </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> { foo</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 123</span><span style="color:#D3C6AA;"> }</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> b </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> { bar</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 456</span><span style="color:#D3C6AA;"> }</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> c </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> { foo</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 789</span><span style="color:#D3C6AA;"> }</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> d </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> deepMerge</span><span style="color:#D3C6AA;">(a, b, c)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(d</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">foo)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">789</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(d</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">bar)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">456</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should deepMerge recursively&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> a</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> {</span><span style="color:#D3C6AA;"> foo</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span><span style="color:#D3C6AA;"> bar</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 123</span><span style="color:#D3C6AA;"> }</span><span style="color:#D3C6AA;"> }</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> b</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> {</span><span style="color:#D3C6AA;"> foo</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span><span style="color:#D3C6AA;"> baz</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 456</span><span style="color:#D3C6AA;"> },</span><span style="color:#D3C6AA;"> bar</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span><span style="color:#D3C6AA;"> qux</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 789</span><span style="color:#D3C6AA;"> }</span><span style="color:#D3C6AA;"> }</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> c</span><span style="color:#E69875;"> =</span><span style="color:#A7C080;"> deepMerge</span><span style="color:#D3C6AA;">(a,</span><span style="color:#D3C6AA;"> b)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(c)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toEqual</span><span style="color:#D3C6AA;">({</span></span>
<span class="line"><span style="color:#D3C6AA;">        foo</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">          bar</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 123</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">          baz</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 456</span></span>
<span class="line"><span style="color:#D3C6AA;">        },</span></span>
<span class="line"><span style="color:#D3C6AA;">        bar</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">          qux</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 789</span></span>
<span class="line"><span style="color:#D3C6AA;">        }</span></span>
<span class="line"><span style="color:#D3C6AA;">      })</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should remove all references from nested objects&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> a </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> { foo</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> { bar</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 123</span><span style="color:#D3C6AA;"> } }</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> b </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {}</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> c </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> deepMerge</span><span style="color:#D3C6AA;">(a, b)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(c)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toEqual</span><span style="color:#D3C6AA;">({</span></span>
<span class="line"><span style="color:#D3C6AA;">        foo</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">          bar</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 123</span></span>
<span class="line"><span style="color:#D3C6AA;">        }</span></span>
<span class="line"><span style="color:#D3C6AA;">      })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(c</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">foo)</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">not</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(a</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">foo)</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should handle null and undefined arguments&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">deepMerge</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">undefined</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">undefined</span><span style="color:#D3C6AA;">))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toEqual</span><span style="color:#D3C6AA;">({})</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">deepMerge</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">undefined</span><span style="color:#D3C6AA;">, { foo</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 123</span><span style="color:#D3C6AA;"> }))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toEqual</span><span style="color:#D3C6AA;">({ foo</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 123</span><span style="color:#D3C6AA;"> })</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">deepMerge</span><span style="color:#D3C6AA;">({ foo</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 123</span><span style="color:#D3C6AA;"> }, </span><span style="color:#D699B6;">undefined</span><span style="color:#D3C6AA;">))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toEqual</span><span style="color:#D3C6AA;">({ foo</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 123</span><span style="color:#D3C6AA;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">deepMerge</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">null</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">null</span><span style="color:#D3C6AA;">))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toEqual</span><span style="color:#D3C6AA;">({})</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">deepMerge</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">null</span><span style="color:#D3C6AA;">, { foo</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 123</span><span style="color:#D3C6AA;"> }))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toEqual</span><span style="color:#D3C6AA;">({ foo</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 123</span><span style="color:#D3C6AA;"> })</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">deepMerge</span><span style="color:#D3C6AA;">({ foo</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 123</span><span style="color:#D3C6AA;"> }, </span><span style="color:#D699B6;">null</span><span style="color:#D3C6AA;">))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toEqual</span><span style="color:#D3C6AA;">({ foo</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 123</span><span style="color:#D3C6AA;"> })</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br></div></div><p>其中 <a href="https://jestjs.io/docs/en/api#describename-fn" target="_blank" rel="noreferrer"><code>describe</code></a> 方法用来定义一组测试，它可以支持嵌套，<a href="https://jestjs.io/docs/en/api#testname-fn-timeout" target="_blank" rel="noreferrer"><code>test</code></a> 函数是用来定义单个测试用例，它是测试的最小单元。<a href="https://jestjs.io/docs/en/expect#expectvalue" target="_blank" rel="noreferrer"><code>expect</code></a> 是断言函数，所谓&quot;断言&quot;，就是判断代码的实际执行结果与预期结果是否一致，如果不一致就抛出一个错误。</p><p>测试文件编写好后，我们可以去控制台运行一次 <code>npm test</code>，看一下测试结果，我们可以看跑了几个测试文件，测试是否通过，测试覆盖率等。</p><h2 id="cookie-模块测试" tabindex="-1">cookie 模块测试 <a class="header-anchor" href="#cookie-模块测试" aria-label="Permalink to &quot;cookie 模块测试&quot;">​</a></h2><p><code>test/helpers/cookie.spec.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">import</span><span style="color:#D3C6AA;"> cookie </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;../../src/helpers/cookie&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">describe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;helpers:cookie&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">  test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should read cookies&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    document</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">cookie </span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;"> &#39;foo=baz&#39;</span></span>
<span class="line"><span style="color:#A7C080;">    expect</span><span style="color:#D3C6AA;">(cookie</span><span style="color:#859289;">.</span><span style="color:#A7C080;">read</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;foo&#39;</span><span style="color:#D3C6AA;">))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;baz&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should return null if cookie name is not exist&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    document</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">cookie </span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;"> &#39;foo=baz&#39;</span></span>
<span class="line"><span style="color:#A7C080;">    expect</span><span style="color:#D3C6AA;">(cookie</span><span style="color:#859289;">.</span><span style="color:#A7C080;">read</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;bar&#39;</span><span style="color:#D3C6AA;">))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBeNull</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>这里我们可以通过 <code>document.cookie</code> 去设置 cookie，就像在浏览器里一样操作。</p><h2 id="data-模块测试" tabindex="-1">data 模块测试 <a class="header-anchor" href="#data-模块测试" aria-label="Permalink to &quot;data 模块测试&quot;">​</a></h2><p><code>test/helpers/data.spec.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">import</span><span style="color:#D3C6AA;"> { transformRequest, transformResponse } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;../../src/helpers/data&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">describe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;helpers:data&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">  describe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;transformRequest&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should transform request data to string if data is a PlainObject&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> a </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> { a</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 1</span><span style="color:#D3C6AA;"> }</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">transformRequest</span><span style="color:#D3C6AA;">(a))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;{&quot;a&quot;:1}&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should do nothing if data is not a PlainObject&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> a </span><span style="color:#E69875;">=</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> URLSearchParams</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;a=b&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">transformRequest</span><span style="color:#D3C6AA;">(a))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(a)</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  describe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;transformResponse&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should transform response data to Object if data is a JSON string&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> a </span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;"> &#39;{&quot;a&quot;: 2}&#39;</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">transformResponse</span><span style="color:#D3C6AA;">(a))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toEqual</span><span style="color:#D3C6AA;">({ a</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 2</span><span style="color:#D3C6AA;"> })</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should do nothing if data is a string but not a JSON string&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> a </span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;"> &#39;{a: 2}&#39;</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">transformResponse</span><span style="color:#D3C6AA;">(a))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;{a: 2}&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should do nothing if data is not a string&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> a </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> { a</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 2</span><span style="color:#D3C6AA;"> }</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">transformResponse</span><span style="color:#D3C6AA;">(a))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(a)</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h2 id="error-模块测试" tabindex="-1">error 模块测试 <a class="header-anchor" href="#error-模块测试" aria-label="Permalink to &quot;error 模块测试&quot;">​</a></h2><p><code>test/helpers/error.spec.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">import</span><span style="color:#D3C6AA;"> { createError } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;../../src/helpers/error&#39;</span></span>
<span class="line"><span style="color:#D699B6;">import</span><span style="color:#D3C6AA;"> { AxiosRequestConfig, AxiosResponse } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;../../src/types&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">describe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;helpers::error&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">  test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should create an Error with message, config, code, request, response and isAxiosError&#39;</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> ()</span><span style="color:#E69875;"> =&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">    const</span><span style="color:#D3C6AA;"> request</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> XMLHttpRequest</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#E69875;">    const</span><span style="color:#D3C6AA;"> config</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> {</span><span style="color:#D3C6AA;"> method</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;post&#39;</span><span style="color:#D3C6AA;"> }</span></span>
<span class="line"><span style="color:#E69875;">    const</span><span style="color:#D3C6AA;"> response</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosResponse</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">      status</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 200</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">      statusText</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;OK&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">      headers</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> null</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">      request,</span></span>
<span class="line"><span style="color:#D3C6AA;">      config,</span></span>
<span class="line"><span style="color:#D3C6AA;">      data</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span><span style="color:#D3C6AA;"> foo</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;bar&#39;</span><span style="color:#D3C6AA;"> }</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#E69875;">    const</span><span style="color:#D3C6AA;"> error</span><span style="color:#E69875;"> =</span><span style="color:#A7C080;"> createError</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;Boom!&#39;</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> config,</span><span style="color:#DBBC7F;"> &#39;SOMETHING&#39;</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> request,</span><span style="color:#D3C6AA;"> response)</span></span>
<span class="line"><span style="color:#A7C080;">    expect</span><span style="color:#D3C6AA;">(error</span><span style="color:#E67E80;"> instanceof</span><span style="color:#83C092;"> Error</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBeTruthy</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#A7C080;">    expect</span><span style="color:#D3C6AA;">(error</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">message)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;Boom!&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#A7C080;">    expect</span><span style="color:#D3C6AA;">(error</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">config)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(config)</span></span>
<span class="line"><span style="color:#A7C080;">    expect</span><span style="color:#D3C6AA;">(error</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">code)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;SOMETHING&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#A7C080;">    expect</span><span style="color:#D3C6AA;">(error</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">request)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(request)</span></span>
<span class="line"><span style="color:#A7C080;">    expect</span><span style="color:#D3C6AA;">(error</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">response)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(response)</span></span>
<span class="line"><span style="color:#A7C080;">    expect</span><span style="color:#D3C6AA;">(error</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">isAxiosError)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBeTruthy</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>该模块跑完我们会发现，分支覆盖率是在 <code>50%</code>，因为第十七行代码</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">super</span><span style="color:#D3C6AA;">(message)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这个是 <code>super</code> 继承对测试覆盖率支持的坑，目前没有好的解决方案，可以先忽略。</p><h2 id="headers-模块测试" tabindex="-1">headers 模块测试 <a class="header-anchor" href="#headers-模块测试" aria-label="Permalink to &quot;headers 模块测试&quot;">​</a></h2><p><code>test/helpers/headers.spec.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">import</span><span style="color:#D3C6AA;"> { parseHeaders, processHeaders, flattenHeaders } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;../../src/helpers/headers&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">describe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;helpers:header&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">  describe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;parseHeaders&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should parse headers&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> parsed </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> parseHeaders</span><span style="color:#D3C6AA;">(</span></span>
<span class="line"><span style="color:#DBBC7F;">        &#39;Content-Type: application/json</span><span style="color:#A7C080;">\\r\\n</span><span style="color:#DBBC7F;">&#39;</span><span style="color:#E69875;"> +</span></span>
<span class="line"><span style="color:#DBBC7F;">          &#39;Connection: keep-alive</span><span style="color:#A7C080;">\\r\\n</span><span style="color:#DBBC7F;">&#39;</span><span style="color:#E69875;"> +</span></span>
<span class="line"><span style="color:#DBBC7F;">          &#39;Transfer-Encoding: chunked</span><span style="color:#A7C080;">\\r\\n</span><span style="color:#DBBC7F;">&#39;</span><span style="color:#E69875;"> +</span></span>
<span class="line"><span style="color:#DBBC7F;">          &#39;Date: Tue, 21 May 2019 09:23:44 GMT</span><span style="color:#A7C080;">\\r\\n</span><span style="color:#DBBC7F;">&#39;</span><span style="color:#E69875;"> +</span></span>
<span class="line"><span style="color:#DBBC7F;">          &#39;:aa</span><span style="color:#A7C080;">\\r\\n</span><span style="color:#DBBC7F;">&#39;</span><span style="color:#E69875;"> +</span></span>
<span class="line"><span style="color:#DBBC7F;">          &#39;key:&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">      )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(parsed[</span><span style="color:#DBBC7F;">&#39;content-type&#39;</span><span style="color:#D3C6AA;">])</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;application/json&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(parsed[</span><span style="color:#DBBC7F;">&#39;connection&#39;</span><span style="color:#D3C6AA;">])</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;keep-alive&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(parsed[</span><span style="color:#DBBC7F;">&#39;transfer-encoding&#39;</span><span style="color:#D3C6AA;">])</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;chunked&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(parsed[</span><span style="color:#DBBC7F;">&#39;date&#39;</span><span style="color:#D3C6AA;">])</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;Tue, 21 May 2019 09:23:44 GMT&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(parsed[</span><span style="color:#DBBC7F;">&#39;key&#39;</span><span style="color:#D3C6AA;">])</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should return empty object if headers is empty string&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">parseHeaders</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;&#39;</span><span style="color:#D3C6AA;">))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toEqual</span><span style="color:#D3C6AA;">({})</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  describe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;processHeaders&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should normalize Content-Type header name&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> headers</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#DBBC7F;">        &#39;conTenT-Type&#39;</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;foo/bar&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#DBBC7F;">        &#39;Content-length&#39;</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 1024</span></span>
<span class="line"><span style="color:#D3C6AA;">      }</span></span>
<span class="line"><span style="color:#A7C080;">      processHeaders</span><span style="color:#D3C6AA;">(headers, {})</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(headers[</span><span style="color:#DBBC7F;">&#39;Content-Type&#39;</span><span style="color:#D3C6AA;">])</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;foo/bar&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(headers[</span><span style="color:#DBBC7F;">&#39;conTenT-Type&#39;</span><span style="color:#D3C6AA;">])</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBeUndefined</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(headers[</span><span style="color:#DBBC7F;">&#39;Content-length&#39;</span><span style="color:#D3C6AA;">])</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">1024</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should set Content-Type if not set and data is PlainObject&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> headers</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> {}</span></span>
<span class="line"><span style="color:#A7C080;">      processHeaders</span><span style="color:#D3C6AA;">(headers, { a</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 1</span><span style="color:#D3C6AA;"> })</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(headers[</span><span style="color:#DBBC7F;">&#39;Content-Type&#39;</span><span style="color:#D3C6AA;">])</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;application/json;charset=utf-8&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should set not Content-Type if not set and data is not PlainObject&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> headers</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> {}</span></span>
<span class="line"><span style="color:#A7C080;">      processHeaders</span><span style="color:#D3C6AA;">(headers, </span><span style="color:#E67E80;">new</span><span style="color:#A7C080;"> URLSearchParams</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;a=b&#39;</span><span style="color:#D3C6AA;">))</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(headers[</span><span style="color:#DBBC7F;">&#39;Content-Type&#39;</span><span style="color:#D3C6AA;">])</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBeUndefined</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should do nothing if headers is undefined or null&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">processHeaders</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">undefined</span><span style="color:#D3C6AA;">, {}))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBeUndefined</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">processHeaders</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">null</span><span style="color:#D3C6AA;">, {}))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBeNull</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  describe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;flattenHeaders&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should flatten the headers and include common headers&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> headers </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">        Accept</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;application/json&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">        common</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#DBBC7F;">          &#39;X-COMMON-HEADER&#39;</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;commonHeaderValue&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">        },</span></span>
<span class="line"><span style="color:#D3C6AA;">        get</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#DBBC7F;">          &#39;X-GET-HEADER&#39;</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;getHeaderValue&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">        },</span></span>
<span class="line"><span style="color:#D3C6AA;">        post</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#DBBC7F;">          &#39;X-POST-HEADER&#39;</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;postHeaderValue&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">        }</span></span>
<span class="line"><span style="color:#D3C6AA;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">flattenHeaders</span><span style="color:#D3C6AA;">(headers, </span><span style="color:#DBBC7F;">&#39;get&#39;</span><span style="color:#D3C6AA;">))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toEqual</span><span style="color:#D3C6AA;">({</span></span>
<span class="line"><span style="color:#D3C6AA;">        Accept</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;application/json&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#DBBC7F;">        &#39;X-COMMON-HEADER&#39;</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;commonHeaderValue&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#DBBC7F;">        &#39;X-GET-HEADER&#39;</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;getHeaderValue&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">      })</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should flatten the headers without common headers&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> headers </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">        Accept</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;application/json&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">        get</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#DBBC7F;">          &#39;X-GET-HEADER&#39;</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;getHeaderValue&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">        }</span></span>
<span class="line"><span style="color:#D3C6AA;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">flattenHeaders</span><span style="color:#D3C6AA;">(headers, </span><span style="color:#DBBC7F;">&#39;patch&#39;</span><span style="color:#D3C6AA;">))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toEqual</span><span style="color:#D3C6AA;">({</span></span>
<span class="line"><span style="color:#D3C6AA;">        Accept</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;application/json&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">      })</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should do nothing if headers is undefined or null&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">flattenHeaders</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">undefined</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;get&#39;</span><span style="color:#D3C6AA;">))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBeUndefined</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">flattenHeaders</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">null</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;post&#39;</span><span style="color:#D3C6AA;">))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBeNull</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br></div></div><p>运行后，我们会发现 <code>parseHeaders</code> 测试组的 <code>should parse headers</code> 测试没通过，<code>expect(parsed[&#39;date&#39;]).toBe(&#39;Tue, 21 May 2019 09:23:44 GMT&#39;)</code> 我们期望解析后的 <code>date</code> 字段是 <code>Tue, 21 May 2019 09:23:44 GMT</code>，而实际的值是 <code>Tue, 21 May 2019 09</code>。</p><p>测试没通过，我们检查一下代码，发现我们 <code>parseHeaders</code> 的代码逻辑漏洞，我们只考虑了第一个 &quot;:&quot; 号，没考虑后半部分的字符串内部也可能有 &quot;:&quot;，按我们现有的逻辑就会把字符串中 &quot;:&quot; 后面部分都截断了。</p><p>因此我们修改 <code>parseHeaders</code> 的实现逻辑。</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> function</span><span style="color:#A7C080;"> parseHeaders</span><span style="color:#D3C6AA;">(headers</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  let</span><span style="color:#D3C6AA;"> parsed</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> Object</span><span style="color:#859289;">.</span><span style="color:#A7C080;">create</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">null</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#E67E80;">  if</span><span style="color:#D3C6AA;"> (</span><span style="color:#E69875;">!</span><span style="color:#D3C6AA;">headers)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> parsed</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">  headers</span><span style="color:#859289;">.</span><span style="color:#A7C080;">split</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;</span><span style="color:#A7C080;">\\r\\n</span><span style="color:#DBBC7F;">&#39;</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">forEach</span><span style="color:#D3C6AA;">(line</span><span style="color:#E69875;"> =&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">    let</span><span style="color:#D3C6AA;"> [key,</span><span style="color:#E69875;"> ...</span><span style="color:#D3C6AA;">vals]</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> line</span><span style="color:#859289;">.</span><span style="color:#A7C080;">split</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;:&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">    key</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> key</span><span style="color:#859289;">.</span><span style="color:#A7C080;">trim</span><span style="color:#D3C6AA;">()</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toLowerCase</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#E67E80;">    if</span><span style="color:#D3C6AA;"> (</span><span style="color:#E69875;">!</span><span style="color:#D3C6AA;">key)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">      return</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#E69875;">    let</span><span style="color:#D3C6AA;"> val</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> vals</span><span style="color:#859289;">.</span><span style="color:#A7C080;">join</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;:&#39;</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">trim</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#D3C6AA;">    parsed[key]</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> val</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> parsed</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>这样我们再重新跑测试，就会通过了。</p><h2 id="url-模块测试" tabindex="-1">url 模块测试 <a class="header-anchor" href="#url-模块测试" aria-label="Permalink to &quot;url 模块测试&quot;">​</a></h2><p><code>test/helpers/url.spec.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">import</span><span style="color:#D3C6AA;"> { buildURL, isAbsoluteURL, combineURL, isURLSameOrigin } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;../../src/helpers/url&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">describe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;helpers:url&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">  describe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;buildURL&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should support null params&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">buildURL</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/foo&#39;</span><span style="color:#D3C6AA;">))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/foo&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should support params&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span></span>
<span class="line"><span style="color:#A7C080;">        buildURL</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/foo&#39;</span><span style="color:#D3C6AA;">, {</span></span>
<span class="line"><span style="color:#D3C6AA;">          foo</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;bar&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">        })</span></span>
<span class="line"><span style="color:#D3C6AA;">      )</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/foo?foo=bar&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should ignore if some param value is null&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span></span>
<span class="line"><span style="color:#A7C080;">        buildURL</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/foo&#39;</span><span style="color:#D3C6AA;">, {</span></span>
<span class="line"><span style="color:#D3C6AA;">          foo</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;bar&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">          baz</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> null</span></span>
<span class="line"><span style="color:#D3C6AA;">        })</span></span>
<span class="line"><span style="color:#D3C6AA;">      )</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/foo?foo=bar&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should ignore if the only param value is null&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span></span>
<span class="line"><span style="color:#A7C080;">        buildURL</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/foo&#39;</span><span style="color:#D3C6AA;">, {</span></span>
<span class="line"><span style="color:#D3C6AA;">          baz</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> null</span></span>
<span class="line"><span style="color:#D3C6AA;">        })</span></span>
<span class="line"><span style="color:#D3C6AA;">      )</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/foo&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should support object params&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span></span>
<span class="line"><span style="color:#A7C080;">        buildURL</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/foo&#39;</span><span style="color:#D3C6AA;">, {</span></span>
<span class="line"><span style="color:#D3C6AA;">          foo</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">            bar</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;baz&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">          }</span></span>
<span class="line"><span style="color:#D3C6AA;">        })</span></span>
<span class="line"><span style="color:#D3C6AA;">      )</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/foo?foo=&#39;</span><span style="color:#E69875;"> +</span><span style="color:#A7C080;"> encodeURI</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;{&quot;bar&quot;:&quot;baz&quot;}&#39;</span><span style="color:#D3C6AA;">))</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should support date params&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> date </span><span style="color:#E69875;">=</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> Date</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span></span>
<span class="line"><span style="color:#A7C080;">        buildURL</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/foo&#39;</span><span style="color:#D3C6AA;">, {</span></span>
<span class="line"><span style="color:#D3C6AA;">          date</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> date</span></span>
<span class="line"><span style="color:#D3C6AA;">        })</span></span>
<span class="line"><span style="color:#D3C6AA;">      )</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/foo?date=&#39;</span><span style="color:#E69875;"> +</span><span style="color:#D3C6AA;"> date</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toISOString</span><span style="color:#D3C6AA;">())</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should support array params&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span></span>
<span class="line"><span style="color:#A7C080;">        buildURL</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/foo&#39;</span><span style="color:#D3C6AA;">, {</span></span>
<span class="line"><span style="color:#D3C6AA;">          foo</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span><span style="color:#DBBC7F;">&#39;bar&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;baz&#39;</span><span style="color:#D3C6AA;">]</span></span>
<span class="line"><span style="color:#D3C6AA;">        })</span></span>
<span class="line"><span style="color:#D3C6AA;">      )</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/foo?foo[]=bar&amp;foo[]=baz&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should support special char params&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span></span>
<span class="line"><span style="color:#A7C080;">        buildURL</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/foo&#39;</span><span style="color:#D3C6AA;">, {</span></span>
<span class="line"><span style="color:#D3C6AA;">          foo</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;@:$, &#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">        })</span></span>
<span class="line"><span style="color:#D3C6AA;">      )</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/foo?foo=@:$,+&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should support existing params&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span></span>
<span class="line"><span style="color:#A7C080;">        buildURL</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/foo?foo=bar&#39;</span><span style="color:#D3C6AA;">, {</span></span>
<span class="line"><span style="color:#D3C6AA;">          bar</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;baz&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">        })</span></span>
<span class="line"><span style="color:#D3C6AA;">      )</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/foo?foo=bar&amp;bar=baz&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should correct discard url hash mark&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span></span>
<span class="line"><span style="color:#A7C080;">        buildURL</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/foo?foo=bar#hash&#39;</span><span style="color:#D3C6AA;">, {</span></span>
<span class="line"><span style="color:#D3C6AA;">          query</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;baz&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">        })</span></span>
<span class="line"><span style="color:#D3C6AA;">      )</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/foo?foo=bar&amp;query=baz&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should use serializer if provided&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> serializer </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> jest</span><span style="color:#859289;">.</span><span style="color:#A7C080;">fn</span><span style="color:#D3C6AA;">(() </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">        return</span><span style="color:#DBBC7F;"> &#39;foo=bar&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">      })</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> params </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> { foo</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;bar&#39;</span><span style="color:#D3C6AA;"> }</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">buildURL</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/foo&#39;</span><span style="color:#D3C6AA;">, params, serializer))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/foo?foo=bar&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(serializer)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toHaveBeenCalled</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(serializer)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toHaveBeenCalledWith</span><span style="color:#D3C6AA;">(params)</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should support URLSearchParams&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">buildURL</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/foo&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#E67E80;">new</span><span style="color:#A7C080;"> URLSearchParams</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;bar=baz&#39;</span><span style="color:#D3C6AA;">)))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/foo?bar=baz&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  describe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;isAbsoluteURL&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should return true if URL begins with valid scheme name&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">isAbsoluteURL</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;https://api.github.com/users&#39;</span><span style="color:#D3C6AA;">))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBeTruthy</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">isAbsoluteURL</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;custom-scheme-v1.0://example.com/&#39;</span><span style="color:#D3C6AA;">))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBeTruthy</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">isAbsoluteURL</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;HTTP://example.com/&#39;</span><span style="color:#D3C6AA;">))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBeTruthy</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should return false if URL begins with invalid scheme name&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">isAbsoluteURL</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;123://example.com/&#39;</span><span style="color:#D3C6AA;">))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBeFalsy</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">isAbsoluteURL</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;!valid://example.com/&#39;</span><span style="color:#D3C6AA;">))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBeFalsy</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should return true if URL is protocol-relative&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">isAbsoluteURL</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;//example.com/&#39;</span><span style="color:#D3C6AA;">))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBeTruthy</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should return false if URL is relative&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">isAbsoluteURL</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/foo&#39;</span><span style="color:#D3C6AA;">))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBeFalsy</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">isAbsoluteURL</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;foo&#39;</span><span style="color:#D3C6AA;">))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBeFalsy</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  describe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;combineURL&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should combine URL&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">combineURL</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;https://api.github.com&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;/users&#39;</span><span style="color:#D3C6AA;">))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;https://api.github.com/users&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should remove duplicate slashes&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">combineURL</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;https://api.github.com/&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;/users&#39;</span><span style="color:#D3C6AA;">))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;https://api.github.com/users&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should insert missing slash&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">combineURL</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;https://api.github.com&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;users&#39;</span><span style="color:#D3C6AA;">))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;https://api.github.com/users&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should not insert slash when relative url missing/empty&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">combineURL</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;https://api.github.com/users&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;&#39;</span><span style="color:#D3C6AA;">))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;https://api.github.com/users&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should allow a single slash for relative url&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">combineURL</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;https://api.github.com/users&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;/&#39;</span><span style="color:#D3C6AA;">))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;https://api.github.com/users/&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  describe</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;isURLSameOrigin&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should detect same origin&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">isURLSameOrigin</span><span style="color:#D3C6AA;">(window</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">location</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">href))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBeTruthy</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">    test</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;should detect different origin&#39;</span><span style="color:#D3C6AA;">, () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">      expect</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">isURLSameOrigin</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;https://github.com/axios/axios&#39;</span><span style="color:#D3C6AA;">))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toBeFalsy</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br></div></div><p>这里要注意的是，我们使用了 <a href="https://jestjs.io/docs/en/jest-object#jestfnimplementation" target="_blank" rel="noreferrer"><code>jest.fn</code></a> 去模拟了一个函数，这个也是在编写 Jest 测试中非常常用的一个 API。</p><p>至此，我们就实现了 <code>ts-axios</code> 库 <code>helpers</code> 目录下所有模块的测试，并把该目录下的测试覆盖率达到了近乎 100% 的覆盖率。下面的章节我们就开始测试 <code>ts-axios</code> 的核心流程，针对不同的 <code>feature</code> 去编写单元测试了。</p>`,35)]))}const D=n(e,[["render",o]]);export{i as __pageData,D as default};
