import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.D-6U7MZ9.js";const C=JSON.parse('{"title":"响应数据支持泛型","description":"","frontmatter":{},"headers":[],"relativePath":"typescript/chapter6/generic.md","filePath":"typescript/chapter6/generic.md","lastUpdated":1562065220000}'),e={name:"typescript/chapter6/generic.md"};function o(r,s,c,t,y,i){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="响应数据支持泛型" tabindex="-1">响应数据支持泛型 <a class="header-anchor" href="#响应数据支持泛型" aria-label="Permalink to &quot;响应数据支持泛型&quot;">​</a></h1><h2 id="需求分析" tabindex="-1">需求分析 <a class="header-anchor" href="#需求分析" aria-label="Permalink to &quot;需求分析&quot;">​</a></h2><p>通常情况下，我们会把后端返回数据格式单独放入一个接口中：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// 请求接口数据</span></span>
<span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> interface</span><span style="color:#83C092;"> ResponseData</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#E69875;"> =</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">&gt; {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  /**</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">   * 状态码</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">   * </span><span style="color:#E67E80;font-style:italic;">@type</span><span style="color:#D3C6AA;font-style:italic;"> {</span><span style="color:#7FBBB3;font-style:italic;"> number </span><span style="color:#D3C6AA;font-style:italic;">}</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#D3C6AA;">  code</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">  /**</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">   * 数据</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">   * </span><span style="color:#E67E80;font-style:italic;">@type</span><span style="color:#D3C6AA;font-style:italic;"> {</span><span style="color:#7FBBB3;font-style:italic;"> T </span><span style="color:#D3C6AA;font-style:italic;">}</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#D3C6AA;">  result</span><span style="color:#859289;">:</span><span style="color:#83C092;"> T</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">  /**</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">   * 消息</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">   * </span><span style="color:#E67E80;font-style:italic;">@type</span><span style="color:#D3C6AA;font-style:italic;"> {</span><span style="color:#7FBBB3;font-style:italic;"> string </span><span style="color:#D3C6AA;font-style:italic;">}</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#D3C6AA;">  message</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>我们可以把 API 抽离成单独的模块：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">import</span><span style="color:#D3C6AA;"> { ResponseData } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;./interface.ts&#39;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> function</span><span style="color:#A7C080;"> getUser</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#D3C6AA;">&gt;()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> axios</span><span style="color:#859289;">.</span><span style="color:#A7C080;">get</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">ResponseData</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#D3C6AA;">&gt;&gt;(</span><span style="color:#DBBC7F;">&#39;/somepath&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#859289;">    .</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(res</span><span style="color:#E69875;"> =&gt;</span><span style="color:#D3C6AA;"> res</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">data)</span></span>
<span class="line"><span style="color:#859289;">    .</span><span style="color:#A7C080;">catch</span><span style="color:#D3C6AA;">(err</span><span style="color:#E69875;"> =&gt;</span><span style="color:#D3C6AA;"> console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">error</span><span style="color:#D3C6AA;">(err))</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>接着我们写入返回的数据类型 <code>User</code>，这可以让 TypeScript 顺利推断出我们想要的类型：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">interface</span><span style="color:#83C092;"> User</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  name</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span></span>
<span class="line"><span style="color:#D3C6AA;">  age</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">async</span><span style="color:#E67E80;"> function</span><span style="color:#A7C080;"> test</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // user 被推断出为</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  //  code: number,</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  //  result: { name: string, age: number },</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  //  message: string</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // }</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> user</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> await</span><span style="color:#A7C080;"> getUser</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">User</span><span style="color:#D3C6AA;">&gt;()</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="接口添加泛型参数" tabindex="-1">接口添加泛型参数 <a class="header-anchor" href="#接口添加泛型参数" aria-label="Permalink to &quot;接口添加泛型参数&quot;">​</a></h2><p>根据需求分析，我们需要给相关的接口定义添加泛型参数。</p><p><code>types/index.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> interface</span><span style="color:#83C092;"> AxiosResponse</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#E69875;"> =</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">&gt; {</span></span>
<span class="line"><span style="color:#D3C6AA;">  data</span><span style="color:#859289;">:</span><span style="color:#83C092;"> T</span></span>
<span class="line"><span style="color:#D3C6AA;">  status</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span></span>
<span class="line"><span style="color:#D3C6AA;">  statusText</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span></span>
<span class="line"><span style="color:#D3C6AA;">  headers</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span></span>
<span class="line"><span style="color:#D3C6AA;">  config</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span></span>
<span class="line"><span style="color:#D3C6AA;">  request</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> interface</span><span style="color:#83C092;"> AxiosPromise</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#E69875;"> =</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">&gt; </span><span style="color:#E69875;">extends</span><span style="color:#7FBBB3;"> Promise</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">AxiosResponse</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#D3C6AA;">&gt;&gt; {</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> interface</span><span style="color:#83C092;"> Axios</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">  request</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#E69875;"> =</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">&gt;(config</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosPromise</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#D3C6AA;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  get</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#E69875;"> =</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">&gt;(url</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">, config</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosPromise</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#D3C6AA;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  delete</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#E69875;"> =</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">&gt;(url</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">, config</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosPromise</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#D3C6AA;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  head</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#E69875;"> =</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">&gt;(url</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">, config</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosPromise</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#D3C6AA;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  options</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#E69875;"> =</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">&gt;(url</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">, config</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosPromise</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#D3C6AA;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  post</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#E69875;"> =</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">&gt;(url</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">, data</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">, config</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosPromise</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#D3C6AA;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  put</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#E69875;"> =</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">&gt;(url</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">, data</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">, config</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosPromise</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#D3C6AA;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  patch</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#E69875;"> =</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">&gt;(url</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">, data</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">, config</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosPromise</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#D3C6AA;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> interface</span><span style="color:#83C092;"> AxiosInstance</span><span style="color:#E69875;"> extends</span><span style="color:#83C092;"> Axios</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  &lt;</span><span style="color:#83C092;">T</span><span style="color:#E69875;"> =</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">&gt;(config</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosPromise</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#D3C6AA;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">  &lt;</span><span style="color:#83C092;">T</span><span style="color:#E69875;"> =</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">&gt;(url</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">, config</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosPromise</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#D3C6AA;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p>这里我们先给 <code>AxiosResponse</code> 接口添加了泛型参数 <code>T</code>，<code>T=any</code> 表示泛型的类型参数默认值为 <code>any</code>。</p><p>接着我们为 <code>AxiosPromise</code>、<code>Axios</code> 以及 <code>AxiosInstance</code> 接口都加上了泛型参数。我们可以看到这些请求的返回类型都变成了 <code>AxiosPromise&lt;T&gt;</code>，也就是 <code>Promise&lt;AxiosResponse&lt;T&gt;&gt;</code>，这样我们就可以从响应中拿到了类型 <code>T</code> 了。</p><h2 id="demo-编写" tabindex="-1">demo 编写 <a class="header-anchor" href="#demo-编写" aria-label="Permalink to &quot;demo 编写&quot;">​</a></h2><p><code>examples/extend/app.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">interface</span><span style="color:#83C092;"> ResponseData</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#E69875;"> =</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">&gt; {</span></span>
<span class="line"><span style="color:#D3C6AA;">  code</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span></span>
<span class="line"><span style="color:#D3C6AA;">  result</span><span style="color:#859289;">:</span><span style="color:#83C092;"> T</span></span>
<span class="line"><span style="color:#D3C6AA;">  message</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">interface</span><span style="color:#83C092;"> User</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  name</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span></span>
<span class="line"><span style="color:#D3C6AA;">  age</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> getUser</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#D3C6AA;">&gt;()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#A7C080;"> axios</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">ResponseData</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#D3C6AA;">&gt;&gt;(</span><span style="color:#DBBC7F;">&#39;/extend/user&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#859289;">    .</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(res</span><span style="color:#E69875;"> =&gt;</span><span style="color:#D3C6AA;"> res</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">data)</span></span>
<span class="line"><span style="color:#859289;">    .</span><span style="color:#A7C080;">catch</span><span style="color:#D3C6AA;">(err</span><span style="color:#E69875;"> =&gt;</span><span style="color:#D3C6AA;"> console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">error</span><span style="color:#D3C6AA;">(err))</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">async</span><span style="color:#E67E80;"> function</span><span style="color:#A7C080;"> test</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> user</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> await</span><span style="color:#A7C080;"> getUser</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">User</span><span style="color:#D3C6AA;">&gt;()</span></span>
<span class="line"><span style="color:#E67E80;">  if</span><span style="color:#D3C6AA;"> (user)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(user</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">result</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">name)</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">test</span><span style="color:#D3C6AA;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>当我们调用 <code>getUser&lt;User&gt;</code> 的时候，相当于调用了 <code>axios&lt;ResponseData&lt;User&gt;&gt;</code>，也就是我们传入给 <code>axios</code> 函数的类型 <code>T</code> 为 <code>ResponseData&lt;User&gt;</code>；相当于返回值 <code>AxiosPromise&lt;T&gt;</code> 的 <code>T</code>，实际上也是 <code>Promise&lt;AxiosResponse&lt;T&gt;&gt;</code> 中的 <code>T</code> 的类型是 <code>ResponseData&lt;User&gt;</code>，所以响应数据中的 <code>data</code> 类型就是 <code>ResponseData&lt;User&gt;</code>，也就是如下数据结构：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">{</span></span>
<span class="line"><span style="color:#D3C6AA;">  code</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> number</span></span>
<span class="line"><span style="color:#D3C6AA;">  result: User</span></span>
<span class="line"><span style="color:#D3C6AA;">  message: string</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这个也是 <code>const user = await getUser&lt;User&gt;()</code> 返回值 <code>user</code> 的数据类型，所以 TypeScript 能正确推断出 <code>user</code> 的类型。</p><p>至此，我们的 <code>ts-axios</code> 接口扩展章节就告一段落了，下一章我们来实现 <code>axios</code> 的一个非常好用的功能 —— 拦截器。</p>`,21)]))}const b=n(e,[["render",o]]);export{C as __pageData,b as default};
