import{_ as n,c as a,o as p,ag as l}from"./chunks/framework.D-6U7MZ9.js";const e="/n-book/assets/redux_data_flow.BEZSc6aG.png",o="/n-book/assets/redux_devtools.B13wDSWS.png",r="/n-book/assets/map_to_props_1.CtFVpEWj.png",t="/n-book/assets/map_to_props_2.DdV5MWA2.png",m=JSON.parse('{"title":"Redux 中级部分","description":"","frontmatter":{},"headers":[],"relativePath":"react/redux_intermediate.md","filePath":"react/redux_intermediate.md","lastUpdated":1544439154000}'),c={name:"react/redux_intermediate.md"};function i(y,s,A,u,d,b){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="redux-中级部分" tabindex="-1">Redux 中级部分 <a class="header-anchor" href="#redux-中级部分" aria-label="Permalink to &quot;Redux 中级部分&quot;">​</a></h1><h2 id="ui-组件和容器组件拆分" tabindex="-1">UI 组件和容器组件拆分 <a class="header-anchor" href="#ui-组件和容器组件拆分" aria-label="Permalink to &quot;UI 组件和容器组件拆分&quot;">​</a></h2><p>UI 组件负责页面的渲染，容器组件负责页面逻辑。</p><h2 id="无状态组件" tabindex="-1">无状态组件 <a class="header-anchor" href="#无状态组件" aria-label="Permalink to &quot;无状态组件&quot;">​</a></h2><p>一个组件，只有一个 render 函数，没有 state，那我们可以将其改写成 <strong>无状态组件</strong>。</p><p>无状态组件优点：性能好。一个无状态组件会比普通组件(class)少了生命周期等等状态。</p><p>原先的 UI 组件，可以改写成无状态组件。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">class</span><span style="color:#7FBBB3;"> TodoListUI</span><span style="color:#E69875;"> extends</span><span style="color:#7FBBB3;"> Component</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">  render</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> (</span></span>
<span class="line"><span style="color:#A7C080;">      &lt;</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">        &lt;</span><span style="color:#7FBBB3;">Input</span></span>
<span class="line"><span style="color:#A7C080;">          value</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">props</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">inputValue</span><span style="color:#A7C080;">}</span></span>
<span class="line"><span style="color:#A7C080;">          onChange</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">props</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">handleInputChange</span><span style="color:#A7C080;">}</span></span>
<span class="line"><span style="color:#A7C080;">        /&gt;</span></span>
<span class="line"><span style="color:#A7C080;">      &lt;/</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">    );</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>改写为无状态组件</p><ol><li>无状态组件实质就是一个函数，直接把类改成函数。</li><li>this.props 直接改为入参 props。</li></ol><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">const</span><span style="color:#A7C080;"> TodoListUI</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> props </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 解构赋值</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> { inputValue, handleInputChange } </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> props;</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> (</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">      &lt;</span><span style="color:#7FBBB3;">Input</span><span style="color:#A7C080;"> value</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">inputValue</span><span style="color:#A7C080;">}</span><span style="color:#A7C080;"> onChange</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">handleInputChange</span><span style="color:#A7C080;">}</span><span style="color:#A7C080;"> /&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;/</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">  );</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="redux-中发送异步请求获取数据" tabindex="-1">Redux 中发送异步请求获取数据 <a class="header-anchor" href="#redux-中发送异步请求获取数据" aria-label="Permalink to &quot;Redux 中发送异步请求获取数据&quot;">​</a></h2><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// /store/actionCreators.js</span></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E69875;"> const</span><span style="color:#A7C080;"> initListAction</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> data </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> ({</span></span>
<span class="line"><span style="color:#D3C6AA;">  type</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> INIT_LIST_ACTION,</span></span>
<span class="line"><span style="color:#D3C6AA;">  data</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// TodoList.js</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 这种异步操作放到组件里做是不推荐的，应该放到action里去统一管理</span></span>
<span class="line"><span style="color:#A7C080;">componentDidMount</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#D3C6AA;">	axios</span><span style="color:#859289;">.</span><span style="color:#A7C080;">get</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;/list.json&quot;</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(res </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">		const</span><span style="color:#D3C6AA;"> data </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> res</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">data;</span></span>
<span class="line"><span style="color:#E69875;">		const</span><span style="color:#D3C6AA;"> action </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> initListAction</span><span style="color:#D3C6AA;">(data);</span></span>
<span class="line"><span style="color:#D3C6AA;">		store</span><span style="color:#859289;">.</span><span style="color:#A7C080;">dispatch</span><span style="color:#D3C6AA;">(action);</span></span>
<span class="line"><span style="color:#D3C6AA;">	});</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// /store/reducer.js</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { INIT_LIST_ACTION } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;./constants&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E67E80;"> default</span><span style="color:#D3C6AA;"> (state </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> defaultState, action) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  if</span><span style="color:#D3C6AA;"> (action</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">type </span><span style="color:#E69875;">===</span><span style="color:#D3C6AA;"> INIT_LIST_ACTION) {</span></span>
<span class="line"><span style="color:#E69875;">    const</span><span style="color:#D3C6AA;"> newState </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> JSON</span><span style="color:#859289;">.</span><span style="color:#A7C080;">parse</span><span style="color:#D3C6AA;">(JSON</span><span style="color:#859289;">.</span><span style="color:#A7C080;">stringify</span><span style="color:#D3C6AA;">(state));</span></span>
<span class="line"><span style="color:#D3C6AA;">    newState</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">list </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> action</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">data;</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> newState;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="什么是-redux-的中间件" tabindex="-1">什么是 Redux 的中间件 <a class="header-anchor" href="#什么是-redux-的中间件" aria-label="Permalink to &quot;什么是 Redux 的中间件&quot;">​</a></h2><p><img src="`+e+'" alt="redux_data_flow"></p><p><strong>Redux 中间件，指的是 Action 和 Store 中间。</strong></p><p><strong>中间件实际上是对 dispatch 方法的一个封装或者说是升级。</strong></p><p>原始流程：dispatch 方法它接收到 action 的一个对象后，会把这个对象传递给 Store，再由 Store 自动传给 Reducer 处理。</p><p>例如用了 Redux-thunk 做中间件后，假如 action 是一个对象，那和原来一样会直接传给 Store；但假如 action 是个函数，则不会直接传递给 Store，而是先去执行这个函数的内容（拓展了额外的操作），然后再在这个函数中去 dispatch 给 Store，再由 Store 自动传给 Reducer 去处理。</p><h2 id="使用-redux-thunk-中间件实现-ajax-数据请求" tabindex="-1">使用 Redux-thunk 中间件实现 ajax 数据请求 <a class="header-anchor" href="#使用-redux-thunk-中间件实现-ajax-数据请求" aria-label="Permalink to &quot;使用 Redux-thunk 中间件实现 ajax 数据请求&quot;">​</a></h2><p>Redux 默认 action 只能是个对象。</p><p>Redux-thunk 使得 action 不仅仅是个对象，还可以是个函数。</p><p>Redux-thunk 建议的是把异步操作放到 action 里去操作，这样有助于自动化测试和代码的管理 。</p><p>redux-devtools 引用中间件指南：<a href="https://github.com/zalmoxisus/redux-devtools-extension" target="_blank" rel="noreferrer">https://github.com/zalmoxisus/redux-devtools-extension</a><img src="'+o+`" alt="redux_devtools"></p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// /store/index.js</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { createStore, applyMiddleware, compose } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;redux&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> reducer </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;./reducer&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> thunk </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;redux-thunk&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> composeEnhancers </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> window</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">__REDUX_DEVTOOLS_EXTENSION_COMPOSE__</span></span>
<span class="line"><span style="color:#E69875;">  ?</span><span style="color:#D3C6AA;"> window</span><span style="color:#859289;">.</span><span style="color:#A7C080;">__REDUX_DEVTOOLS_EXTENSION_COMPOSE__</span><span style="color:#D3C6AA;">({})</span></span>
<span class="line"><span style="color:#E69875;">  :</span><span style="color:#D3C6AA;"> compose;</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> enhancer </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> composeEnhancers</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">applyMiddleware</span><span style="color:#D3C6AA;">(thunk));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> store </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> createStore</span><span style="color:#D3C6AA;">(reducer, enhancer);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E67E80;"> default</span><span style="color:#D3C6AA;"> store;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// TodoList.js</span></span>
<span class="line"><span style="color:#A7C080;">componentDidMount</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> action </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> getTodoList</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#D3C6AA;">  store</span><span style="color:#859289;">.</span><span style="color:#A7C080;">dispatch</span><span style="color:#D3C6AA;">(action);</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">//  /store/actionCreators.js</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { INIT_LIST_ACTION } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;./actionTypes&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> axios </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;axios&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E69875;"> const</span><span style="color:#A7C080;"> initListAction</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> data </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> ({</span></span>
<span class="line"><span style="color:#D3C6AA;">  type</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> INIT_LIST_ACTION,</span></span>
<span class="line"><span style="color:#D3C6AA;">  data</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E69875;"> const</span><span style="color:#A7C080;"> getTodoList</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line highlighted"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> dispatch </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    axios</span><span style="color:#859289;">.</span><span style="color:#A7C080;">get</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;/list.json&quot;</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(res </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> data </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> res</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">data;</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> action </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> initListAction</span><span style="color:#D3C6AA;">(data);</span></span>
<span class="line highlighted"><span style="color:#A7C080;">      dispatch</span><span style="color:#D3C6AA;">(action);</span></span>
<span class="line"><span style="color:#D3C6AA;">    });</span></span>
<span class="line"><span style="color:#D3C6AA;">  };</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// /store/reducer.js</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { INIT_LIST_ACTION } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;./actionTypes&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E67E80;"> default</span><span style="color:#D3C6AA;"> (state </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> defaultState, action) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  if</span><span style="color:#D3C6AA;"> (action</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">type </span><span style="color:#E69875;">===</span><span style="color:#D3C6AA;"> INIT_LIST_ACTION) {</span></span>
<span class="line"><span style="color:#E69875;">    const</span><span style="color:#D3C6AA;"> newState </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> JSON</span><span style="color:#859289;">.</span><span style="color:#A7C080;">parse</span><span style="color:#D3C6AA;">(JSON</span><span style="color:#859289;">.</span><span style="color:#A7C080;">stringify</span><span style="color:#D3C6AA;">(state));</span></span>
<span class="line"><span style="color:#D3C6AA;">    newState</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">list </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> action</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">data;</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> newState;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>流程：引入 redux-thunk ，组件创建完毕后，action 通过 store.dispatch(getTodoList()) 传给 store，store 发现是个函数，就执行了这个函数。当调用的是个函数的时候，这个函数能够接受到 dispatch 参数， 所以在 axios 请求到数据后，getTodoList() 直接 dispatch 数据到 store ，store 再自动传给 reducer 去执行。</p><p>这么做的目的还是，为了之后复杂的逻辑要单独拎到一个地方管理。</p><h2 id="redux-saga-中间件使用入门" tabindex="-1">Redux-saga 中间件使用入门 <a class="header-anchor" href="#redux-saga-中间件使用入门" aria-label="Permalink to &quot;Redux-saga 中间件使用入门&quot;">​</a></h2><p>redux-saga 将异步的过程集中到一个文件(sagas.js)中去管理。 即在 component 去 dispatch 一个 action 的时候，Store 接收到会自动转发给 Reducer (标准流程)，同时这个 action 也会被 saga 捕获到。<strong>两边都会接收到！</strong></p><p>引入 redux-saga 指南： <a href="https://github.com/redux-saga/redux-saga" target="_blank" rel="noreferrer">https://github.com/redux-saga/redux-saga</a></p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// /store/index.js</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// redux-saga 和 redux devTool 结合使用</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { createStore, applyMiddleware, compose } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;redux&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> reducer </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;./reducer&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> createSagaMiddleware </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;redux-saga&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> todoSagas </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;./sagas&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> sagaMiddleware </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> createSagaMiddleware</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> composeEnhancers </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> window</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">__REDUX_DEVTOOLS_EXTENSION_COMPOSE__</span></span>
<span class="line"><span style="color:#E69875;">  ?</span><span style="color:#D3C6AA;"> window</span><span style="color:#859289;">.</span><span style="color:#A7C080;">__REDUX_DEVTOOLS_EXTENSION_COMPOSE__</span><span style="color:#D3C6AA;">({})</span></span>
<span class="line"><span style="color:#E69875;">  :</span><span style="color:#D3C6AA;"> compose;</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> enhancer </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> composeEnhancers</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">applyMiddleware</span><span style="color:#D3C6AA;">(sagaMiddleware));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> store </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> createStore</span><span style="color:#D3C6AA;">(reducer, enhancer);</span></span>
<span class="line"><span style="color:#D3C6AA;">sagaMiddleware</span><span style="color:#859289;">.</span><span style="color:#A7C080;">run</span><span style="color:#D3C6AA;">(todoSagas);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E67E80;"> default</span><span style="color:#D3C6AA;"> store;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>把异步操作都放到这个文件中去做，这个文件必须返回一个 generator 函数，但里面其他的方法可以是普通函数。 takeEvery 用于捕获指定的 action，第一个参数是 action 的 Type，第二个参数是捕获到后执行的方法。</p><p>在下面的这个例子中意思就是 捕获 type 为 GET_INIT_LIST 的 action，捕获到后执行 getInitList 方法。</p><p>put 和 store.dispatch 一样的功能。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// /sagas.js</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { takeEvery, put } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;redux-saga/effects&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { GET_INIT_LIST } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;./actionTypes&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { initListAction } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;./actionCreators&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> axios </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;axios&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">function*</span><span style="color:#A7C080;"> getInitList</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  try</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">    const</span><span style="color:#D3C6AA;"> res</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> yield</span><span style="color:#D3C6AA;"> axios</span><span style="color:#859289;">.</span><span style="color:#A7C080;">get</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;/list.json&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#E69875;">    const</span><span style="color:#D3C6AA;"> action</span><span style="color:#E69875;"> =</span><span style="color:#A7C080;"> initListAction</span><span style="color:#D3C6AA;">(res</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">data);</span></span>
<span class="line"><span style="color:#E67E80;">    yield</span><span style="color:#A7C080;"> put</span><span style="color:#D3C6AA;">(action);</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span><span style="color:#E67E80;"> catch</span><span style="color:#D3C6AA;"> (e)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;list.json网络请求失败&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// generator 函数</span></span>
<span class="line"><span style="color:#E67E80;">function*</span><span style="color:#A7C080;"> mySaga</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  yield</span><span style="color:#A7C080;"> takeEvery</span><span style="color:#D3C6AA;">(GET_INIT_LIST,</span><span style="color:#D3C6AA;"> getInitList);</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E67E80;"> default</span><span style="color:#D3C6AA;"> mySaga;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h2 id="如何使用-react-redux" tabindex="-1">如何使用 React-redux <a class="header-anchor" href="#如何使用-react-redux" aria-label="Permalink to &quot;如何使用 React-redux&quot;">​</a></h2><p>React-redux 是 React 官方提供的 Redux 用法。</p><p><code>&lt;Provider /&gt;</code> 它将 Store 提供给被它包裹的所有组件，这些组件就可以直接去调用 Store。但光提供还不够，还需要组件去连接，即结合 connect 一块使用。</p><p>使用 connect 去给组件 TodoList 和 Store 做连接，connect 有两个参数，声明两个连接的规则。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">connect</span><span style="color:#D3C6AA;">(mapStateToProps, mapDispatchToProps)(TodoList);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>先引入 react-redux，并写好<code>&lt;Provider /&gt;</code>并且将 Store 传给<code>&lt;Provider /&gt;</code>。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// /index.js</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> React </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> ReactDOM </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react-dom&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> TodoList </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;./TodoList&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { Provider } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react-redux&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> store </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;./store&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#A7C080;"> App</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> (</span></span>
<span class="line"><span style="color:#A7C080;">  &lt;</span><span style="color:#7FBBB3;">Provider</span><span style="color:#A7C080;"> store</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">store</span><span style="color:#A7C080;">}&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;</span><span style="color:#7FBBB3;">TodoList</span><span style="color:#A7C080;"> /&gt;</span></span>
<span class="line"><span style="color:#A7C080;">  &lt;/</span><span style="color:#7FBBB3;">Provider</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">ReactDOM</span><span style="color:#859289;">.</span><span style="color:#A7C080;">render</span><span style="color:#D3C6AA;">(App, document</span><span style="color:#859289;">.</span><span style="color:#A7C080;">getElementById</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;root&quot;</span><span style="color:#D3C6AA;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>/TodoList.js <img src="`+r+'" alt="map_to_props_1"></p><p><strong>mapStateToProps</strong>：把 Store 里的 state 映射成 组件里的 props。</p><p><strong>mapDispatchToProps</strong>：使 store.dispatch 映射到 组件的 props 上，然后组件元素可直接调用 dispatch 方法。</p><p><strong>以及这里的 export 出去的 connect()(TodoList)，本质是一个封装后的 TodoList 对象，它结合了 React-redux 赋予它的特性。</strong></p><p>/TodoList.js 两个 map 映射 store 和 dispatch 给到了 props，所以这个组件里上部分的代码可以直接这么写： <img src="'+t+`" alt="map_to_props_2"></p><p>刚刚在组件 changeInputValue 方法里 dispatch 出的 action， reducer 和之前一样正常写。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// /store/reducer.js</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> defaultState </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  inputValue</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;hello world&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  list</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> []</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E67E80;"> default</span><span style="color:#D3C6AA;"> (state </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> defaultState, action) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  if</span><span style="color:#D3C6AA;"> (action</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">type </span><span style="color:#E69875;">===</span><span style="color:#DBBC7F;"> &quot;change_input_value&quot;</span><span style="color:#D3C6AA;">) {</span></span>
<span class="line"><span style="color:#E69875;">    const</span><span style="color:#D3C6AA;"> newState </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> JSON</span><span style="color:#859289;">.</span><span style="color:#A7C080;">parse</span><span style="color:#D3C6AA;">(JSON</span><span style="color:#859289;">.</span><span style="color:#A7C080;">stringify</span><span style="color:#D3C6AA;">(state));</span></span>
<span class="line"><span style="color:#D3C6AA;">    newState</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">inputValue </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> action</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">value;</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> newState;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> state;</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>`,54)]))}const D=n(c,[["render",i]]);export{m as __pageData,D as default};
