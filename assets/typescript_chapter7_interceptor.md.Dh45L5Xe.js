import{_ as n,c as a,o as p,ag as l}from"./chunks/framework.D-6U7MZ9.js";const e="/n-book/assets/interceptor.DVi4vOJu.png",b=JSON.parse('{"title":"拦截器设计与实现","description":"","frontmatter":{},"headers":[],"relativePath":"typescript/chapter7/interceptor.md","filePath":"typescript/chapter7/interceptor.md","lastUpdated":1562151635000}'),o={name:"typescript/chapter7/interceptor.md"};function r(c,s,t,i,y,A){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="拦截器设计与实现" tabindex="-1">拦截器设计与实现 <a class="header-anchor" href="#拦截器设计与实现" aria-label="Permalink to &quot;拦截器设计与实现&quot;">​</a></h1><h2 id="需求分析" tabindex="-1">需求分析 <a class="header-anchor" href="#需求分析" aria-label="Permalink to &quot;需求分析&quot;">​</a></h2><p>我们希望能对请求的发送和响应做拦截，也就是在发送请求之前和接收到响应之后做一些额外逻辑。</p><p>我们希望设计的拦截器的使用方式如下：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// 添加一个请求拦截器</span></span>
<span class="line"><span style="color:#D3C6AA;">axios</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">interceptors</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">request</span><span style="color:#859289;">.</span><span style="color:#A7C080;">use</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;"> (config)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 在发送请求之前可以做一些事情</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> config;</span></span>
<span class="line"><span style="color:#D3C6AA;">}, </span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;"> (error)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 处理请求错误</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#7FBBB3;"> Promise</span><span style="color:#859289;">.</span><span style="color:#A7C080;">reject</span><span style="color:#D3C6AA;">(error);</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 添加一个响应拦截器</span></span>
<span class="line"><span style="color:#D3C6AA;">axios</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">interceptors</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">response</span><span style="color:#859289;">.</span><span style="color:#A7C080;">use</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;"> (response)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 处理响应数据</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> response;</span></span>
<span class="line"><span style="color:#D3C6AA;">}, </span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;"> (error)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 处理响应错误</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#7FBBB3;"> Promise</span><span style="color:#859289;">.</span><span style="color:#A7C080;">reject</span><span style="color:#D3C6AA;">(error);</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>在 <code>axios</code> 对象上有一个 <code>interceptors</code> 对象属性，该属性又有 <code>request</code> 和 <code>response</code> 2 个属性，它们都有一个 <code>use</code> 方法，<code>use</code> 方法支持 2 个参数，第一个参数类似 Promise 的 <code>resolve</code> 函数，第二个参数类似 Promise 的 <code>reject</code> 函数。我们可以在 <code>resolve</code> 函数和 <code>reject</code> 函数中执行同步代码或者是异步代码逻辑。</p><p>并且我们是可以添加多个拦截器的，拦截器的执行顺序是链式依次执行的方式。对于 <code>request</code> 拦截器，后添加的拦截器会在请求前的过程中先执行；对于 <code>response</code> 拦截器，先添加的拦截器会在响应后先执行。</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">axios</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">interceptors</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">request</span><span style="color:#859289;">.</span><span style="color:#A7C080;">use</span><span style="color:#D3C6AA;">(config </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  config</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">headers</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">test </span><span style="color:#E69875;">+=</span><span style="color:#DBBC7F;"> &#39;1&#39;</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> config</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span>
<span class="line"><span style="color:#D3C6AA;">axios</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">interceptors</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">request</span><span style="color:#859289;">.</span><span style="color:#A7C080;">use</span><span style="color:#D3C6AA;">(config </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  config</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">headers</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">test </span><span style="color:#E69875;">+=</span><span style="color:#DBBC7F;"> &#39;2&#39;</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> config</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>此外，我们也可以支持删除某个拦截器，如下：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> myInterceptor </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> axios</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">interceptors</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">request</span><span style="color:#859289;">.</span><span style="color:#A7C080;">use</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;"> ()</span><span style="color:#D3C6AA;"> {</span><span style="color:#859289;font-style:italic;">/*...*/</span><span style="color:#D3C6AA;">})</span></span>
<span class="line"><span style="color:#D3C6AA;">axios</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">interceptors</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">request</span><span style="color:#859289;">.</span><span style="color:#A7C080;">eject</span><span style="color:#D3C6AA;">(myInterceptor)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="整体设计" tabindex="-1">整体设计 <a class="header-anchor" href="#整体设计" aria-label="Permalink to &quot;整体设计&quot;">​</a></h2><p>我们先用一张图来展示一下拦截器工作流程：</p><p><img src="`+e+`" alt="interceptor"></p><p>整个过程是一个链式调用的方式，并且每个拦截器都可以支持同步和异步处理，我们自然而然地就联想到使用 Promise 链的方式来实现整个调用过程。</p><p>在这个 Promise 链的执行过程中，请求拦截器 <code>resolve</code> 函数处理的是 <code>config</code> 对象，而相应拦截器 <code>resolve</code> 函数处理的是 <code>response</code> 对象。</p><p>在了解了拦截器工作流程后，我们先要创建一个拦截器管理类，允许我们去添加 删除和遍历拦截器。</p><h2 id="拦截器管理类实现" tabindex="-1">拦截器管理类实现 <a class="header-anchor" href="#拦截器管理类实现" aria-label="Permalink to &quot;拦截器管理类实现&quot;">​</a></h2><p>根据需求，<code>axios</code> 拥有一个 <code>interceptors</code> 对象属性，该属性又有 <code>request</code> 和 <code>response</code> 2 个属性，它们对外提供一个 <code>use</code> 方法来添加拦截器，我们可以把这俩属性看做是一个拦截器管理对象。<code>use</code> 方法支持 2 个参数，第一个是 <code>resolve</code> 函数，第二个是 <code>reject</code> 函数，对于 <code>resolve</code> 函数的参数，请求拦截器是 <code>AxiosRequestConfig</code> 类型的，而响应拦截器是 <code>AxiosResponse</code> 类型的；而对于 <code>reject</code> 函数的参数类型则是 <code>any</code> 类型的。</p><p>根据上述分析，我们先来定义一下拦截器管理对象对外的接口。</p><h3 id="接口定义" tabindex="-1">接口定义 <a class="header-anchor" href="#接口定义" aria-label="Permalink to &quot;接口定义&quot;">​</a></h3><p><code>types/index.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> interface</span><span style="color:#83C092;"> AxiosInterceptorManager</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#D3C6AA;">&gt; {</span></span>
<span class="line"><span style="color:#A7C080;">  use</span><span style="color:#D3C6AA;">(resolved</span><span style="color:#859289;">:</span><span style="color:#83C092;"> ResolvedFn</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#D3C6AA;">&gt;, rejected</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#83C092;"> RejectedFn</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  eject</span><span style="color:#D3C6AA;">(id</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> void</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> interface</span><span style="color:#83C092;"> ResolvedFn</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#E69875;">=</span><span style="color:#7FBBB3;">any</span><span style="color:#D3C6AA;">&gt; {</span></span>
<span class="line"><span style="color:#D3C6AA;">  (val</span><span style="color:#859289;">:</span><span style="color:#83C092;"> T</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> T</span><span style="color:#E69875;"> |</span><span style="color:#83C092;"> Promise</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#D3C6AA;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> interface</span><span style="color:#83C092;"> RejectedFn</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  (error</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>这里我们定义了 <code>AxiosInterceptorManager</code> 泛型接口，因为对于 <code>resolve</code> 函数的参数，请求拦截器和响应拦截器是不同的。</p><h3 id="代码实现" tabindex="-1">代码实现 <a class="header-anchor" href="#代码实现" aria-label="Permalink to &quot;代码实现&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">import</span><span style="color:#D3C6AA;"> { ResolvedFn, RejectedFn } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;../types&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">interface</span><span style="color:#83C092;"> Interceptor</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#D3C6AA;">&gt; {</span></span>
<span class="line"><span style="color:#D3C6AA;">  resolved</span><span style="color:#859289;">:</span><span style="color:#83C092;"> ResolvedFn</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#D3C6AA;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">  rejected</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#83C092;"> RejectedFn</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> default</span><span style="color:#E67E80;"> class</span><span style="color:#83C092;"> InterceptorManager</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#D3C6AA;">&gt; {</span></span>
<span class="line"><span style="color:#E69875;">  private</span><span style="color:#D3C6AA;"> interceptors</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Array</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">Interceptor</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#D3C6AA;">&gt; </span><span style="color:#E69875;">|</span><span style="color:#7FBBB3;"> null</span><span style="color:#D3C6AA;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">  constructor</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">interceptors </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> []</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  use</span><span style="color:#D3C6AA;">(resolved</span><span style="color:#859289;">:</span><span style="color:#83C092;"> ResolvedFn</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#D3C6AA;">&gt;, rejected</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#83C092;"> RejectedFn</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">interceptors</span><span style="color:#859289;">.</span><span style="color:#A7C080;">push</span><span style="color:#D3C6AA;">({</span></span>
<span class="line"><span style="color:#D3C6AA;">      resolved,</span></span>
<span class="line"><span style="color:#D3C6AA;">      rejected</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">interceptors</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">length </span><span style="color:#E69875;">-</span><span style="color:#D699B6;"> 1</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  forEach</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">fn</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> (interceptor</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Interceptor</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#D3C6AA;">&gt;) </span><span style="color:#E69875;">=&gt;</span><span style="color:#7FBBB3;"> void</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> void</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">interceptors</span><span style="color:#859289;">.</span><span style="color:#A7C080;">forEach</span><span style="color:#D3C6AA;">(interceptor </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">      if</span><span style="color:#D3C6AA;"> (interceptor </span><span style="color:#E69875;">!==</span><span style="color:#D699B6;"> null</span><span style="color:#D3C6AA;">) {</span></span>
<span class="line"><span style="color:#A7C080;">        fn</span><span style="color:#D3C6AA;">(interceptor)</span></span>
<span class="line"><span style="color:#D3C6AA;">      }</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  eject</span><span style="color:#D3C6AA;">(id</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> void</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    if</span><span style="color:#D3C6AA;"> (</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">interceptors[id]) {</span></span>
<span class="line"><span style="color:#D699B6;">      this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">interceptors[id] </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> null</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><p>我们定义了一个 <code>InterceptorManager</code> 泛型类，内部维护了一个私有属性 <code>interceptors</code>，它是一个数组，用来存储拦截器。该类还对外提供了 3 个方法，其中 <code>use</code> 接口就是添加拦截器到 <code>interceptors</code> 中，并返回一个 <code>id</code> 用于删除；<code>forEach</code> 接口就是遍历 <code>interceptors</code> 用的，它支持传入一个函数，遍历过程中会调用该函数，并把每一个 <code>interceptor</code> 作为该函数的参数传入；<code>eject</code> 就是删除一个拦截器，通过传入拦截器的 <code>id</code> 删除。</p><h2 id="链式调用实现" tabindex="-1">链式调用实现 <a class="header-anchor" href="#链式调用实现" aria-label="Permalink to &quot;链式调用实现&quot;">​</a></h2><blockquote><p>本小节需要你对 Promise 掌握和理解，可以前往 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noreferrer">mdn</a> 学习。</p></blockquote><p>当我们实现好拦截器管理类，接下来就是在 <code>Axios</code> 中定义一个 <code>interceptors</code> 属性，它的类型如下：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">interface</span><span style="color:#83C092;"> Interceptors</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  request</span><span style="color:#859289;">:</span><span style="color:#83C092;"> InterceptorManager</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">AxiosRequestConfig</span><span style="color:#D3C6AA;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">  response</span><span style="color:#859289;">:</span><span style="color:#83C092;"> InterceptorManager</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">AxiosResponse</span><span style="color:#D3C6AA;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> default</span><span style="color:#E67E80;"> class</span><span style="color:#83C092;"> Axios</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  interceptors</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Interceptors</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">  constructor</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">interceptors </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">      request</span><span style="color:#859289;">:</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> InterceptorManager</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">AxiosRequestConfig</span><span style="color:#D3C6AA;">&gt;(),</span></span>
<span class="line"><span style="color:#D3C6AA;">      response</span><span style="color:#859289;">:</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> InterceptorManager</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">AxiosResponse</span><span style="color:#D3C6AA;">&gt;()</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p><code>Interceptors</code> 类型拥有 2 个属性，一个请求拦截器管理类实例，一个是响应拦截器管理类实例。我们在实例化 <code>Axios</code> 类的时候，在它的构造器去初始化这个 <code>interceptors</code> 实例属性。</p><p>接下来，我们修改 <code>request</code> 方法的逻辑，添加拦截器链式调用的逻辑：</p><p><code>core/Axios.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">interface</span><span style="color:#83C092;"> PromiseChain</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  resolved</span><span style="color:#859289;">:</span><span style="color:#83C092;"> ResolvedFn</span><span style="color:#E69875;"> |</span><span style="color:#D3C6AA;"> ((config</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">) </span><span style="color:#E69875;">=&gt;</span><span style="color:#83C092;"> AxiosPromise</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">  rejected</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#83C092;"> RejectedFn</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">request</span><span style="color:#D3C6AA;">(url: any, config</span><span style="color:#E69875;">?:</span><span style="color:#D3C6AA;"> any): AxiosPromise {</span></span>
<span class="line"><span style="color:#E67E80;">  if</span><span style="color:#D3C6AA;"> (</span><span style="color:#E67E80;">typeof</span><span style="color:#D3C6AA;"> url </span><span style="color:#E69875;">===</span><span style="color:#DBBC7F;"> &#39;string&#39;</span><span style="color:#D3C6AA;">) {</span></span>
<span class="line"><span style="color:#E67E80;">    if</span><span style="color:#D3C6AA;"> (</span><span style="color:#E69875;">!</span><span style="color:#D3C6AA;">config) {</span></span>
<span class="line"><span style="color:#D3C6AA;">      config </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {}</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">    config</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">url </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> url</span></span>
<span class="line"><span style="color:#D3C6AA;">  } </span><span style="color:#E67E80;">else</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    config </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> url</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> chain</span><span style="color:#859289;">:</span><span style="color:#83C092;"> PromiseChain</span><span style="color:#D3C6AA;">[] </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [{</span></span>
<span class="line"><span style="color:#D3C6AA;">    resolved</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> dispatchRequest,</span></span>
<span class="line"><span style="color:#D3C6AA;">    rejected</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> undefined</span></span>
<span class="line"><span style="color:#D3C6AA;">  }]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D699B6;">  this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">interceptors</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">request</span><span style="color:#859289;">.</span><span style="color:#A7C080;">forEach</span><span style="color:#D3C6AA;">(interceptor </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    chain</span><span style="color:#859289;">.</span><span style="color:#A7C080;">unshift</span><span style="color:#D3C6AA;">(interceptor)</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D699B6;">  this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">interceptors</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">response</span><span style="color:#859289;">.</span><span style="color:#A7C080;">forEach</span><span style="color:#D3C6AA;">(interceptor </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    chain</span><span style="color:#859289;">.</span><span style="color:#A7C080;">push</span><span style="color:#D3C6AA;">(interceptor)</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">  let</span><span style="color:#D3C6AA;"> promise </span><span style="color:#E69875;">=</span><span style="color:#7FBBB3;"> Promise</span><span style="color:#859289;">.</span><span style="color:#A7C080;">resolve</span><span style="color:#D3C6AA;">(config)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">  while</span><span style="color:#D3C6AA;"> (chain</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">length) {</span></span>
<span class="line"><span style="color:#E69875;">    const</span><span style="color:#D3C6AA;"> { resolved, rejected } </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> chain</span><span style="color:#859289;">.</span><span style="color:#A7C080;">shift</span><span style="color:#D3C6AA;">()</span><span style="color:#E69875;">!</span></span>
<span class="line"><span style="color:#D3C6AA;">    promise </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> promise</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(resolved, rejected)</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> promise</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><p>首先，构造一个 <code>PromiseChain</code> 类型的数组 <code>chain</code>，并把 <code>dispatchRequest</code> 函数赋值给 <code>resolved</code> 属性；接着先遍历请求拦截器插入到 <code>chain</code> 的前面；然后再遍历响应拦截器插入到 <code>chain</code> 后面。</p><p>接下来定义一个已经 resolve 的 <code>promise</code>，循环这个 <code>chain</code>，拿到每个拦截器对象，把它们的 <code>resolved</code> 函数和 <code>rejected</code> 函数添加到 <code>promise.then</code> 的参数中，这样就相当于通过 Promise 的链式调用方式，实现了拦截器一层层的链式调用的效果。</p><p>注意我们拦截器的执行顺序，对于请求拦截器，先执行后添加的，再执行先添加的；而对于响应拦截器，先执行先添加的，后执行后添加的。</p><h2 id="demo-编写" tabindex="-1">demo 编写 <a class="header-anchor" href="#demo-编写" aria-label="Permalink to &quot;demo 编写&quot;">​</a></h2><p>在 <code>examples</code> 目录下创建 <code>interceptor</code> 目录，在 <code>interceptor</code> 目录下创建 <code>index.html</code>:</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">&lt;!</span><span style="color:#E69875;">DOCTYPE</span><span style="color:#DBBC7F;"> html</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">&lt;</span><span style="color:#E69875;">html</span><span style="color:#DBBC7F;"> lang</span><span style="color:#A7C080;">=</span><span style="color:#A7C080;">&quot;en&quot;</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">  &lt;</span><span style="color:#E69875;">head</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;</span><span style="color:#E69875;">meta</span><span style="color:#DBBC7F;"> charset</span><span style="color:#A7C080;">=</span><span style="color:#A7C080;">&quot;utf-8&quot;</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;</span><span style="color:#E69875;">title</span><span style="color:#A7C080;">&gt;</span><span style="color:#D3C6AA;">Interceptor example</span><span style="color:#A7C080;">&lt;/</span><span style="color:#E69875;">title</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">  &lt;/</span><span style="color:#E69875;">head</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">  &lt;</span><span style="color:#E69875;">body</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;</span><span style="color:#E69875;">script</span><span style="color:#DBBC7F;"> src</span><span style="color:#A7C080;">=</span><span style="color:#A7C080;">&quot;/__build__/interceptor.js&quot;</span><span style="color:#A7C080;">&gt;&lt;/</span><span style="color:#E69875;">script</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">  &lt;/</span><span style="color:#E69875;">body</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">&lt;/</span><span style="color:#E69875;">html</span><span style="color:#A7C080;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>接着创建 <code>app.ts</code> 作为入口文件：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">import</span><span style="color:#D3C6AA;"> axios </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;../../src/index&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">axios</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">interceptors</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">request</span><span style="color:#859289;">.</span><span style="color:#A7C080;">use</span><span style="color:#D3C6AA;">(config </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  config</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">headers</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">test </span><span style="color:#E69875;">+=</span><span style="color:#DBBC7F;"> &#39;1&#39;</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> config</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span>
<span class="line"><span style="color:#D3C6AA;">axios</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">interceptors</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">request</span><span style="color:#859289;">.</span><span style="color:#A7C080;">use</span><span style="color:#D3C6AA;">(config </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  config</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">headers</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">test </span><span style="color:#E69875;">+=</span><span style="color:#DBBC7F;"> &#39;2&#39;</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> config</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span>
<span class="line"><span style="color:#D3C6AA;">axios</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">interceptors</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">request</span><span style="color:#859289;">.</span><span style="color:#A7C080;">use</span><span style="color:#D3C6AA;">(config </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  config</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">headers</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">test </span><span style="color:#E69875;">+=</span><span style="color:#DBBC7F;"> &#39;3&#39;</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> config</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">axios</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">interceptors</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">response</span><span style="color:#859289;">.</span><span style="color:#A7C080;">use</span><span style="color:#D3C6AA;">(res </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  res</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">data </span><span style="color:#E69875;">+=</span><span style="color:#DBBC7F;"> &#39;1&#39;</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> res</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> interceptor </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> axios</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">interceptors</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">response</span><span style="color:#859289;">.</span><span style="color:#A7C080;">use</span><span style="color:#D3C6AA;">(res </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  res</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">data </span><span style="color:#E69875;">+=</span><span style="color:#DBBC7F;"> &#39;2&#39;</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> res</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span>
<span class="line"><span style="color:#D3C6AA;">axios</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">interceptors</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">response</span><span style="color:#859289;">.</span><span style="color:#A7C080;">use</span><span style="color:#D3C6AA;">(res </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  res</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">data </span><span style="color:#E69875;">+=</span><span style="color:#DBBC7F;"> &#39;3&#39;</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> res</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">axios</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">interceptors</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">response</span><span style="color:#859289;">.</span><span style="color:#A7C080;">eject</span><span style="color:#D3C6AA;">(interceptor)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">axios</span><span style="color:#D3C6AA;">({</span></span>
<span class="line"><span style="color:#D3C6AA;">  url</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;/interceptor/get&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  method</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;get&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  headers</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    test</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">((res) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(res</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">data)</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><p>该 demo 我们添加了 3 个请求拦截器，添加了 3 个响应拦截器并删除了第二个。运行该 demo 我们通过浏览器访问，我们发送的请求添加了一个 <code>test</code> 的请求 header，它的值是 <code>321</code>；我们的响应数据返回的是 <code>hello</code>，经过响应拦截器的处理，最终我们输出的数据是 <code>hello13</code>。</p><p>至此，我们给 <code>ts-axios</code> 实现了拦截器功能，它是一个非常实用的功能，在实际工作中我们可以利用它做一些需求如登录权限认证。</p><p>我们目前通过 <code>axios</code> 发送请求，往往会传入一堆配置，但是我们也希望 <code>ts-axios</code> 本身也会有一些默认配置，我们把用户传入的自定义配置和默认配置做一层合并。其实，大部分的 JS 库都是类似的玩法。下面一章我们就来实现这个 feature。</p>`,45)]))}const d=n(o,[["render",r]]);export{b as __pageData,d as default};
