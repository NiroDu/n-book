import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.D-6U7MZ9.js";const b=JSON.parse('{"title":"TypeScript 基础部分","description":"","frontmatter":{},"headers":[],"relativePath":"typescript/basic_usage.md","filePath":"typescript/basic_usage.md","lastUpdated":1540285470000}'),e={name:"typescript/basic_usage.md"};function o(r,s,t,c,i,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="typescript-基础部分" tabindex="-1">TypeScript 基础部分 <a class="header-anchor" href="#typescript-基础部分" aria-label="Permalink to &quot;TypeScript 基础部分&quot;">​</a></h1><blockquote><p>这篇文章的记录目的是为了自己快速查询语法，如需详细版请访问：<a href="https://ts.xcatliu.com/" target="_blank" rel="noreferrer">TypeScript 入门教程</a></p></blockquote><h2 id="原始数据类型" tabindex="-1">原始数据类型 <a class="header-anchor" href="#原始数据类型" aria-label="Permalink to &quot;原始数据类型&quot;">​</a></h2><h3 id="布尔值" tabindex="-1">布尔值 <a class="header-anchor" href="#布尔值" aria-label="Permalink to &quot;布尔值&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> isDone</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> boolean</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> false</span><span style="color:#D3C6AA;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>注意，使用构造函数 Boolean 创造的对象不是布尔值：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> createdByNewBoolean</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> boolean</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> Boolean</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// error TS2322: Type &#39;Boolean&#39; is not assignable to type &#39;boolean&#39;.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>事实上 new Boolean() 返回的是一个 Boolean 对象：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> createdByNewBoolean</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Boolean</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> Boolean</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>直接调用 Boolean 也可以返回一个 boolean 类型：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> createdByBoolean</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> boolean</span><span style="color:#E69875;"> =</span><span style="color:#A7C080;"> Boolean</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="数值" tabindex="-1">数值 <a class="header-anchor" href="#数值" aria-label="Permalink to &quot;数值&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> decLiteral</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> 6</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> hexLiteral</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> 0xf00d</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ES6 中的二进制表示法</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> binaryLiteral</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> 0b1010</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ES6 中的八进制表示法</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> octalLiteral</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> 0o744</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> notANumber</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> NaN</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> infinityNumber</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> Infinity</span><span style="color:#D3C6AA;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="字符串" tabindex="-1">字符串 <a class="header-anchor" href="#字符串" aria-label="Permalink to &quot;字符串&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> myName</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#E69875;"> =</span><span style="color:#DBBC7F;"> &#39;Tom&#39;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> myAge</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> 25</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 模板字符串</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> sentence</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#E69875;"> =</span><span style="color:#DBBC7F;"> \`Hello, my name is </span><span style="color:#A7C080;">\${</span><span style="color:#D3C6AA;">myName</span><span style="color:#A7C080;">}</span><span style="color:#DBBC7F;">.</span></span>
<span class="line"><span style="color:#DBBC7F;">I&#39;ll be </span><span style="color:#A7C080;">\${</span><span style="color:#D3C6AA;">myAge</span><span style="color:#E69875;"> +</span><span style="color:#D699B6;"> 1</span><span style="color:#A7C080;">}</span><span style="color:#DBBC7F;"> years old next month.\`</span><span style="color:#D3C6AA;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>编译结果：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> myName </span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;"> &#39;Tom&#39;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> myAge </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 25</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 模板字符串</span></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> sentence </span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;"> &quot;Hello, my name is &quot;</span><span style="color:#E69875;"> +</span><span style="color:#D3C6AA;"> myName </span><span style="color:#E69875;">+</span><span style="color:#DBBC7F;"> &quot;.</span><span style="color:#A7C080;">\\n</span><span style="color:#DBBC7F;">I&#39;ll be &quot;</span><span style="color:#E69875;"> +</span><span style="color:#D3C6AA;"> (myAge </span><span style="color:#E69875;">+</span><span style="color:#D699B6;"> 1</span><span style="color:#D3C6AA;">) </span><span style="color:#E69875;">+</span><span style="color:#DBBC7F;"> &quot; years old next month.&quot;</span><span style="color:#D3C6AA;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="空值" tabindex="-1">空值 <a class="header-anchor" href="#空值" aria-label="Permalink to &quot;空值&quot;">​</a></h3><p>JavaScript 没有空值（Void）的概念，在 TypeScript 中，可以用 void 表示没有任何返回值的函数：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> alertName</span><span style="color:#D3C6AA;">()</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> void</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">    alert</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;My name is Tom&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>声明一个 void 类型的变量没有什么用，因为你<strong>只能</strong>将它赋值为 <code>undefined</code> 和 <code>null</code>：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> unusable</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> void</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> undefined</span><span style="color:#D3C6AA;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="null-和-undefined" tabindex="-1">Null 和 Undefined <a class="header-anchor" href="#null-和-undefined" aria-label="Permalink to &quot;Null 和 Undefined&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> u</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> undefined</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> undefined</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> n</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> null</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> null</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// undefined 类型的变量只能被赋值为 undefined，null 类型的变量只能被赋值为 null。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>与 <code>void</code> 的区别是，<code>undefined</code> 和 <code>null</code> 是所有类型的子类型。也就是说 <code>undefined</code> 类型的变量，可以赋值给 <code>number</code> 类型的变量：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// 这样不会报错</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> num</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> undefined</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 这样也不会报错</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> u</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> undefined</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> num</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> u;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>而 void 类型的变量不能赋值给 number 类型的变量：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> u</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> void</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> num</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> u;</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// error TS2322: Type &#39;void&#39; is not assignable to type &#39;number&#39;.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="任意值" tabindex="-1">任意值 <a class="header-anchor" href="#任意值" aria-label="Permalink to &quot;任意值&quot;">​</a></h2><h3 id="什么是任意值类型" tabindex="-1">什么是任意值类型 <a class="header-anchor" href="#什么是任意值类型" aria-label="Permalink to &quot;什么是任意值类型&quot;">​</a></h3><p>任意值（Any）用来表示允许赋值为任意类型。</p><p>如果是一个普通类型，在赋值过程中改变类型是不被允许的。但如果是 <code>any</code> 类型，则允许被赋值为任意类型。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> myFavoriteNumber</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#E69875;"> =</span><span style="color:#DBBC7F;"> &#39;seven&#39;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">myFavoriteNumber </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 7</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// error TS2322: Type &#39;number&#39; is not assignable to type &#39;string&#39;.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> myFavoriteNumber</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#E69875;"> =</span><span style="color:#DBBC7F;"> &#39;seven&#39;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">myFavoriteNumber </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 7</span><span style="color:#D3C6AA;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="任意值的属性和方法" tabindex="-1">任意值的属性和方法 <a class="header-anchor" href="#任意值的属性和方法" aria-label="Permalink to &quot;任意值的属性和方法&quot;">​</a></h3><p>在任意值上访问任何属性都是允许的，也允许调用任何方法：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> anyThing</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#E69875;"> =</span><span style="color:#DBBC7F;"> &#39;hello&#39;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(anyThing</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">myName);</span></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(anyThing</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">myName</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">firstName);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> anyThing</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#E69875;"> =</span><span style="color:#DBBC7F;"> &#39;Tom&#39;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">anyThing</span><span style="color:#859289;">.</span><span style="color:#A7C080;">setName</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;Jerry&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">anyThing</span><span style="color:#859289;">.</span><span style="color:#A7C080;">setName</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;Jerry&#39;</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">sayHello</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#D3C6AA;">anyThing</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">myName</span><span style="color:#859289;">.</span><span style="color:#A7C080;">setFirstName</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;Cat&#39;</span><span style="color:#D3C6AA;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>声明一个变量为任意值之后，对它的任何操作，返回的内容的类型都是任意值。</strong></p><h3 id="未声明类型的变量" tabindex="-1">未声明类型的变量 <a class="header-anchor" href="#未声明类型的变量" aria-label="Permalink to &quot;未声明类型的变量&quot;">​</a></h3><p><strong>变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型：</strong></p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// 只声明，未赋值</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 如果定义的时候没有赋值，不管之后有没有赋值，都会被推断成 any 类型而完全不被类型检查：</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> something;</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 等价于</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> something</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="类型推论" tabindex="-1">类型推论 <a class="header-anchor" href="#类型推论" aria-label="Permalink to &quot;类型推论&quot;">​</a></h2><p>如果没有明确的指定类型，那么 TypeScript 会依照类型推论（Type Inference）的规则推断出一个类型。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> myFavoriteNumber </span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;"> &#39;seven&#39;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">myFavoriteNumber </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 7</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// error TS2322: Type &#39;number&#39; is not assignable to type &#39;string&#39;.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 事实上，它等价于:</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> myFavoriteNumber</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#E69875;"> =</span><span style="color:#DBBC7F;"> &#39;seven&#39;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">myFavoriteNumber </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 7</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// TypeScript 会在没有明确的指定类型的时候推测出一个类型，这就是类型推论。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="联合类型" tabindex="-1">联合类型 <a class="header-anchor" href="#联合类型" aria-label="Permalink to &quot;联合类型&quot;">​</a></h2><p>联合类型（Union Types）表示取值可以为多种类型中的一种。 联合类型使用 <code>|</code> 分隔每个类型。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> myFavoriteNumber</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#E69875;"> |</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">myFavoriteNumber </span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;"> &#39;seven&#39;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">myFavoriteNumber </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 7</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> myFavoriteNumber</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#E69875;"> |</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">myFavoriteNumber </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> true</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// error TS2322: Type &#39;boolean&#39; is not assignable to type &#39;string | number&#39;.</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// Type &#39;boolean&#39; is not assignable to type &#39;number&#39;.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="访问联合类型的属性或方法" tabindex="-1">访问联合类型的属性或方法 <a class="header-anchor" href="#访问联合类型的属性或方法" aria-label="Permalink to &quot;访问联合类型的属性或方法&quot;">​</a></h3><p>当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们只能访问此联合类型的所有类型里共有的属性或方法。</p><p>访问 string 和 number 的共有属性是没问题的：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> getString</span><span style="color:#D3C6AA;">(something</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#E69875;"> |</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> something</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toString</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>但不能访问非共有属性：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> getLength</span><span style="color:#D3C6AA;">(something</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#E69875;"> |</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> something</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">length;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// error TS2339: Property &#39;length&#39; does not exist on type &#39;string | number&#39;.</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// Property &#39;length&#39; does not exist on type &#39;number&#39;.</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// length 不是 string 和 number 的共有属性，所以会报错。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>联合类型的变量在被赋值的时候，会根据类型推论的规则推断出一个类型：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> myFavoriteNumber</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#E69875;"> |</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">myFavoriteNumber </span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;"> &#39;seven&#39;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(myFavoriteNumber</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">length); </span><span style="color:#859289;font-style:italic;">// 5</span></span>
<span class="line"><span style="color:#D3C6AA;">myFavoriteNumber </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 7</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(myFavoriteNumber</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">length); </span><span style="color:#859289;font-style:italic;">// 编译时报错</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// error TS2339: Property &#39;length&#39; does not exist on type &#39;number&#39;.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 上例中，第二行的 myFavoriteNumber 被推断成了 string，访问它的 length 属性不会报错。</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 而第四行的 myFavoriteNumber 被推断成了 number，访问它的 length 属性时就报错了。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="接口" tabindex="-1">接口 <a class="header-anchor" href="#接口" aria-label="Permalink to &quot;接口&quot;">​</a></h2><h3 id="什么是接口" tabindex="-1">什么是接口 <a class="header-anchor" href="#什么是接口" aria-label="Permalink to &quot;什么是接口&quot;">​</a></h3><p>在 TypeScript 中，我们使用接口（Interfaces）来定义对象的类型。</p><p>在面向对象语言中，接口（Interfaces）是对行为的抽象，而具体如何行动需要由类（classes）去实现（implements）。 TypeScript 中的接口是一个非常灵活的概念，除了可用于对类的一部分行为进行抽象以外，也常用于对「对象的形状（Shape）」进行描述。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// 接口一般首字母大写。有的编程语言中会建议接口的名称加上 I 前缀。</span></span>
<span class="line"><span style="color:#E67E80;">interface</span><span style="color:#83C092;"> Person</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    name</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">    age</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> tom</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Person</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    name</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;Tom&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">    age</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 25</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 约束了 tom 的形状必须和接口 Person 一致。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong>赋值的时候，变量的形状必须和接口的形状保持一致。</strong> 定义的变量比接口少了一些属性是不允许的，多一些属性也是不允许的：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">interface</span><span style="color:#83C092;"> Person</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    name</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">    age</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> tom</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Person</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    name</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;Tom&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// error TS2322: Type &#39;{ name: string; }&#39; is not assignable to type &#39;Person&#39;.</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// Property &#39;age&#39; is missing in type &#39;{ name: string; }&#39;.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> tom</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Person</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    name</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;Tom&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">    age</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 25</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">    gender</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;male&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// error TS2322: Type &#39;{ name: string; age: number; gender: string; }&#39; is not assignable to type &#39;Person&#39;.</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// Object literal may only specify known properties, and &#39;gender&#39; does not exist in type &#39;Person&#39;.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="可选属性" tabindex="-1">可选属性 <a class="header-anchor" href="#可选属性" aria-label="Permalink to &quot;可选属性&quot;">​</a></h3><p>有时我们希望不要完全匹配一个形状，那么可以用可选属性<code>?</code>。 这时仍然不允许添加未定义的属性：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// 选属性的含义是该属性可以不存在。</span></span>
<span class="line"><span style="color:#E67E80;">interface</span><span style="color:#83C092;"> Person</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    name</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">    age</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> tom</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Person</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    name</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;Tom&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 上面都是 OK 的，但是不能声明接口中没有的属性</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="任意属性" tabindex="-1">任意属性 <a class="header-anchor" href="#任意属性" aria-label="Permalink to &quot;任意属性&quot;">​</a></h3><p>有时候我们希望一个接口允许有任意的属性，可以使用如下方式：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// 使用 [propName: string] 定义了任意属性取 string 类型的值。</span></span>
<span class="line"><span style="color:#E67E80;">interface</span><span style="color:#83C092;"> Person</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    name</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">    age</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">    [propName</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">]</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 可以使用接口中没有定义的属性了</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> tom</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Person</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    name</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;Tom&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">    gender</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;male&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><strong>需要注意的是，一旦定义了任意属性，那么<code>确定属性</code>和<code>可选属性</code>都必须是它的子属性：</strong></p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">interface</span><span style="color:#83C092;"> Person</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    name</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">    age</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">    [propName</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">]</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// age是可选属性，在这里必须得是string类型了</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> tom</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Person</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    name</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;Tom&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">    age</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 25</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">    gender</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;male&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// error TS2411: Property &#39;age&#39; of type &#39;number&#39; is not assignable to string index type &#39;string&#39;.</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// error TS2322: Type &#39;{ [x: string]: string | number; name: string; age: number; gender: string; }&#39; is not assignable to type &#39;Person&#39;.</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// Index signatures are incompatible.</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// Type &#39;string | number&#39; is not assignable to type &#39;string&#39;.</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// Type &#39;number&#39; is not assignable to type &#39;string&#39;.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 在报错信息中可以看出，此时 { name: &#39;Tom&#39;, age: 25, gender: &#39;male&#39; } 的类型被推断成了 { [x: string]: string | number; name: string; age: number; gender: string; }，这是联合类型和接口的结合。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="只读属性" tabindex="-1">只读属性 <a class="header-anchor" href="#只读属性" aria-label="Permalink to &quot;只读属性&quot;">​</a></h3><p>有时候我们希望对象中的一些字段只能在创建的时候被赋值，那么可以用 <code>readonly</code> 定义只读属性。</p><p><strong>只读的约束存在于第一次给对象赋值的时候，而不是第一次给只读属性赋值的时候：</strong></p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">interface</span><span style="color:#83C092;"> Person</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">    readonly</span><span style="color:#D3C6AA;"> id</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">    name</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">    age</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">    [propName</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">]</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> tom</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Person</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    name</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;Tom&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">    gender</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;male&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">tom</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">id </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 89757</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// error TS2322: Type &#39;{ name: string; gender: string; }&#39; is not assignable to type &#39;Person&#39;.</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// Property &#39;id&#39; is missing in type &#39;{ name: string; gender: string; }&#39;.</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// error TS2540: Cannot assign to &#39;id&#39; because it is a constant or a read-only property.</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 上例中，报错信息有两处，第一处是在对 tom 进行赋值的时候，没有给 id 赋值。</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 第二处是在给 tom.id 赋值的时候，由于它是只读属性，所以报错了。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="用接口定义函数的形状" tabindex="-1">用接口定义函数的形状 <a class="header-anchor" href="#用接口定义函数的形状" aria-label="Permalink to &quot;用接口定义函数的形状&quot;">​</a></h3><p>我们也可以使用接口的方式来定义一个函数需要符合的形状：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">interface</span><span style="color:#83C092;"> SearchFunc</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    (source</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">, subString</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> boolean</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> mySearch</span><span style="color:#859289;">:</span><span style="color:#83C092;"> SearchFunc</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#A7C080;">mySearch</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">(source</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> subString</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> source</span><span style="color:#859289;">.</span><span style="color:#A7C080;">search</span><span style="color:#D3C6AA;">(subString)</span><span style="color:#E69875;"> !==</span><span style="color:#E69875;"> -</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="数组的类型" tabindex="-1">数组的类型 <a class="header-anchor" href="#数组的类型" aria-label="Permalink to &quot;数组的类型&quot;">​</a></h2><h3 id="「类型-方括号」表示法" tabindex="-1">「类型 + 方括号」表示法 <a class="header-anchor" href="#「类型-方括号」表示法" aria-label="Permalink to &quot;「类型 + 方括号」表示法&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> fibonacci</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">[] </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">2</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">3</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">5</span><span style="color:#D3C6AA;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>数组的项中不允许出现其他的类型：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> fibonacci</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">[] </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;1&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">2</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">3</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">5</span><span style="color:#D3C6AA;">];</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// error TS2322: Type &#39;(number | string)[]&#39; is not assignable to type &#39;number[]&#39;.</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// Type &#39;number | string&#39; is not assignable to type &#39;number&#39;.</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// Type &#39;string&#39; is not assignable to type &#39;number&#39;.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="数组泛型" tabindex="-1">数组泛型 <a class="header-anchor" href="#数组泛型" aria-label="Permalink to &quot;数组泛型&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> fibonacci</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Array</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#7FBBB3;">number</span><span style="color:#D3C6AA;">&gt; </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">2</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">3</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">5</span><span style="color:#D3C6AA;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="用接口表示数组" tabindex="-1">用接口表示数组 <a class="header-anchor" href="#用接口表示数组" aria-label="Permalink to &quot;用接口表示数组&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// NumberArray 表示：只要 index 的类型是 number，那么值的类型必须是 number。</span></span>
<span class="line"><span style="color:#E67E80;">interface</span><span style="color:#83C092;"> NumberArray</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    [index</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">]</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> fibonacci</span><span style="color:#859289;">:</span><span style="color:#83C092;"> NumberArray</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> [</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">2</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">3</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">5</span><span style="color:#D3C6AA;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="any-在数组中的应用" tabindex="-1">any 在数组中的应用 <a class="header-anchor" href="#any-在数组中的应用" aria-label="Permalink to &quot;any 在数组中的应用&quot;">​</a></h3><p>一个比较常见的做法是，用 any 表示数组中允许出现任意类型：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> list</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">[] </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [</span><span style="color:#DBBC7F;">&#39;Xcat Liu&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">25</span><span style="color:#D3C6AA;">, { website</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;http://xcatliu.com&#39;</span><span style="color:#D3C6AA;"> }];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="函数的类型" tabindex="-1">函数的类型 <a class="header-anchor" href="#函数的类型" aria-label="Permalink to &quot;函数的类型&quot;">​</a></h2><h3 id="函数声明" tabindex="-1">函数声明 <a class="header-anchor" href="#函数声明" aria-label="Permalink to &quot;函数声明&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// 函数声明（Function Declaration）</span></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> sum</span><span style="color:#D3C6AA;">(x</span><span style="color:#E69875;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> y</span><span style="color:#E69875;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">)</span><span style="color:#E69875;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> x</span><span style="color:#E69875;"> +</span><span style="color:#D3C6AA;"> y;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 输入多余的（或者少于要求的）参数，是不被允许的：</span></span>
<span class="line"><span style="color:#A7C080;">sum</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">2</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">3</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#A7C080;">sum</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// error TS2346: Supplied parameters do not match any signature of call target.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="函数表达式" tabindex="-1">函数表达式 <a class="header-anchor" href="#函数表达式" aria-label="Permalink to &quot;函数表达式&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// 函数表达式（Function Expression）</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#A7C080;"> mySum</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;"> (x</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> y</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> x</span><span style="color:#E69875;"> +</span><span style="color:#D3C6AA;"> y;</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这是可以通过编译的，不过事实上，上面的代码只对等号右侧的匿名函数进行了类型定义，而等号左边的 mySum，是通过赋值操作进行类型推论而推断出来的。如果需要我们手动给 mySum 添加类型，则应该是这样：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// 在 TypeScript 的类型定义中，=&gt; 用来表示函数的定义，左边是输入类型，需要用括号括起来，右边是输出类型。</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#A7C080;"> mySum</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> (x</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">, y</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">) </span><span style="color:#E69875;">=&gt;</span><span style="color:#7FBBB3;"> number</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;"> (x</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> y</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> x</span><span style="color:#E69875;"> +</span><span style="color:#D3C6AA;"> y;</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="可选参数" tabindex="-1">可选参数 <a class="header-anchor" href="#可选参数" aria-label="Permalink to &quot;可选参数&quot;">​</a></h3><p>输入多余的（或者少于要求的）参数，是不允许的，但可以我们用 <code>?</code> 表示可选的参数。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// 需要注意的是，可选参数必须接在必需参数后面。换句话说，可选参数后面不允许再出现必须参数了：</span></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> buildName</span><span style="color:#D3C6AA;">(firstName</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> lastName</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    if</span><span style="color:#D3C6AA;"> (lastName)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">        return</span><span style="color:#D3C6AA;"> firstName</span><span style="color:#E69875;"> +</span><span style="color:#DBBC7F;"> &#39; &#39;</span><span style="color:#E69875;"> +</span><span style="color:#D3C6AA;"> lastName;</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span><span style="color:#E67E80;"> else</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">        return</span><span style="color:#D3C6AA;"> firstName;</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> tomcat </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> buildName</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;Tom&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;Cat&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> tom </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> buildName</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;Tom&#39;</span><span style="color:#D3C6AA;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="参数默认值" tabindex="-1">参数默认值 <a class="header-anchor" href="#参数默认值" aria-label="Permalink to &quot;参数默认值&quot;">​</a></h3><p>在 ES6 中，我们允许给函数的参数添加默认值，TypeScript 会将添加了默认值的参数识别为可选参数。 此时就不受「可选参数必须接在必需参数后面」的限制了：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> buildName</span><span style="color:#D3C6AA;">(firstName</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#E69875;"> =</span><span style="color:#DBBC7F;"> &#39;Tom&#39;</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> lastName</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> firstName</span><span style="color:#E69875;"> +</span><span style="color:#DBBC7F;"> &#39; &#39;</span><span style="color:#E69875;"> +</span><span style="color:#D3C6AA;"> lastName;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> tomcat </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> buildName</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;Tom&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;Cat&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> cat </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> buildName</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">undefined</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;Cat&#39;</span><span style="color:#D3C6AA;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="剩余参数" tabindex="-1">剩余参数 <a class="header-anchor" href="#剩余参数" aria-label="Permalink to &quot;剩余参数&quot;">​</a></h3><p>ES6 中，可以使用 <code>...rest</code> 的方式获取函数中的剩余参数（rest 参数）。 事实上，下例的 items 是一个数组。所以我们可以用数组的类型来定义它：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// 注意，rest 参数只能是最后一个参数(ES6用法)</span></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> push</span><span style="color:#D3C6AA;">(array</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">[],</span><span style="color:#E69875;"> ...</span><span style="color:#D3C6AA;">items</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">[])</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    items</span><span style="color:#859289;">.</span><span style="color:#A7C080;">forEach</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">(item)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">        array</span><span style="color:#859289;">.</span><span style="color:#A7C080;">push</span><span style="color:#D3C6AA;">(item);</span></span>
<span class="line"><span style="color:#D3C6AA;">    });</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> a </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [];</span></span>
<span class="line"><span style="color:#A7C080;">push</span><span style="color:#D3C6AA;">(a, </span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">2</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">3</span><span style="color:#D3C6AA;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="重载" tabindex="-1">重载 <a class="header-anchor" href="#重载" aria-label="Permalink to &quot;重载&quot;">​</a></h3><p>重载允许一个函数接受不同数量或类型的参数时，作出不同的处理。</p><p>比如，我们需要实现一个函数 reverse，输入数字 123 的时候，输出反转的数字 321，输入字符串 &#39;hello&#39; 的时候，输出反转的字符串 &#39;olleh&#39;。</p><p>利用联合类型，我们可以这么实现：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> reverse</span><span style="color:#D3C6AA;">(x</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#E69875;"> |</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#E69875;"> |</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    if</span><span style="color:#D3C6AA;"> (</span><span style="color:#E67E80;">typeof</span><span style="color:#D3C6AA;"> x</span><span style="color:#E69875;"> ===</span><span style="color:#DBBC7F;"> &#39;number&#39;</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">        return</span><span style="color:#A7C080;"> Number</span><span style="color:#D3C6AA;">(x</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toString</span><span style="color:#D3C6AA;">()</span><span style="color:#859289;">.</span><span style="color:#A7C080;">split</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;&#39;</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">reverse</span><span style="color:#D3C6AA;">()</span><span style="color:#859289;">.</span><span style="color:#A7C080;">join</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;&#39;</span><span style="color:#D3C6AA;">));</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span><span style="color:#E67E80;"> else</span><span style="color:#E67E80;"> if</span><span style="color:#D3C6AA;"> (</span><span style="color:#E67E80;">typeof</span><span style="color:#D3C6AA;"> x</span><span style="color:#E69875;"> ===</span><span style="color:#DBBC7F;"> &#39;string&#39;</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">        return</span><span style="color:#D3C6AA;"> x</span><span style="color:#859289;">.</span><span style="color:#A7C080;">split</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;&#39;</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">reverse</span><span style="color:#D3C6AA;">()</span><span style="color:#859289;">.</span><span style="color:#A7C080;">join</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>但上例有一个缺点，就是不能够精确的表达。 我们希望输入为数字的时候，输出也应该为数字，输入为字符串的时候，输出也应该为字符串。</p><p>那可以使用<strong>重载</strong>定义多个 reverse 的函数类型：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> reverse</span><span style="color:#D3C6AA;">(x</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> reverse</span><span style="color:#D3C6AA;">(x</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> reverse</span><span style="color:#D3C6AA;">(x</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#E69875;"> |</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#E69875;"> |</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    if</span><span style="color:#D3C6AA;"> (</span><span style="color:#E67E80;">typeof</span><span style="color:#D3C6AA;"> x</span><span style="color:#E69875;"> ===</span><span style="color:#DBBC7F;"> &#39;number&#39;</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">        return</span><span style="color:#A7C080;"> Number</span><span style="color:#D3C6AA;">(x</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toString</span><span style="color:#D3C6AA;">()</span><span style="color:#859289;">.</span><span style="color:#A7C080;">split</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;&#39;</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">reverse</span><span style="color:#D3C6AA;">()</span><span style="color:#859289;">.</span><span style="color:#A7C080;">join</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;&#39;</span><span style="color:#D3C6AA;">));</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span><span style="color:#E67E80;"> else</span><span style="color:#E67E80;"> if</span><span style="color:#D3C6AA;"> (</span><span style="color:#E67E80;">typeof</span><span style="color:#D3C6AA;"> x</span><span style="color:#E69875;"> ===</span><span style="color:#DBBC7F;"> &#39;string&#39;</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">        return</span><span style="color:#D3C6AA;"> x</span><span style="color:#859289;">.</span><span style="color:#A7C080;">split</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;&#39;</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">reverse</span><span style="color:#D3C6AA;">()</span><span style="color:#859289;">.</span><span style="color:#A7C080;">join</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">//注意，TypeScript 会优先从最前面的函数定义开始匹配，所以多个函数定义如果有包含关系，需要优先把精确的定义写在前面。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="类型断言" tabindex="-1">类型断言 <a class="header-anchor" href="#类型断言" aria-label="Permalink to &quot;类型断言&quot;">​</a></h2><p>类型断言（Type Assertion）可以用来手动指定一个值的类型。</p><p>当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们只能访问此联合类型的所有类型里共有的属性或方法。而有时候，我们确实需要在还不确定类型的时候就访问其中一个类型的属性或方法，此时可以使用<strong>类型断言</strong>。</p><h3 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// &lt;类型&gt;值</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 或</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 值 as 类型</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 在 tsx 语法（React 的 jsx 语法的 ts 版）中必须用后一种。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-label="Permalink to &quot;例子&quot;">​</a></h3><p>下例中，获取 <code>something.length</code> 的时候会报错。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> getLength</span><span style="color:#D3C6AA;">(something</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#E69875;"> |</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    if</span><span style="color:#D3C6AA;"> (something</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">length)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">        return</span><span style="color:#D3C6AA;"> something</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">length;</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span><span style="color:#E67E80;"> else</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">        return</span><span style="color:#D3C6AA;"> something</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toString</span><span style="color:#D3C6AA;">()</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">length;</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// error TS2339: Property &#39;length&#39; does not exist on type &#39;string | number&#39;.</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// Property &#39;length&#39; does not exist on type &#39;number&#39;.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>此时可以使用类型断言，将 something 断言成 string：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> getLength</span><span style="color:#D3C6AA;">(something</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#E69875;"> |</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    if</span><span style="color:#D3C6AA;"> ((&lt;</span><span style="color:#7FBBB3;">string</span><span style="color:#D3C6AA;">&gt;something)</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">length)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">        return</span><span style="color:#D3C6AA;"> (&lt;</span><span style="color:#7FBBB3;">string</span><span style="color:#D3C6AA;">&gt;something)</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">length;</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span><span style="color:#E67E80;"> else</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">        return</span><span style="color:#D3C6AA;"> something</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toString</span><span style="color:#D3C6AA;">()</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">length;</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>类型断言的用法如上，在需要断言的变量前加上 <code>&lt;Type&gt;</code> 即可。</strong></p><p>类型断言不是类型转换，断言成一个联合类型中不存在的类型是不允许的：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> toBoolean</span><span style="color:#D3C6AA;">(something</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#E69875;"> |</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> boolean</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> &lt;</span><span style="color:#7FBBB3;">boolean</span><span style="color:#D3C6AA;">&gt;something;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// error TS2352: Type &#39;string | number&#39; cannot be converted to type &#39;boolean&#39;.</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// Type &#39;number&#39; is not comparable to type &#39;boolean&#39;.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="声明文件" tabindex="-1">声明文件 <a class="header-anchor" href="#声明文件" aria-label="Permalink to &quot;声明文件&quot;">​</a></h2><p>当使用第三方库时，我们需要引用它的声明文件。</p><h3 id="声明语句" tabindex="-1">声明语句 <a class="header-anchor" href="#声明语句" aria-label="Permalink to &quot;声明语句&quot;">​</a></h3><p>假如我们想使用第三方库，比如 jQuery，但是在 TypeScript 中，我们并不知道 <code>$</code> 或 <code>jQuery</code> 是什么东西：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">jQuery</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;#foo&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// error TS2304: Cannot find name &#39;jQuery&#39;.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这时，我们需要使用 declare 关键字来定义它的类型，帮助 TypeScript 判断我们传入的参数类型对不对：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">declare</span><span style="color:#E69875;"> var</span><span style="color:#A7C080;"> jQuery</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> (selector</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">) </span><span style="color:#E69875;">=&gt;</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#A7C080;">jQuery</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;#foo&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// declare 定义的类型只会用于编译时的检查，编译结果中会被删除。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="声明文件-1" tabindex="-1">声明文件 <a class="header-anchor" href="#声明文件-1" aria-label="Permalink to &quot;声明文件&quot;">​</a></h3><p>通常我们会把类型声明放到一个单独的文件中，这就是声明文件：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// jQuery.d.ts</span></span>
<span class="line"><span style="color:#E69875;">declare</span><span style="color:#E69875;"> var</span><span style="color:#A7C080;"> jQuery</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> (string) </span><span style="color:#E69875;">=&gt;</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p><strong>我们约定声明文件以 <code>.d.ts</code> 为后缀。</strong></p></blockquote><p>然后在使用到的文件的开头，用「三斜线指令」表示引用了声明文件：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">/// </span><span style="color:#A7C080;font-style:italic;">&lt;</span><span style="color:#E69875;font-style:italic;">reference</span><span style="color:#A7C080;font-style:italic;"> path</span><span style="color:#E69875;font-style:italic;">=</span><span style="color:#DBBC7F;font-style:italic;">&quot;./jQuery.d.ts&quot;</span><span style="color:#A7C080;font-style:italic;"> /&gt;</span></span>
<span class="line"><span style="color:#A7C080;">jQuery</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;#foo&#39;</span><span style="color:#D3C6AA;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="第三方声明文件" tabindex="-1">第三方声明文件 <a class="header-anchor" href="#第三方声明文件" aria-label="Permalink to &quot;第三方声明文件&quot;">​</a></h3><p>当然，jQuery 的声明文件不需要我们定义了，已经有人帮我们定义好了：<a href="https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/jquery/index.d.ts" target="_blank" rel="noreferrer">jQuery in DefinitelyTyped</a>。</p><p>我们可以直接下载下来使用，但是更推荐的是使用工具统一管理第三方库的声明文件。</p><p>社区已经有多种方式引入声明文件，不过 TypeScript 2.0 推荐使用 @types 来管理。</p><p>@types 的使用方式很简单，直接用 npm 安装对应的声明模块即可，以 jQuery 举例：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">npm install </span><span style="color:#83C092;">@</span><span style="color:#D3C6AA;">types</span><span style="color:#E69875;">/</span><span style="color:#D3C6AA;">jquery </span><span style="color:#E69875;">--</span><span style="color:#D3C6AA;">save</span><span style="color:#E69875;">-</span><span style="color:#D3C6AA;">dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>可以在<a href="http://microsoft.github.io/TypeSearch/" target="_blank" rel="noreferrer">TypeScript Types Search</a>搜索你需要的声明文件。</p><h2 id="内置对象" tabindex="-1">内置对象 <a class="header-anchor" href="#内置对象" aria-label="Permalink to &quot;内置对象&quot;">​</a></h2><p>JavaScript 中有很多<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects" target="_blank" rel="noreferrer">内置对象</a>，它们可以直接在 TypeScript 中当做定义好了的类型。 内置对象是指根据标准*（ECMAScript 和其他环境（比如 DOM）的标准）*在全局作用域（Global）上存在的对象。</p><h3 id="ecmascript-的内置对象" tabindex="-1">ECMAScript 的内置对象 <a class="header-anchor" href="#ecmascript-的内置对象" aria-label="Permalink to &quot;ECMAScript 的内置对象&quot;">​</a></h3><p>我们可以在 TypeScript 中将ECMAScript 标准提供的内置对象定义为这些类型：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> b</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Boolean</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> Boolean</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> e</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Error</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> Error</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;Error occurred&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> d</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Date</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> Date</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> r</span><span style="color:#859289;">:</span><span style="color:#83C092;"> RegExp</span><span style="color:#E69875;"> =</span><span style="color:#DBBC7F;"> /</span><span style="color:#D3C6AA;">[</span><span style="color:#DBBC7F;">a-z</span><span style="color:#D3C6AA;">]</span><span style="color:#DBBC7F;">/</span><span style="color:#D3C6AA;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>而他们的定义文件，则在 <a href="https://github.com/Microsoft/TypeScript/tree/master/src/lib" target="_blank" rel="noreferrer">TypeScript 核心库</a> 定义的文件中。</p><h3 id="dom-和-bom-的内置对象" tabindex="-1">DOM 和 BOM 的内置对象 <a class="header-anchor" href="#dom-和-bom-的内置对象" aria-label="Permalink to &quot;DOM 和 BOM 的内置对象&quot;">​</a></h3><p>DOM 和 BOM 提供的内置对象有：<code>Document</code>、<code>HTMLElement</code>、<code>Event</code>、<code>NodeList</code> 等。 TypeScript 中会经常用到这些类型：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> body</span><span style="color:#859289;">:</span><span style="color:#83C092;"> HTMLElement</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> document</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">body;</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> allDiv</span><span style="color:#859289;">:</span><span style="color:#83C092;"> NodeList</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> document</span><span style="color:#859289;">.</span><span style="color:#A7C080;">querySelectorAll</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;div&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">document</span><span style="color:#859289;">.</span><span style="color:#A7C080;">addEventListener</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;click&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">(e</span><span style="color:#859289;">:</span><span style="color:#83C092;"> MouseEvent</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // Do something</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>而他们的定义文件，同样在 <a href="https://github.com/Microsoft/TypeScript/tree/master/src/lib" target="_blank" rel="noreferrer">TypeScript 核心库</a> 定义的文件中。</p><h3 id="typescript-核心库的定义文件" tabindex="-1">TypeScript 核心库的定义文件 <a class="header-anchor" href="#typescript-核心库的定义文件" aria-label="Permalink to &quot;TypeScript 核心库的定义文件&quot;">​</a></h3><p>TypeScript 核心库的定义文件中定义了所有浏览器环境需要用到的类型，并且是预置在 TypeScript 中的。 当你在使用一些常用的方法的时候，TypeScript 实际上已经帮你做了很多类型判断的工作了。 比如：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">Math</span><span style="color:#859289;">.</span><span style="color:#A7C080;">pow</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">10</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;2&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// error TS2345: Argument of type &#39;string&#39; is not assignable to parameter of type &#39;number&#39;.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>上面的例子中，<code>Math.pow</code> 必须接受两个 number 类型的参数。事实上 <code>Math.pow</code> 的类型定义如下：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">interface</span><span style="color:#83C092;"> Math</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">     * Returns the value of a base expression taken to a specified power.</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">     * </span><span style="color:#E67E80;font-style:italic;">@param</span><span style="color:#D3C6AA;font-style:italic;"> x</span><span style="color:#859289;font-style:italic;"> The base value of the expression.</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">     * </span><span style="color:#E67E80;font-style:italic;">@param</span><span style="color:#D3C6AA;font-style:italic;"> y</span><span style="color:#859289;font-style:italic;"> The exponent value of the expression.</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#A7C080;">    pow</span><span style="color:#D3C6AA;">(x</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">, y</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>再举一个 DOM 中的例子：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">document</span><span style="color:#859289;">.</span><span style="color:#A7C080;">addEventListener</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;click&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">(e)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(e</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">targetCurrent);</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// error TS2339: Property &#39;targetCurrent&#39; does not exist on type &#39;MouseEvent&#39;.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>上面的例子中，<code>addEventListener</code> 方法是在 TypeScript 核心库中定义的：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">interface</span><span style="color:#83C092;"> Document</span><span style="color:#E69875;"> extends</span><span style="color:#83C092;"> Node</span><span style="color:#D3C6AA;">, </span><span style="color:#83C092;">GlobalEventHandlers</span><span style="color:#D3C6AA;">, </span><span style="color:#83C092;">NodeSelector</span><span style="color:#D3C6AA;">, </span><span style="color:#83C092;">DocumentEvent</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">    addEventListener</span><span style="color:#D3C6AA;">(type</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">, </span><span style="color:#A7C080;">listener</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> (ev</span><span style="color:#859289;">:</span><span style="color:#83C092;"> MouseEvent</span><span style="color:#D3C6AA;">) </span><span style="color:#E69875;">=&gt;</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">, useCapture</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> boolean</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> void</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>所以 <code>e</code> 被推断成了 <code>MouseEvent</code>，而 <code>MouseEvent</code> 是没有 <code>targetCurrent</code> 属性的，所以报错了。</p><h3 id="node" tabindex="-1">Node <a class="header-anchor" href="#node" aria-label="Permalink to &quot;Node&quot;">​</a></h3><p>Node.js 不是内置对象的一部分，如果想用 TypeScript 写 Node.js，则需要引入第三方声明文件：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">npm install </span><span style="color:#83C092;">@</span><span style="color:#D3C6AA;">types</span><span style="color:#E69875;">/</span><span style="color:#D3C6AA;">node </span><span style="color:#E69875;">--</span><span style="color:#D3C6AA;">save</span><span style="color:#E69875;">-</span><span style="color:#D3C6AA;">dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,168)]))}const d=n(e,[["render",o]]);export{b as __pageData,d as default};
