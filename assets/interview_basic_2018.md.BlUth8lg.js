import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.D-6U7MZ9.js";const e="/n-book/assets/SSL_Handshake.DjN8P9UF.png",o="/n-book/assets/defer_async.B8JW7lZD.jpg",b=JSON.parse('{"title":"2018","description":"","frontmatter":{},"headers":[],"relativePath":"interview/basic_2018.md","filePath":"interview/basic_2018.md","lastUpdated":1639626637000}'),t={name:"interview/basic_2018.md"};function r(c,s,i,y,A,d){return l(),a("div",null,s[0]||(s[0]=[p('<h1 id="_2018" tabindex="-1">2018 <a class="header-anchor" href="#_2018" aria-label="Permalink to &quot;2018&quot;">​</a></h1><h2 id="浏览器" tabindex="-1">浏览器 <a class="header-anchor" href="#浏览器" aria-label="Permalink to &quot;浏览器&quot;">​</a></h2><h3 id="从浏览器地址栏输入url到显示页面的步骤" tabindex="-1"><strong>从浏览器地址栏输入url到显示页面的步骤?</strong> <a class="header-anchor" href="#从浏览器地址栏输入url到显示页面的步骤" aria-label="Permalink to &quot;**从浏览器地址栏输入url到显示页面的步骤?**&quot;">​</a></h3><p><strong>基础版本</strong></p><ol><li>浏览器根据请求的URL交给DNS域名解析，找到真实IP，向服务器发起请求；</li><li>服务器交给后台处理完成后返回数据，浏览器接收文件（HTML、JS、CSS、图象等）；</li><li>浏览器对加载到的资源（HTML、JS、CSS等）进行语法解析，建立相应的内部数据结构（如HTML的DOM）；</li><li>载入解析到的资源文件，渲染页面，完成。</li></ol><p><strong>详细简版</strong></p><ol><li><p>从浏览器接收url到开启网络请求线程（这一部分可以展开浏览器的机制以及进程与线程之间的关系）</p></li><li><p>开启网络线程到发出一个完整的http请求（这一部分涉及到dns查询，tcp/ip请求，五层因特网协议栈等知识）</p></li><li><p>从服务器接收到请求到对应后台接收到请求（这一部分可能涉及到负载均衡，安全拦截以及后台内部的处理等等）</p></li><li><p>后台和前台的http交互（这一部分包括http头部、响应码、报文结构、cookie等知识，可以提下静态资源的cookie优化，以及编码解码，如gzip压缩等）。</p></li></ol><p>还有，单独拎出来的缓存问题，http的缓存（这部分包括http缓存头部，etag，catch-control等）</p><ol start="5"><li><p>浏览器接收到http数据包后的解析流程（解析html-词法分析然后解析成dom树、解析css生成css规则树、合并成render树，然后layout、painting渲染、复合图层的合成、GPU绘制、外链资源的处理、loaded和domcontentloaded等）</p></li><li><p>CSS的可视化格式模型（元素的渲染规则，如包含块，控制框，BFC，IFC等概念）</p></li><li><p>JS引擎解析过程（JS的解释阶段，预处理阶段，执行阶段生成执行上下文，VO，作用域链、回收机制等等）</p></li><li><p>其它（可以拓展不同的知识模块，如跨域，web安全，hybrid模式等等内容）</p></li></ol><p><strong>详细版</strong></p><ol><li>在浏览器地址栏输入URL</li><li>浏览器查看缓存，如果请求资源在缓存中并且新鲜，跳转到转码步骤 <ol><li>如果资源未缓存，发起新请求</li><li>如果已缓存，检验是否足够新鲜，足够新鲜直接提供给客户端，否则与服务器进行验证。</li><li>检验新鲜通常有两个HTTP头进行控制Expires和Cache-Control： <ul><li>HTTP1.0提供Expires，值为一个绝对时间表示缓存新鲜日期</li><li>HTTP1.1增加了Cache-Control: max-age=,值为以秒为单位的最大新鲜时间</li></ul></li></ol></li><li>浏览器<strong>解析URL</strong>：获取协议，主机，端口，path</li><li>浏览器<strong>组装一个HTTP（GET）请求报文</strong></li><li>浏览器<strong>获取主机ip地址</strong>，过程如下： <ol><li>浏览器缓存</li><li>本机缓存</li><li>hosts文件</li><li>路由器缓存</li><li>ISP DNS缓存</li><li>DNS递归查询（可能存在负载均衡导致每次IP不一样）</li></ol></li><li><strong>打开一个socket 与目标IP地址、端口建立TCP链接</strong>，三次握手。</li><li>TCP链接建立后<strong>发送HTTP请求</strong>。</li><li>服务器接受请求并解析，将请求转发到服务程序，如虚拟主机使用HTTP Host头部判断请求的服务程序。</li><li>服务器检查<strong>HTTP请求头是否包含缓存验证信息</strong>如果验证缓存新鲜，返回<strong>304</strong>等对应状态码。</li><li>处理程序读取完整请求并准备HTTP响应，可能需要查询数据库等操作。</li><li>服务器将<strong>响应报文通过TCP连接发送回浏览器</strong>。</li><li>浏览器接收HTTP响应，然后根据情况选择关闭TCP连接或者保留重用，关闭TCP连接的四次握手</li><li>浏览器检查响应状态吗：是否为1XX，3XX， 4XX， 5XX，这些情况处理与2XX不同</li><li>如果资源可缓存，进行缓存</li><li>对响应进行解码（例如gzip压缩）</li><li>根据资源类型决定如何处理（假设资源为HTML文档）。解析HTML文档，构件DOM树，下载资源，构造CSSOM树，执行js脚本**。</li><li>构建DOM树： <ol><li><strong>Tokenizing</strong>：根据HTML规范将字符流解析为标记</li><li><strong>Lexing</strong>：词法分析将标记转换为对象并定义属性和规则</li><li><strong>DOM construction</strong>：根据HTML标记关系将对象组成DOM树</li></ol></li><li>解析过程中遇到图片、样式表、js文件，启动下载。</li><li>构建CSSOM树： <ol><li><strong>Tokenizing</strong>：字符流转换为标记流</li><li><strong>Node</strong>：根据标记创建节点</li><li><strong>CSSOM</strong>：节点创建CSSOM树</li></ol></li><li><a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction" target="_blank" rel="noreferrer">根据DOM树和CSSOM树构建渲染树</a> : <ol><li>从DOM树的根节点遍历所有<strong>可见节点</strong>，不可见节点包括： <ol><li>script,meta这样本身不可见的标签。</li><li>被css隐藏的节点，如display: none</li></ol></li><li>对每一个可见节点，找到恰当的CSSOM规则并应用</li><li>发布可视节点的内容和计算样式</li></ol></li><li>js解析： <ol><li>浏览器创建Document对象并解析HTML，将解析到的元素和文本节点添加到文档中，此时document.readystate为loading</li><li>HTML解析器遇到没有async和defer的脚本时，将他们添加到文档中，然后执行行内或外部脚本。这些脚本会同步执行，并且在脚本下载和执行时解析器会暂停。这样就可以用document.write()把文本插入到输入流中。</li><li>当解析器遇到设置了<strong>async</strong>属性的script时，开始下载脚本并继续解析文档。脚本会在它下载完成后尽快执行，但是解析器不会停下来等它下载。</li><li>当文档完成解析，document.readState变成interactive</li><li>所有 defer 脚本会按照在文档出现的顺序执行，延迟脚本能访问完整文档树</li><li>浏览器在Document对象上触发DOMContentLoaded事件</li><li>此时文档完全解析完成，浏览器可能还在等待如图片等内容加载，等这些内容完成载入并且所有异步脚本完成载入和执行，document.readState变为complete, window触发load事件。</li></ol></li><li>显示页面（HTML解析过程中会逐步显示页面）</li></ol><h3 id="关于gzip压缩" tabindex="-1">关于gzip压缩 <a class="header-anchor" href="#关于gzip压缩" aria-label="Permalink to &quot;关于gzip压缩&quot;">​</a></h3><p><a href="https://segmentfault.com/a/1190000012800222" target="_blank" rel="noreferrer">探索HTTP传输中gzip压缩的秘密</a></p><h3 id="ssl-tls协议运行机制" tabindex="-1">SSL/TLS协议运行机制 <a class="header-anchor" href="#ssl-tls协议运行机制" aria-label="Permalink to &quot;SSL/TLS协议运行机制&quot;">​</a></h3><p>基本的运行过程： 握手阶段分成五步。</p><p>第一步，<code>Client</code>给出协议版本号、一个客户端生成的随机数（Client random），以及客户端支持的加密方法。</p><p>第二步，<code>Server</code>确认双方使用的加密方法，并给出数字证书、以及一个服务器生成的随机数（Server random）。</p><p>第三步，<code>Client</code>确认数字证书有效，然后生成一个新的随机数（Premaster secret），并使用数字证书中的公钥，加密这个随机数，发给<code>Server</code>。</p><p>第四步，<code>Server</code>使用自己的私钥，获取<code>Client</code>发来的随机数（即Premaster secret）。</p><p>第五步，<code>Client</code>和<code>Server</code>根据约定的加密方法，使用前面的三个随机数，生成&quot;对话密钥&quot;（session key），用来加密接下来的整个对话过程。</p><p><img src="'+e+`" alt="SSL_Handshake"></p><p>握手阶段有三点需要注意。</p><p>（1）生成对话密钥一共需要三个随机数。</p><p>（2）握手之后的对话使用&quot;对话密钥&quot;加密（对称加密），服务器的公钥和私钥只用于加密和解密&quot;对话密钥&quot;（非对称加密），无其他作用。</p><p>（3）服务器公钥放在服务器的数字证书之中。</p><p>握手阶段用来建立SSL连接。如果出于某种原因，对话中断，就需要重新握手。</p><p>这时有两种方法可以恢复原来的session：一种叫做session ID，另一种叫做session ticket。</p><p>session ID的思想很简单，就是每一次对话都有一个编号（session ID）。如果对话中断，下次重连的时候，只要客户端给出这个编号，且服务器有这个编号的记录，双方就可以重新使用已有的&quot;对话密钥&quot;，而不必重新生成一把。</p><p>session ID是目前所有浏览器都支持的方法，但是它的缺点在于session ID往往只保留在一台服务器上。所以，如果客户端的请求发到另一台服务器，就无法恢复对话。session ticket就是为了解决这个问题而诞生的，目前只有Firefox和Chrome浏览器支持。</p><p>客户端不再发送session ID，而是发送一个服务器在上一次对话中发送过来的session ticket。这个session ticket是加密的，只有服务器才能解密，其中包括本次对话的主要信息，比如对话密钥和加密方法。当服务器收到session ticket以后，解密后就不必重新生成对话密钥了。</p><p><a href="http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html" target="_blank" rel="noreferrer">图解SSL/TLS协议</a></p><h3 id="http状态码及其含义" tabindex="-1">HTTP状态码及其含义 <a class="header-anchor" href="#http状态码及其含义" aria-label="Permalink to &quot;HTTP状态码及其含义&quot;">​</a></h3><ul><li>1XX：信息状态码 <ul><li><code>100 Continue</code> 继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息</li></ul></li><li>2XX：成功状态码 <ul><li><code>200 OK</code> 正常返回信息</li><li><code>201 Created</code> 请求成功并且服务器创建了新的资源</li><li><code>202 Accepted</code> 服务器已接受请求，但尚未处理</li></ul></li><li>3XX：重定向 <ul><li><code>301 Moved Permanently</code> 请求的网页已永久移动到新位置。</li><li><code>302 Found</code> 临时性重定向。</li><li><code>303 See Other</code> 临时性重定向，且总是使用 GET 请求新的 URI。</li><li><code>304 Not Modified</code> 自从上次请求后，请求的网页未修改过。</li></ul></li><li>4XX：客户端错误 <ul><li><code>400 Bad Request</code> 服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。</li><li><code>401 Unauthorized</code> 请求未授权。</li><li><code>403 Forbidden</code> 禁止访问。</li><li><code>404 Not Found</code> 找不到如何与 URI 相匹配的资源。</li></ul></li><li>5XX: 服务器错误 <ul><li><code>500 Internal Server Error</code>最常见的服务器端错误。</li><li><code>503 Service Unavailable</code> 服务器端暂时无法处理请求（可能是过载或维护）。</li></ul></li></ul><h3 id="html5的离线储存怎么使用" tabindex="-1">HTML5的离线储存怎么使用 <a class="header-anchor" href="#html5的离线储存怎么使用" aria-label="Permalink to &quot;HTML5的离线储存怎么使用&quot;">​</a></h3><p>在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件。</p><p>原理：HTML5的离线存储是基于一个新建的<code>.appcache</code>文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示。</p><p>在线的情况下，浏览器发现html头部有 <code>manifest</code> 属性，它会请求 <code>manifest</code> 文件，如果是第一次访问app，那么浏览器就会根据 <code>manifest</code> 文件的内容下载相应的资源并且进行离线存储。如果已经访问过app并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的 <code>manifest</code> 文件与旧的 <code>manifest</code> 文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。</p><p>离线的情况下，浏览器就直接使用离线存储的资源。</p><h3 id="请描述一下-cookies-sessionstorage-和-localstorage-的区别" tabindex="-1">请描述一下 cookies，sessionStorage 和 localStorage 的区别？ <a class="header-anchor" href="#请描述一下-cookies-sessionstorage-和-localstorage-的区别" aria-label="Permalink to &quot;请描述一下 cookies，sessionStorage 和 localStorage 的区别？&quot;">​</a></h3><p><code>cookie</code>是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）</p><p><code>cookie</code>数据始终在同源的http请求中携带（即使不需要），会在浏览器和服务器间来回传递。</p><p><code>sessionStorage</code> 和 <code>localStorage</code> 不会自动把数据发给服务器，仅在本地保存。</p><p><strong>存储大小：</strong></p><p><code>cookie</code> 数据大小不能超过4k。</p><p><code>sessionStorage</code> 和 <code>localStorage</code> 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。</p><p><strong>有期时间：</strong></p><p><code>localStorage</code> 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据。</p><p><code>sessionStorage</code> 数据在当前浏览器窗口关闭后自动删除。</p><p><code>cookie</code> 在设置过期时间之前一直有效，即使窗口或浏览器关闭。</p><h3 id="canvas和svg有什么区别" tabindex="-1">Canvas和SVG有什么区别？ <a class="header-anchor" href="#canvas和svg有什么区别" aria-label="Permalink to &quot;Canvas和SVG有什么区别？&quot;">​</a></h3><p><code>svg</code>绘制出来的每一个图形的元素都是独立的DOM节点，能够方便的绑定事件或用来修改。<code>canvas</code>输出的是一整幅画布。</p><p><code>svg</code>输出的图形是矢量图形，后期可以修改参数来自由放大缩小，不会是真和锯齿。而<code>canvas</code>输出标量画布，就像一张图片一样，放大会失真或者锯齿。</p><h3 id="viewport" tabindex="-1">viewport <a class="header-anchor" href="#viewport" aria-label="Permalink to &quot;viewport&quot;">​</a></h3><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">&lt;</span><span style="color:#E69875;">meta</span><span style="color:#DBBC7F;"> name</span><span style="color:#A7C080;">=</span><span style="color:#A7C080;">&quot;viewport&quot;</span><span style="color:#DBBC7F;"> content</span><span style="color:#A7C080;">=</span><span style="color:#A7C080;">&quot;width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no&quot;</span><span style="color:#A7C080;"> /&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">// width    设置viewport宽度，为一个正整数，或字符串‘device-width’</span></span>
<span class="line"><span style="color:#D3C6AA;">// device-width  设备宽度</span></span>
<span class="line"><span style="color:#D3C6AA;">// height   设置viewport高度，一般设置了宽度，会自动解析出高度，可以不用设置</span></span>
<span class="line"><span style="color:#D3C6AA;">// initial-scale    默认缩放比例（初始缩放比例），为一个数字，可以带小数</span></span>
<span class="line"><span style="color:#D3C6AA;">// minimum-scale    允许用户最小缩放比例，为一个数字，可以带小数</span></span>
<span class="line"><span style="color:#D3C6AA;">// maximum-scale    允许用户最大缩放比例，为一个数字，可以带小数</span></span>
<span class="line"><span style="color:#D3C6AA;">// user-scalable    是否允许手动缩放</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="http-request报文结构是怎样的" tabindex="-1">HTTP request报文结构是怎样的 <a class="header-anchor" href="#http-request报文结构是怎样的" aria-label="Permalink to &quot;HTTP request报文结构是怎样的&quot;">​</a></h3><ol><li>首行是Request-Line包括：请求方法，请求URI，协议版本，CRLF(回车)。</li><li>首行之后是若干行请求头，包括general-header，request-header或者entity-header，每个一行以CRLF结束。</li><li>请求头和消息实体之间有一个空格分隔。</li><li>根据实际请求需要可能包含一个消息实体。</li></ol><p>打开浏览器 Network 查看。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span>GET /3.1169b2a6cacf9af45186.hot-update.js HTTP/1.1</span></span>
<span class="line"><span>Host: localhost:8084</span></span>
<span class="line"><span>Connection: keep-alive</span></span>
<span class="line"><span>Pragma: no-cache</span></span>
<span class="line"><span>Cache-Control: no-cache</span></span>
<span class="line"><span>User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</span></span>
<span class="line"><span>DNT: 1</span></span>
<span class="line"><span>Accept: */*</span></span>
<span class="line"><span>Referer: http://localhost:8084/n-book/interview/2018.html</span></span>
<span class="line"><span>Accept-Encoding: gzip, deflate, br</span></span>
<span class="line"><span>Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,zh-TW;q=0.7</span></span>
<span class="line"><span>Cookie: _tact=4183429219</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="http-response报文结构是怎样的" tabindex="-1">HTTP response报文结构是怎样的 <a class="header-anchor" href="#http-response报文结构是怎样的" aria-label="Permalink to &quot;HTTP response报文结构是怎样的&quot;">​</a></h3><ol><li>首行是状态行包括：HTTP版本，状态码，状态描述，后面跟一个CRLF(回车)。</li><li>首行之后是若干行响应头，包括：通用头部，响应头部，实体头部。</li><li>响应头部和响应实体之间用一个空格分隔。</li><li>最后是一个可能的消息实体</li></ol><p>打开浏览器 Network 查看。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span>HTTP/1.1 200 OK</span></span>
<span class="line"><span>Accept-Ranges: bytes</span></span>
<span class="line"><span>Content-Type: application/javascript; charset=UTF-8</span></span>
<span class="line"><span>Content-Length: 110055</span></span>
<span class="line"><span>Date: Tue, 19 Feb 2019 08:49:26 GMT</span></span>
<span class="line"><span>Connection: keep-alive</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="get和post的区别" tabindex="-1">GET和POST的区别 <a class="header-anchor" href="#get和post的区别" aria-label="Permalink to &quot;GET和POST的区别&quot;">​</a></h3><p><a href="https://segmentfault.com/a/1190000018129846" target="_blank" rel="noreferrer">GET和POST的区别</a></p><h3 id="e-target与e-currenttarget的区别" tabindex="-1">e.target与e.currentTarget的区别 <a class="header-anchor" href="#e-target与e-currenttarget的区别" aria-label="Permalink to &quot;e.target与e.currentTarget的区别&quot;">​</a></h3><p>e.target 指向触发事件监听的对象。</p><p>e.currentTarget 指向添加监听事件的对象（addEventListener监听的那个对象）。</p><p><a href="https://www.jianshu.com/p/1dd668ccc97a" target="_blank" rel="noreferrer">解析</a></p><h3 id="html5新增标签" tabindex="-1">HTML5新增标签 <a class="header-anchor" href="#html5新增标签" aria-label="Permalink to &quot;HTML5新增标签&quot;">​</a></h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/HTML5/HTML5_element_list" target="_blank" rel="noreferrer">MDN</a></p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">&lt;</span><span style="color:#E69875;">section</span><span style="color:#A7C080;">&gt;</span><span style="color:#A7C080;"> &lt;</span><span style="color:#E69875;">nav</span><span style="color:#A7C080;">&gt;</span><span style="color:#A7C080;"> &lt;</span><span style="color:#E69875;">article</span><span style="color:#A7C080;">&gt;</span><span style="color:#A7C080;"> &lt;</span><span style="color:#E69875;">aside</span><span style="color:#A7C080;">&gt;</span><span style="color:#A7C080;"> &lt;</span><span style="color:#E69875;">header</span><span style="color:#A7C080;">&gt;</span><span style="color:#A7C080;"> &lt;</span><span style="color:#E69875;">footer</span><span style="color:#A7C080;">&gt;</span><span style="color:#A7C080;"> &lt;</span><span style="color:#E69875;">main</span><span style="color:#A7C080;">&gt;</span><span style="color:#A7C080;"> &lt;</span><span style="color:#E69875;">template</span><span style="color:#A7C080;">&gt;</span><span style="color:#A7C080;"> &lt;</span><span style="color:#E69875;">figure</span><span style="color:#A7C080;">&gt;</span><span style="color:#A7C080;"> &lt;</span><span style="color:#E69875;">figcaption</span><span style="color:#A7C080;">&gt;</span><span style="color:#A7C080;"> &lt;</span><span style="color:#E69875;">time</span><span style="color:#A7C080;">&gt;</span><span style="color:#A7C080;"> &lt;</span><span style="color:#E69875;">mark</span><span style="color:#A7C080;">&gt;</span><span style="color:#D3C6AA;"> </span></span>
<span class="line"><span style="color:#A7C080;">&lt;</span><span style="color:#E69875;">embed</span><span style="color:#A7C080;">&gt;</span><span style="color:#A7C080;"> &lt;</span><span style="color:#E69875;">video</span><span style="color:#A7C080;">&gt;</span><span style="color:#A7C080;"> &lt;</span><span style="color:#E69875;">audio</span><span style="color:#A7C080;">&gt;</span><span style="color:#A7C080;"> &lt;</span><span style="color:#E69875;">source</span><span style="color:#A7C080;">&gt;</span><span style="color:#A7C080;"> &lt;</span><span style="color:#E69875;">track</span><span style="color:#A7C080;">&gt;</span><span style="color:#A7C080;"> &lt;</span><span style="color:#E69875;">canvas</span><span style="color:#A7C080;">&gt;</span><span style="color:#A7C080;"> &lt;</span><span style="color:#E69875;">svg</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">&lt;</span><span style="color:#E69875;">math</span><span style="color:#A7C080;">&gt;</span><span style="color:#A7C080;"> &lt;</span><span style="color:#E69875;">progress</span><span style="color:#A7C080;">&gt;</span><span style="color:#A7C080;"> &lt;</span><span style="color:#E69875;">output</span><span style="color:#A7C080;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="dns预解析-dns-prefetch" tabindex="-1">DNS预解析/dns-prefetch <a class="header-anchor" href="#dns预解析-dns-prefetch" aria-label="Permalink to &quot;DNS预解析/dns-prefetch&quot;">​</a></h3><p>DNS 预解析是一项使浏览器主动去执行域名解析的功能，其范围包括文档的所有链接，无论是图片的，CSS 的，还是 JavaScript 等其他用户能够点击的 URL。因为预读取会在后台执行，所以 DNS 很可能在链接对应的东西出现之前就已经解析完毕。这能够减少用户点击链接时的延迟。</p><p>在某些浏览器中这个预读取的行为将会与页面实际内容并行发生（而不是串行）。正因如此，某些高延迟的域名的解析过程才不会卡住资源的加载。 这样可以极大的加速（尤其是移动网络环境下）页面的加载。在某些图片较多的页面中，在发起图片加载请求之前预先把域名解析好将会有至少 5% 的图片加载速度提升。</p><p><strong>打开和关闭 DNS 预解析</strong></p><ol><li>第一种方式，服务端返回的 <code>X-DNS-Prefetch-Control</code> 报头开启，或是在文档中使用值为 <code>http-equiv</code> 的 <code>&lt;meta&gt;</code> 标签：</li></ol><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">&lt;</span><span style="color:#E69875;">meta</span><span style="color:#DBBC7F;"> http-equiv</span><span style="color:#A7C080;">=</span><span style="color:#A7C080;">&quot;x-dns-prefetch-control&quot;</span><span style="color:#DBBC7F;"> content</span><span style="color:#A7C080;">=</span><span style="color:#A7C080;">&quot;on&quot;</span><span style="color:#A7C080;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>通过将 <code>content</code> 的参数设置为<code>on</code>或 <code>off</code> 来开启或关闭。</p><ol start="2"><li>第二种方式，可以通过使用 <code>rel</code> 为 <code>dns-prefetch</code> ，在 <code>&lt;link&gt;</code> 标签上对特定域名进行预读取：</li></ol><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">&lt;</span><span style="color:#E69875;">link</span><span style="color:#DBBC7F;"> rel</span><span style="color:#A7C080;">=</span><span style="color:#A7C080;">&quot;dns-prefetch&quot;</span><span style="color:#DBBC7F;"> href</span><span style="color:#A7C080;">=</span><span style="color:#A7C080;">&quot;//www.spreadfirefox.com/&quot;</span><span style="color:#A7C080;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>另外需要注意的是，<strong>浏览器会对a标签的href自动启用DNS Prefetching，所以a标签里包含的域名不需要在head中手动设置link。但是在HTTPS下不起作用，需要meta来强制开启功能。</strong></p><p>这个限制的原因是防止窃听者根据<code>DNS Prefetching</code>推断显示在HTTPS页面中超链接的主机名。</p><h2 id="css" tabindex="-1">CSS <a class="header-anchor" href="#css" aria-label="Permalink to &quot;CSS&quot;">​</a></h2><h3 id="什么是fouc-如何避免" tabindex="-1">什么是FOUC?如何避免 <a class="header-anchor" href="#什么是fouc-如何避免" aria-label="Permalink to &quot;什么是FOUC?如何避免&quot;">​</a></h3><p><code>Flash Of Unstyled Content</code>：用户定义样式表加载之前浏览器使用默认样式显示文档，用户样式加载渲染之后再从新显示文档，造成页面闪烁。</p><p>解决方法：把样式表放到文档的head。</p><h3 id="如何创建块级格式化上下文-block-formatting-context-bfc有什么用" tabindex="-1"><strong>如何创建块级格式化上下文(block formatting context)，BFC有什么用</strong> <a class="header-anchor" href="#如何创建块级格式化上下文-block-formatting-context-bfc有什么用" aria-label="Permalink to &quot;**如何创建块级格式化上下文(block formatting context)，BFC有什么用**&quot;">​</a></h3><ul><li>创建规则： <ul><li>根元素</li><li>浮动元素（float不是none）</li><li>绝对定位元素（position取值为absolute或fixed）</li><li>display取值为<code>inline-block</code>,<code>table-cell</code>,<code>table-caption</code>,<code>flex</code>,<code>inline-flex</code>之一的元素</li><li>overflow不是visible的元素</li></ul></li><li>作用： <ul><li>可以包含浮动元素</li><li>不被浮动元素覆盖</li><li>阻止父子元素的margin折叠</li></ul></li></ul><p><a href="https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context" target="_blank" rel="noreferrer">BFC - MDN</a></p><h3 id="bfc" tabindex="-1">BFC <a class="header-anchor" href="#bfc" aria-label="Permalink to &quot;BFC&quot;">​</a></h3><p><a href="http://www.cnblogs.com/xiaohuochai/p/5248536.html" target="_blank" rel="noreferrer">深入理解BFC</a></p><h2 id="javascript" tabindex="-1">JavaScript <a class="header-anchor" href="#javascript" aria-label="Permalink to &quot;JavaScript&quot;">​</a></h2><h3 id="javascript如何实现继承" tabindex="-1">Javascript如何实现继承？ <a class="header-anchor" href="#javascript如何实现继承" aria-label="Permalink to &quot;Javascript如何实现继承？&quot;">​</a></h3><h3 id="事件模型" tabindex="-1">事件模型 <a class="header-anchor" href="#事件模型" aria-label="Permalink to &quot;事件模型&quot;">​</a></h3><ul><li>冒泡型事件：当你使用事件冒泡时，子级元素先触发，父级元素后触发</li><li>捕获型事件：当你使用事件捕获时，父级元素先触发，子级元素后触发</li><li>DOM事件流：同时支持两种事件模型：捕获型事件和冒泡型事件</li><li>阻止冒泡：在W3c中，使用stopPropagation（）方法；在IE下设置cancelBubble = true</li><li>阻止捕获：阻止事件的默认行为。在W3c中，使用preventDefault（）方法，在IE下设置window.event.returnValue = false</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// 阻止冒泡</span></span>
<span class="line"><span style="color:#D3C6AA;">event</span><span style="color:#859289;">.</span><span style="color:#A7C080;">stopPropagation</span><span style="color:#D3C6AA;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="手写ajax请求" tabindex="-1">手写ajax请求 <a class="header-anchor" href="#手写ajax请求" aria-label="Permalink to &quot;手写ajax请求&quot;">​</a></h3><p>简单版</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// 1. 创建连接</span></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> xhr </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> null</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">xhr </span><span style="color:#E69875;">=</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> XMLHttpRequest</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 2. 连接服务器</span></span>
<span class="line"><span style="color:#D3C6AA;">xhr</span><span style="color:#859289;">.</span><span style="color:#A7C080;">open</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;get&#39;</span><span style="color:#D3C6AA;">, url, </span><span style="color:#D699B6;">true</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 3. 发送请求</span></span>
<span class="line"><span style="color:#D3C6AA;">xhr</span><span style="color:#859289;">.</span><span style="color:#A7C080;">send</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">null</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 4. 接受请求</span></span>
<span class="line"><span style="color:#D3C6AA;">xhr</span><span style="color:#859289;">.</span><span style="color:#A7C080;">onreadystatechange</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">(){</span></span>
<span class="line"><span style="color:#E67E80;">	if</span><span style="color:#D3C6AA;">(xhr</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">readyState</span><span style="color:#E69875;"> ==</span><span style="color:#D699B6;"> 4</span><span style="color:#D3C6AA;">){</span></span>
<span class="line"><span style="color:#E67E80;">		if</span><span style="color:#D3C6AA;">(xhr</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">status</span><span style="color:#E69875;"> ==</span><span style="color:#D699B6;"> 200</span><span style="color:#D3C6AA;">){</span></span>
<span class="line"><span style="color:#A7C080;">			success</span><span style="color:#D3C6AA;">(xhr</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">responseText);</span></span>
<span class="line"><span style="color:#D3C6AA;">		}</span><span style="color:#E67E80;"> else</span><span style="color:#D3C6AA;"> {</span><span style="color:#859289;font-style:italic;"> // fail</span></span>
<span class="line"><span style="color:#D3C6AA;">			fail</span><span style="color:#E69875;"> &amp;&amp;</span><span style="color:#A7C080;"> fail</span><span style="color:#D3C6AA;">(xhr</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">status);</span></span>
<span class="line"><span style="color:#D3C6AA;">		}</span></span>
<span class="line"><span style="color:#D3C6AA;">	}</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>详细版</p><p><a href="https://zhuanlan.zhihu.com/p/27776535" target="_blank" rel="noreferrer">参考</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest" target="_blank" rel="noreferrer">XMLHttpRequest对象的属性</a></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">&lt;</span><span style="color:#E69875;">button</span><span style="color:#DBBC7F;"> class</span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;">&quot;button&quot;</span><span style="color:#D3C6AA;">&gt;发送请求&lt;/</span><span style="color:#E69875;">button</span><span style="color:#D3C6AA;">&gt;</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> param </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">	method</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;get&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">	url</span><span style="color:#859289;">:</span></span>
<span class="line"><span style="color:#DBBC7F;">		&quot;https://openapi-mls.tutorabc.com.cn/OfficalWebAPI/LandingPageAPI/LandingPageExtend&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">	async</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> true</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">	timeout</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 1000</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">	data</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">		a</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 1</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">		b</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 2</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">		c</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 3</span></span>
<span class="line"><span style="color:#D3C6AA;">	}</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> ajax</span><span style="color:#D3C6AA;">(param)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">	// 参数拼接需要通过 encodeURIComponent 进行编码</span></span>
<span class="line"><span style="color:#E69875;">	let</span><span style="color:#D3C6AA;"> paramArr</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> [];</span></span>
<span class="line"><span style="color:#E69875;">	let</span><span style="color:#D3C6AA;"> encodeData;</span></span>
<span class="line"><span style="color:#E67E80;">	if</span><span style="color:#D3C6AA;"> (param</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">data</span><span style="color:#E67E80;"> instanceof</span><span style="color:#7FBBB3;"> Object</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">		for</span><span style="color:#D3C6AA;"> (</span><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> key</span><span style="color:#E67E80;"> in</span><span style="color:#D3C6AA;"> param</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">data)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">			paramArr</span><span style="color:#859289;">.</span><span style="color:#A7C080;">push</span><span style="color:#D3C6AA;">(</span></span>
<span class="line"><span style="color:#A7C080;">				encodeURIComponent</span><span style="color:#D3C6AA;">(key)</span><span style="color:#E69875;"> +</span><span style="color:#DBBC7F;"> &quot;=&quot;</span><span style="color:#E69875;"> +</span><span style="color:#A7C080;"> encodeURIComponent</span><span style="color:#D3C6AA;">(param</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">data[key])</span></span>
<span class="line"><span style="color:#D3C6AA;">			);</span></span>
<span class="line"><span style="color:#D3C6AA;">		}</span></span>
<span class="line"><span style="color:#D3C6AA;">		encodeData</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> paramArr</span><span style="color:#859289;">.</span><span style="color:#A7C080;">join</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;&amp;&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">	}</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">	// 假如是get请求的处理</span></span>
<span class="line"><span style="color:#E67E80;">	if</span><span style="color:#D3C6AA;"> (param</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">method</span><span style="color:#E69875;"> ===</span><span style="color:#DBBC7F;"> &quot;get&quot;</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">			// 检测 url 中是否已存在 ? 及其位置</span></span>
<span class="line"><span style="color:#E69875;">			const</span><span style="color:#D3C6AA;"> index</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> param</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">url</span><span style="color:#859289;">.</span><span style="color:#A7C080;">indexOf</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;?&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#E67E80;">		if</span><span style="color:#D3C6AA;"> (index</span><span style="color:#E69875;"> ===</span><span style="color:#E69875;"> -</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">			param</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">url</span><span style="color:#E69875;"> +=</span><span style="color:#DBBC7F;"> &quot;?&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">		}</span><span style="color:#E67E80;"> else</span><span style="color:#E67E80;"> if</span><span style="color:#D3C6AA;"> (index</span><span style="color:#E69875;"> !==</span><span style="color:#D3C6AA;"> param</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">url</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">length</span><span style="color:#E69875;"> -</span><span style="color:#D699B6;"> 1</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">			param</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">url</span><span style="color:#E69875;"> +=</span><span style="color:#DBBC7F;"> &quot;&amp;&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">		}</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">		// 拼接 url</span></span>
<span class="line"><span style="color:#D3C6AA;">		param</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">url</span><span style="color:#E69875;"> +=</span><span style="color:#D3C6AA;"> encodeData;</span></span>
<span class="line"><span style="color:#D3C6AA;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">	// 1. 创建XMLHttpRequest对象</span></span>
<span class="line"><span style="color:#E69875;">	const</span><span style="color:#D3C6AA;"> xhr</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> XMLHttpRequest</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">	// 设置请求超时时间</span></span>
<span class="line"><span style="color:#E67E80;">	if</span><span style="color:#D3C6AA;"> (param</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">timeout</span><span style="color:#E69875;"> &amp;&amp;</span><span style="color:#D3C6AA;"> param</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">timeout</span><span style="color:#E69875;"> &gt;</span><span style="color:#D699B6;"> 0</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">		xhr</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">timeout</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> param</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">timeout;</span></span>
<span class="line"><span style="color:#D3C6AA;">	}</span></span>
<span class="line"><span style="color:#E67E80;">	return</span><span style="color:#E67E80;"> new</span><span style="color:#7FBBB3;"> Promise</span><span style="color:#D3C6AA;">((resolve,</span><span style="color:#D3C6AA;"> reject)</span><span style="color:#E69875;"> =&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">		// 2. 连接服务器</span></span>
<span class="line"><span style="color:#D3C6AA;">		xhr</span><span style="color:#859289;">.</span><span style="color:#A7C080;">open</span><span style="color:#D3C6AA;">(param</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">method,</span><span style="color:#D3C6AA;"> param</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">url,</span><span style="color:#D3C6AA;"> param</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">async);</span></span>
<span class="line"><span style="color:#E67E80;">		if</span><span style="color:#D3C6AA;"> (param</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">method</span><span style="color:#E69875;"> ===</span><span style="color:#DBBC7F;"> &quot;get&quot;</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">			// 3. 发送请求</span></span>
<span class="line"><span style="color:#D3C6AA;">			xhr</span><span style="color:#859289;">.</span><span style="color:#A7C080;">send</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">null</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">		}</span><span style="color:#E67E80;"> else</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">			// post 方式需要设置请求头</span></span>
<span class="line"><span style="color:#D3C6AA;">			xhr</span><span style="color:#859289;">.</span><span style="color:#A7C080;">setRequestHeader</span><span style="color:#D3C6AA;">(</span></span>
<span class="line"><span style="color:#DBBC7F;">				&quot;Content-Type&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#DBBC7F;">				&quot;application/x-www-form-urlencoded;charset=UTF-8&quot;</span></span>
<span class="line"><span style="color:#D3C6AA;">			);</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">			// 3. 发送请求</span></span>
<span class="line"><span style="color:#D3C6AA;">			xhr</span><span style="color:#859289;">.</span><span style="color:#A7C080;">send</span><span style="color:#D3C6AA;">(encodeData);</span></span>
<span class="line"><span style="color:#D3C6AA;">		}</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">		// 4. 接受请求</span></span>
<span class="line"><span style="color:#D3C6AA;">		xhr</span><span style="color:#859289;">.</span><span style="color:#A7C080;">onreadystatechange </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> ()</span><span style="color:#E69875;"> =&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">			if</span><span style="color:#D3C6AA;"> (xhr</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">readyState</span><span style="color:#E69875;"> ===</span><span style="color:#D699B6;"> 4</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">				console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;readyState:&#39;</span><span style="color:#D3C6AA;"> ,xhr</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">readyState,</span><span style="color:#DBBC7F;"> &#39;请求已完成&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">				// HTTP 状态在 200-300 之间表示请求成功</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">				// HTTP 状态为 304 表示请求内容未发生改变，可直接从缓存中读取</span></span>
<span class="line"><span style="color:#E67E80;">				if</span><span style="color:#D3C6AA;"> ((xhr</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">status</span><span style="color:#E69875;"> &gt;=</span><span style="color:#D699B6;"> 200</span><span style="color:#E69875;"> &amp;&amp;</span><span style="color:#D3C6AA;"> xhr</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">status</span><span style="color:#E69875;"> &lt;</span><span style="color:#D699B6;"> 300</span><span style="color:#D3C6AA;">)</span><span style="color:#E69875;"> ||</span><span style="color:#D3C6AA;"> xhr</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">status</span><span style="color:#E69875;"> ==</span><span style="color:#D699B6;"> 304</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">					console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;请求成功&quot;</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> xhr</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">responseText);</span></span>
<span class="line"><span style="color:#D3C6AA;">					resolve</span><span style="color:#E69875;"> &amp;&amp;</span><span style="color:#A7C080;"> resolve</span><span style="color:#D3C6AA;">(xhr</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">responseText);</span></span>
<span class="line"><span style="color:#D3C6AA;">				}</span><span style="color:#E67E80;"> else</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">					console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;请求失败&quot;</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> xhr</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">responseText);</span></span>
<span class="line"><span style="color:#D3C6AA;">					reject</span><span style="color:#E69875;"> &amp;&amp;</span><span style="color:#A7C080;"> reject</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#D3C6AA;">				}</span></span>
<span class="line"><span style="color:#D3C6AA;">			}</span><span style="color:#E67E80;"> else</span><span style="color:#E67E80;"> if</span><span style="color:#D3C6AA;"> (xhr</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">readyState</span><span style="color:#E69875;"> ===</span><span style="color:#D699B6;"> 0</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">				console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;readyState:&#39;</span><span style="color:#D3C6AA;"> ,xhr</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">readyState,</span><span style="color:#DBBC7F;"> &#39;尚未调用 open 方法&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">			}</span><span style="color:#E67E80;"> else</span><span style="color:#E67E80;"> if</span><span style="color:#D3C6AA;"> (xhr</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">readyState</span><span style="color:#E69875;"> ===</span><span style="color:#D699B6;"> 1</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">				console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(xhr</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">readyState,</span><span style="color:#DBBC7F;"> &#39;已调用 open 但还未发送请求（未调用 send）&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">			}</span><span style="color:#E67E80;"> else</span><span style="color:#E67E80;"> if</span><span style="color:#D3C6AA;"> (xhr</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">readyState</span><span style="color:#E69875;"> ===</span><span style="color:#D699B6;"> 2</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">				console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;readyState:&#39;</span><span style="color:#D3C6AA;"> ,xhr</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">readyState,</span><span style="color:#DBBC7F;"> &#39;已发送请求（已调用 send）&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">			}</span><span style="color:#E67E80;"> else</span><span style="color:#E67E80;"> if</span><span style="color:#D3C6AA;"> (xhr</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">readyState</span><span style="color:#E69875;"> ===</span><span style="color:#D699B6;"> 3</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">				console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;readyState:&#39;</span><span style="color:#D3C6AA;"> ,xhr</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">readyState,</span><span style="color:#DBBC7F;"> &#39;已接收到请求返回的数据&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">			}</span></span>
<span class="line"><span style="color:#D3C6AA;">		};</span></span>
<span class="line"><span style="color:#D3C6AA;">		xhr</span><span style="color:#859289;">.</span><span style="color:#A7C080;">onerror </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> err</span><span style="color:#E69875;"> =&gt;</span><span style="color:#D3C6AA;"> reject</span><span style="color:#E69875;"> &amp;&amp;</span><span style="color:#A7C080;"> reject</span><span style="color:#D3C6AA;">(err);</span></span>
<span class="line"><span style="color:#D3C6AA;">		xhr</span><span style="color:#859289;">.</span><span style="color:#A7C080;">ontimeout </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> ()</span><span style="color:#E69875;"> =&gt;</span><span style="color:#D3C6AA;"> reject</span><span style="color:#E69875;"> &amp;&amp;</span><span style="color:#A7C080;"> reject</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;请求超时&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">	});</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> button </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> document</span><span style="color:#859289;">.</span><span style="color:#A7C080;">querySelector</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;.button&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">button</span><span style="color:#859289;">.</span><span style="color:#A7C080;">addEventListener</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;click&quot;</span><span style="color:#D3C6AA;">, </span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">	ajax</span><span style="color:#D3C6AA;">(param)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(</span></span>
<span class="line"><span style="color:#D3C6AA;">		res</span><span style="color:#E69875;"> =&gt;</span><span style="color:#D3C6AA;"> console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;请求成功: &quot;</span><span style="color:#E69875;"> +</span><span style="color:#D3C6AA;"> res),</span></span>
<span class="line"><span style="color:#D3C6AA;">		err</span><span style="color:#E69875;"> =&gt;</span><span style="color:#D3C6AA;"> console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;请求失败: &quot;</span><span style="color:#E69875;"> +</span><span style="color:#D3C6AA;"> err)</span></span>
<span class="line"><span style="color:#D3C6AA;">	);;</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br></div></div><h3 id="defer和async的区别" tabindex="-1">defer和async的区别 <a class="header-anchor" href="#defer和async的区别" aria-label="Permalink to &quot;defer和async的区别&quot;">​</a></h3><p><img src="`+o+`" alt="1"></p><p><em>蓝色线代表网络读取，红色线代表执行时间，这俩都是针对脚本的；绿色线代表 HTML 解析。</em></p><p><code>&lt;script src=&quot;script.js&quot;&gt;&lt;/script&gt;</code> 没有 defer 或 async，浏览器会立即加载并执行指定的脚本，“立即”指的是在渲染该 script 标签之下的文档元素之前，也就是说不等待后续载入的文档元素，读到就加载并执行。</p><p><code>&lt;script defer src=&quot;myscript.js&quot;&gt;&lt;/script&gt;</code> 有 defer，加载后续文档元素的过程将和 script.js 的加载并行进行（异步），但是 script.js 的执行要在所有元素解析完成之后，DOMContentLoaded 事件触发之前完成。</p><p><code>&lt;script async src=&quot;script.js&quot;&gt;&lt;/script&gt;</code> 有 async，加载和渲染后续文档元素的过程将和 script.js 的加载与执行并行进行（异步）。</p><h3 id="事件domcontentloaded和load的区别" tabindex="-1">事件DOMContentLoaded和load的区别 <a class="header-anchor" href="#事件domcontentloaded和load的区别" aria-label="Permalink to &quot;事件DOMContentLoaded和load的区别&quot;">​</a></h3><p><strong>DOM文档加载的步骤为:</strong></p><ol><li>解析HTML结构。</li><li>加载外部脚本和样式表文件。</li><li>解析并执行脚本代码。</li><li>DOM树构建完成。//DOMContentLoaded</li><li>加载图片等外部文件。</li><li>页面加载完毕。//load</li></ol><p>在第4步，会触发DOMContentLoaded事件。在第6步，触发load事件。</p><blockquote><p>当初始HTML文档被完全加载和解析完成之后，DOMContentLoaded 事件被触发，而无需等待样式表、图像和子框架完成加载。另一个不同的事件 load 应该仅用于检测一个完全加载的页面。 在使用 DOMContentLoaded 更加合适的情况下使用 load 是一个非常流行的错误，所以要谨慎。 ——MDN</p></blockquote><p>用原生js可以这么写：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// 不兼容老的浏览器，兼容写法见 [jQuery中ready与load事件](http://www.imooc.com/code/3253) ，或用jQuery</span></span>
<span class="line"><span style="color:#D3C6AA;">document</span><span style="color:#859289;">.</span><span style="color:#A7C080;">addEventListener</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;DOMContentLoaded&quot;</span><span style="color:#D3C6AA;">, </span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">(event)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;DOM fully loaded and parsed&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">window</span><span style="color:#859289;">.</span><span style="color:#A7C080;">addEventListener</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;load&quot;</span><span style="color:#D3C6AA;">, </span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">(event)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;All resources finished loading!&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>JQ这么写：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// DOMContentLoaded</span></span>
<span class="line"><span style="color:#A7C080;">$</span><span style="color:#D3C6AA;">(document)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">ready</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // ...代码...</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">//load</span></span>
<span class="line"><span style="color:#A7C080;">$</span><span style="color:#D3C6AA;">(document)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">load</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // ...代码...</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="offsetwidth-clientwidth-与-scrollwidth-的区别" tabindex="-1">offsetWidth ,clientWidth 与 scrollWidth 的区别 <a class="header-anchor" href="#offsetwidth-clientwidth-与-scrollwidth-的区别" aria-label="Permalink to &quot;offsetWidth ,clientWidth 与 scrollWidth 的区别&quot;">​</a></h3><ul><li>offsetWidth/offsetHeight返回值包含<strong>content + padding + border</strong>，效果与e.getBoundingClientRect()相同</li><li>clientWidth/clientHeight返回值只包含<strong>content + padding</strong>，如果有滚动条，也不包含滚动条</li><li>scrollWidth/scrollHeight返回值包含<strong>content + padding</strong> + 溢出内容的尺寸</li></ul><h3 id="javascript有哪些方法定义对象" tabindex="-1">javascript有哪些方法定义对象 <a class="header-anchor" href="#javascript有哪些方法定义对象" aria-label="Permalink to &quot;javascript有哪些方法定义对象&quot;">​</a></h3><ul><li>对象字面量： var obj = {};</li><li>构造函数： var obj = new Object();</li><li>Object.create(): var obj = Object.create(Object.prototype);</li></ul><h3 id="怎样添加、移除、移动、复制、创建和查找节点" tabindex="-1">怎样添加、移除、移动、复制、创建和查找节点 <a class="header-anchor" href="#怎样添加、移除、移动、复制、创建和查找节点" aria-label="Permalink to &quot;怎样添加、移除、移动、复制、创建和查找节点&quot;">​</a></h3><p>创建新节点</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">createDocumentFragment</span><span style="color:#D3C6AA;">()    </span><span style="color:#859289;font-style:italic;">//创建一个DOM片段</span></span>
<span class="line"><span style="color:#A7C080;">createElement</span><span style="color:#D3C6AA;">()   </span><span style="color:#859289;font-style:italic;">//创建一个具体的元素</span></span>
<span class="line"><span style="color:#A7C080;">createTextNode</span><span style="color:#D3C6AA;">()   </span><span style="color:#859289;font-style:italic;">//创建一个文本节点</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>添加、移除、替换、插入</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">appendChild</span><span style="color:#D3C6AA;">()      </span><span style="color:#859289;font-style:italic;">//添加</span></span>
<span class="line"><span style="color:#A7C080;">removeChild</span><span style="color:#D3C6AA;">()      </span><span style="color:#859289;font-style:italic;">//移除</span></span>
<span class="line"><span style="color:#A7C080;">replaceChild</span><span style="color:#D3C6AA;">()      </span><span style="color:#859289;font-style:italic;">//替换</span></span>
<span class="line"><span style="color:#A7C080;">insertBefore</span><span style="color:#D3C6AA;">()      </span><span style="color:#859289;font-style:italic;">//插入</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>查找</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">getElementsByTagName</span><span style="color:#D3C6AA;">()    </span><span style="color:#859289;font-style:italic;">//通过标签名称</span></span>
<span class="line"><span style="color:#A7C080;">getElementsByName</span><span style="color:#D3C6AA;">()     </span><span style="color:#859289;font-style:italic;">//通过元素的Name属性的值</span></span>
<span class="line"><span style="color:#A7C080;">getElementById</span><span style="color:#D3C6AA;">()        </span><span style="color:#859289;font-style:italic;">//通过元素Id，唯一性</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="怎么判断两个对象相等" tabindex="-1">怎么判断两个对象相等？ <a class="header-anchor" href="#怎么判断两个对象相等" aria-label="Permalink to &quot;怎么判断两个对象相等？&quot;">​</a></h3><p>可以转换为字符串来判断</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">obj </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    a</span><span style="color:#859289;">:</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">    b</span><span style="color:#859289;">:</span><span style="color:#D699B6;">2</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#D3C6AA;">obj2 </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    a</span><span style="color:#859289;">:</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">    b</span><span style="color:#859289;">:</span><span style="color:#D699B6;">2</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#D3C6AA;">obj3 </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    a</span><span style="color:#859289;">:</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">    b</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;">&#39;2&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#D3C6AA;">JSON</span><span style="color:#859289;">.</span><span style="color:#A7C080;">stringify</span><span style="color:#D3C6AA;">(obj)</span><span style="color:#E69875;">===</span><span style="color:#D3C6AA;">JSON</span><span style="color:#859289;">.</span><span style="color:#A7C080;">stringify</span><span style="color:#D3C6AA;">(obj2);</span><span style="color:#859289;font-style:italic;">//true</span></span>
<span class="line"><span style="color:#D3C6AA;">JSON</span><span style="color:#859289;">.</span><span style="color:#A7C080;">stringify</span><span style="color:#D3C6AA;">(obj)</span><span style="color:#E69875;">===</span><span style="color:#D3C6AA;">JSON</span><span style="color:#859289;">.</span><span style="color:#A7C080;">stringify</span><span style="color:#D3C6AA;">(obj3);</span><span style="color:#859289;font-style:italic;">//false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="bind的用法-以及如何实现bind的函数和需要注意的点" tabindex="-1">bind的用法，以及如何实现bind的函数和需要注意的点 <a class="header-anchor" href="#bind的用法-以及如何实现bind的函数和需要注意的点" aria-label="Permalink to &quot;bind的用法，以及如何实现bind的函数和需要注意的点&quot;">​</a></h3><p>bind的作用与call和apply相同，区别是call和apply是立即调用函数，而bind是返回了一个函数，需要调用的时候再执行。</p><p>一个简单的bind函数实现如下:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#7FBBB3;">Function</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">prototype</span><span style="color:#859289;">.</span><span style="color:#A7C080;">bind</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">(ctx)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">	var</span><span style="color:#D3C6AA;"> fn</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> this</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#E67E80;">	return</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">		fn</span><span style="color:#859289;">.</span><span style="color:#A7C080;">apply</span><span style="color:#D3C6AA;">(ctx,</span><span style="color:#D3C6AA;"> arguments);</span></span>
<span class="line"><span style="color:#D3C6AA;">	};</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>`,138)]))}const u=n(t,[["render",r]]);export{b as __pageData,u as default};
