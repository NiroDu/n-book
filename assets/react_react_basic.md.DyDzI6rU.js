import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.D-6U7MZ9.js";const e="/n-book/assets/componentization.CP6hBlt0.png",o="/n-book/assets/set_state.CaoLLk76.png",t="/n-book/assets/diff.C3kYAX0O.png",r="/n-book/assets/key.-_3ETQhf.png",c="/n-book/assets/the_life_cycle.Cx9923b3.png",i="/n-book/assets/delete.CaizscAN.png",y="/n-book/assets/charles.Kw38gh-q.png",g=JSON.parse('{"title":"React 基础部分","description":"","frontmatter":{},"headers":[],"relativePath":"react/react_basic.md","filePath":"react/react_basic.md","lastUpdated":1544439154000}'),A={name:"react/react_basic.md"};function b(u,s,d,C,m,D){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="react-基础部分" tabindex="-1">React 基础部分 <a class="header-anchor" href="#react-基础部分" aria-label="Permalink to &quot;React 基础部分&quot;">​</a></h1><p>React Fiber 是指 16 版本，或者是 16 版本中的一些底层实现。</p><h2 id="关于-react-脚手架中-pwa-的部分" tabindex="-1">关于 React 脚手架中 PWA 的部分 <a class="header-anchor" href="#关于-react-脚手架中-pwa-的部分" aria-label="Permalink to &quot;关于 React 脚手架中 PWA 的部分&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// index.html</span></span>
<span class="line"><span style="color:#D3C6AA;">&lt;</span><span style="color:#E69875;">link</span><span style="color:#DBBC7F;"> rel</span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;">&quot;manifest&quot;</span><span style="color:#DBBC7F;"> href</span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;">&quot;%PUBLIC_URL%/manifest.json&quot;</span><span style="color:#D3C6AA;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">&lt;</span><span style="color:#E69875;">link</span><span style="color:#DBBC7F;"> rel</span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;">&quot;shortcut icon&quot;</span><span style="color:#DBBC7F;"> href</span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;">&quot;%PUBLIC_URL%/favicon.ico&quot;</span><span style="color:#D3C6AA;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">// index.js</span></span>
<span class="line"><span style="color:#D3C6AA;">import registerServiceWorker from &quot;./registerServiceWorker&quot;;</span></span>
<span class="line"><span style="color:#D3C6AA;">registerServiceWorker();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">// manifest.json</span></span>
<span class="line"><span style="color:#A7C080;">{</span></span>
<span class="line"><span style="color:#DBBC7F;">  &quot;short_name&quot;</span><span style="color:#D3C6AA;">: </span><span style="color:#DBBC7F;">&quot;React App&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#DBBC7F;">  &quot;name&quot;</span><span style="color:#D3C6AA;">: </span><span style="color:#DBBC7F;">&quot;Create React App Sample&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#DBBC7F;">  &quot;icons&quot;</span><span style="color:#D3C6AA;">: [</span></span>
<span class="line"><span style="color:#D3C6AA;">    {</span></span>
<span class="line"><span style="color:#DBBC7F;">      &quot;src&quot;</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;favicon.ico&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#DBBC7F;">      &quot;sizes&quot;</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;64x64 32x32 24x24 16x16&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#DBBC7F;">      &quot;type&quot;</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;image/x-icon&quot;</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">  ],</span></span>
<span class="line"><span style="color:#DBBC7F;">  &quot;start_url&quot;</span><span style="color:#D3C6AA;">: </span><span style="color:#DBBC7F;">&quot;./index.html&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#DBBC7F;">  &quot;display&quot;</span><span style="color:#D3C6AA;">: </span><span style="color:#DBBC7F;">&quot;standalone&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#DBBC7F;">  &quot;theme_color&quot;</span><span style="color:#D3C6AA;">: </span><span style="color:#DBBC7F;">&quot;#000000&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#DBBC7F;">  &quot;background_color&quot;</span><span style="color:#D3C6AA;">: </span><span style="color:#DBBC7F;">&quot;#ffffff&quot;</span></span>
<span class="line"><span style="color:#A7C080;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h2 id="组件化" tabindex="-1">组件化 <a class="header-anchor" href="#组件化" aria-label="Permalink to &quot;组件化&quot;">​</a></h2><p><img src="`+e+`" alt="componentization"></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { Component } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 等价于</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> React </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> Component </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> React</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">Component;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="react-中的响应式设计思想和事件绑定" tabindex="-1">React 中的响应式设计思想和事件绑定 <a class="header-anchor" href="#react-中的响应式设计思想和事件绑定" aria-label="Permalink to &quot;React 中的响应式设计思想和事件绑定&quot;">​</a></h2><p>在原生 JS 中 <strong>onchange</strong>，在 JSX 中是 <strong>onChange</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">constructor</span><span style="color:#D3C6AA;">(props) {</span></span>
<span class="line"><span style="color:#D699B6;">  super</span><span style="color:#D3C6AA;">(props);</span></span>
<span class="line"><span style="color:#D699B6;">  this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">handleInputChange </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">handleInputChange</span><span style="color:#859289;">.</span><span style="color:#A7C080;">bind</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">this</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">&lt;</span><span style="color:#E69875;">input</span></span>
<span class="line highlighted"><span style="color:#DBBC7F;">  onChange</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">handleInputChange</span><span style="color:#A7C080;">}</span></span>
<span class="line"><span style="color:#D3C6AA;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">handleInputChange(e) </span><span style="color:#A7C080;">{</span></span>
<span class="line"><span style="color:#D3C6AA;">  const value </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> e</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">target</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">value;</span></span>
<span class="line"><span style="color:#D699B6;">  this</span><span style="color:#859289;">.</span><span style="color:#A7C080;">setState</span><span style="color:#D3C6AA;">(() </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> ({</span></span>
<span class="line"><span style="color:#D3C6AA;">      inputValue</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> value</span></span>
<span class="line"><span style="color:#D3C6AA;">  }));</span></span>
<span class="line"><span style="color:#A7C080;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p><strong>bind()</strong>  函数会创建一个新<strong>绑定函数</strong>，<strong>绑定函数</strong>与被调函数具有相同的函数体。下例是解释：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> module </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  x</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 42</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#A7C080;">  getX</span><span style="color:#859289;">:</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">x;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> unboundGetX </span><span style="color:#E69875;">=</span><span style="color:#83C092;"> module</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">getX;</span></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">unboundGetX</span><span style="color:#D3C6AA;">()); </span><span style="color:#859289;font-style:italic;">// The function gets invoked at the global scope</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// expected output: undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> boundGetX </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> unboundGetX</span><span style="color:#859289;">.</span><span style="color:#A7C080;">bind</span><span style="color:#D3C6AA;">(</span><span style="color:#83C092;">module</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">boundGetX</span><span style="color:#D3C6AA;">()); </span><span style="color:#859289;font-style:italic;">// 42</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="展开运算符用法-this-state-list" tabindex="-1">展开运算符用法 ...this.state.list <a class="header-anchor" href="#展开运算符用法-this-state-list" aria-label="Permalink to &quot;展开运算符用法 ...this.state.list&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">state </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  inputValue</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  list</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span><span style="color:#DBBC7F;">&#39;1&#39;</span><span style="color:#D3C6AA;">,</span><span style="color:#DBBC7F;">&#39;2&#39;</span><span style="color:#D3C6AA;">,</span><span style="color:#DBBC7F;">&#39;3&#39;</span><span style="color:#D3C6AA;">]</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#A7C080;">handleBtnClick</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#D699B6;">  this</span><span style="color:#859289;">.</span><span style="color:#A7C080;">setState</span><span style="color:#D3C6AA;">(() </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> ({</span></span>
<span class="line highlighted"><span style="color:#D3C6AA;">    list</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span><span style="color:#E69875;">...</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">state</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">list, </span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">state</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">inputValue],</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // 相当于 list: [&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,this.state.inputValue]</span></span>
<span class="line"><span style="color:#D3C6AA;">  }));</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="immutable-原则" tabindex="-1">immutable 原则 <a class="header-anchor" href="#immutable-原则" aria-label="Permalink to &quot;immutable 原则&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">handleItemDelete</span><span style="color:#D3C6AA;">(index) {</span></span>
<span class="line"><span style="color:#D699B6;">  this</span><span style="color:#859289;">.</span><span style="color:#A7C080;">setState</span><span style="color:#D3C6AA;">((prevState) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // 复制一份副本给setState方法去更改state的值</span></span>
<span class="line highlighted"><span style="color:#E69875;">    const</span><span style="color:#D3C6AA;"> list </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [</span><span style="color:#E69875;">...</span><span style="color:#D3C6AA;">prevState</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">list];</span></span>
<span class="line"><span style="color:#D3C6AA;">    list</span><span style="color:#859289;">.</span><span style="color:#A7C080;">splice</span><span style="color:#D3C6AA;">(index, </span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> {list}</span></span>
<span class="line"><span style="color:#D3C6AA;">  });</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>immutable 不可变，我们不能直接去改变 state 的值，必须通过 setState 方法。</p><h2 id="jsx-语法细节补充" tabindex="-1">JSX 语法细节补充 <a class="header-anchor" href="#jsx-语法细节补充" aria-label="Permalink to &quot;JSX 语法细节补充&quot;">​</a></h2><h3 id="jsx-里怎么写注释" tabindex="-1">JSX 里怎么写注释 <a class="header-anchor" href="#jsx-里怎么写注释" aria-label="Permalink to &quot;JSX 里怎么写注释&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">{</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  /*推荐单行注释符号*/</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">{</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  /*</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    推荐多行行注释符号</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    推荐多行行注释符号</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  */</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="为什么在-jsx-里用-classname-而不是-class" tabindex="-1">为什么在 JSX 里用 className 而不是 class ? <a class="header-anchor" href="#为什么在-jsx-里用-classname-而不是-class" aria-label="Permalink to &quot;为什么在 JSX 里用 className 而不是 class ?&quot;">​</a></h3><p>在 JSX 里，css 的 class 关键字容易和类声明 class 混淆，所以用 className。</p><h3 id="为什么在-jsx-里-label-的属性用-htmlfor-而不是-for" tabindex="-1">为什么在 JSX 里 label 的属性用 htmlFor 而不是 for ? <a class="header-anchor" href="#为什么在-jsx-里-label-的属性用-htmlfor-而不是-for" aria-label="Permalink to &quot;为什么在 JSX 里 label 的属性用 htmlFor 而不是 for ?&quot;">​</a></h3><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line highlighted"><span style="color:#E67E80;">for</span><span style="color:#D3C6AA;"> (</span><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> index </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 0</span><span style="color:#D3C6AA;">; index </span><span style="color:#E69875;">&lt;</span><span style="color:#D3C6AA;"> array</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">length; index</span><span style="color:#E69875;">++</span><span style="color:#D3C6AA;">) {</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> element </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> array[index];</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#E67E80;">return</span><span style="color:#D3C6AA;"> (</span></span>
<span class="line"><span style="color:#A7C080;">  &lt;</span><span style="color:#7FBBB3;">Fragment</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">      {</span><span style="color:#859289;font-style:italic;">/* 错误的写法！*/</span><span style="color:#A7C080;">}</span></span>
<span class="line highlighted"><span style="color:#A7C080;">      &lt;</span><span style="color:#E69875;">label</span><span style="color:#A7C080;"> for</span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;">&quot;insertArea&quot;</span><span style="color:#A7C080;">&gt;</span><span style="color:#D3C6AA;">输入内容</span><span style="color:#A7C080;">&lt;/</span><span style="color:#E69875;">label</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">      &lt;</span><span style="color:#E69875;">input</span><span style="color:#A7C080;"> id</span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;">&quot;insertArea&quot;</span><span style="color:#A7C080;"> /&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;/</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">  &lt;/</span><span style="color:#7FBBB3;">Fragment</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>容易和 for 循环混淆。所以要用 htmlFor。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">&lt;</span><span style="color:#E69875;">label</span><span style="color:#A7C080;"> htmlFor</span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;">&quot;insertArea&quot;</span><span style="color:#A7C080;">&gt;</span><span style="color:#D3C6AA;">输入内容</span><span style="color:#A7C080;">&lt;/</span><span style="color:#E69875;">label</span><span style="color:#A7C080;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="dangerouslysetinnerhtml" tabindex="-1">dangerouslySetInnerHTML <a class="header-anchor" href="#dangerouslysetinnerhtml" aria-label="Permalink to &quot;dangerouslySetInnerHTML&quot;">​</a></h3><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">class</span><span style="color:#7FBBB3;"> Detail</span><span style="color:#E69875;"> extends</span><span style="color:#7FBBB3;"> Component</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">  render</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> (</span></span>
<span class="line"><span style="color:#A7C080;">      &lt;</span><span style="color:#7FBBB3;">DetailWrapper</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">        &lt;</span><span style="color:#7FBBB3;">Header</span><span style="color:#A7C080;">&gt;{</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">props</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">title</span><span style="color:#A7C080;">}&lt;/</span><span style="color:#7FBBB3;">Header</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">        {</span><span style="color:#859289;font-style:italic;">/*直接显示 this.props.content 中的值*/</span><span style="color:#A7C080;">}</span></span>
<span class="line highlighted"><span style="color:#A7C080;">        &lt;</span><span style="color:#7FBBB3;">Content</span><span style="color:#A7C080;"> dangerouslySetInnerHTML</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">{ __html</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">props</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">content }</span><span style="color:#A7C080;">}</span><span style="color:#A7C080;"> /&gt;</span></span>
<span class="line"><span style="color:#A7C080;">      &lt;/</span><span style="color:#7FBBB3;">DetailWrapper</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">    );</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>不转义，直接显示 HTML 元素内容。 这样容易受到造成 XSS 攻击。 官方的解释：<a href="https://reactjs.org/docs/dom-elements.html" target="_blank" rel="noreferrer">https://reactjs.org/docs/dom-elements.html</a></p><h2 id="父子组件传值" tabindex="-1">父子组件传值 <a class="header-anchor" href="#父子组件传值" aria-label="Permalink to &quot;父子组件传值&quot;">​</a></h2><p>父组件传给子组件：</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// 父组件：</span></span>
<span class="line"><span style="color:#A7C080;">&lt;</span><span style="color:#7FBBB3;">TodoItem</span><span style="color:#A7C080;"> content</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">item</span><span style="color:#A7C080;">}</span><span style="color:#A7C080;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 子组件：</span></span>
<span class="line"><span style="color:#A7C080;">&lt;</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">  {</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">props</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">content</span><span style="color:#A7C080;">}</span></span>
<span class="line"><span style="color:#A7C080;">&lt;/</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>子组件调用父组件的方法：</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// 父组件</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#A7C080;">&lt;</span><span style="color:#E69875;">ul</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">  {</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">state</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">list</span><span style="color:#859289;">.</span><span style="color:#A7C080;">map</span><span style="color:#D3C6AA;">((item, index) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> (</span></span>
<span class="line"><span style="color:#A7C080;">      &lt;</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">        &lt;</span><span style="color:#7FBBB3;">TodoItem</span></span>
<span class="line"><span style="color:#A7C080;">          content</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">item</span><span style="color:#A7C080;">}</span></span>
<span class="line"><span style="color:#A7C080;">          index</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">index</span><span style="color:#A7C080;">}</span></span>
<span class="line highlighted"><span style="color:#A7C080;">          deleteItem</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">handleItemDelete</span><span style="color:#859289;">.</span><span style="color:#A7C080;">bind</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">this</span><span style="color:#D3C6AA;">)</span><span style="color:#A7C080;">}</span></span>
<span class="line"><span style="color:#A7C080;">        /&gt;</span></span>
<span class="line"><span style="color:#A7C080;">      &lt;/</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">    );</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span><span style="color:#A7C080;">}</span></span>
<span class="line"><span style="color:#A7C080;">&lt;/</span><span style="color:#E69875;">ul</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 删除list的index项</span></span>
<span class="line"><span style="color:#A7C080;">handleItemDelete</span><span style="color:#D3C6AA;">(index) {</span></span>
<span class="line"><span style="color:#D699B6;">  this</span><span style="color:#859289;">.</span><span style="color:#A7C080;">setState</span><span style="color:#D3C6AA;">(prevState </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">    const</span><span style="color:#D3C6AA;"> list </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [</span><span style="color:#E69875;">...</span><span style="color:#D3C6AA;">prevState</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">list];</span></span>
<span class="line"><span style="color:#D3C6AA;">    list</span><span style="color:#859289;">.</span><span style="color:#A7C080;">splice</span><span style="color:#D3C6AA;">(index, </span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> { list };</span></span>
<span class="line"><span style="color:#D3C6AA;">  });</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>将父的 handleItemDelete 方法传给子，子再进行调用。</p><p>注意要将 handleItemDelete 方法 bind 到父的 this 上，不然子再调用的时候会 undefined.</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// 子组件</span></span>
<span class="line"><span style="color:#E67E80;">class</span><span style="color:#7FBBB3;"> TodoItem</span><span style="color:#E69875;"> extends</span><span style="color:#7FBBB3;"> Component</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  constructor</span><span style="color:#D3C6AA;">(props) {</span></span>
<span class="line"><span style="color:#D699B6;">    super</span><span style="color:#D3C6AA;">(props);</span></span>
<span class="line"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">handleClick </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">handleClick</span><span style="color:#859289;">.</span><span style="color:#A7C080;">bind</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">this</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#A7C080;">  render</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#A7C080;"> &lt;</span><span style="color:#E69875;">div</span><span style="color:#A7C080;"> onClick</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">handleClick</span><span style="color:#A7C080;">}&gt;{</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">props</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">content</span><span style="color:#A7C080;">}&lt;/</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#A7C080;">  handleClick</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line highlighted"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">props</span><span style="color:#859289;">.</span><span style="color:#A7C080;">deleteItem</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">props</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">index);</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="上述代码优化" tabindex="-1">上述代码优化 <a class="header-anchor" href="#上述代码优化" aria-label="Permalink to &quot;上述代码优化&quot;">​</a></h2><p>解构赋值。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">class</span><span style="color:#7FBBB3;"> TodoItem</span><span style="color:#E69875;"> extends</span><span style="color:#7FBBB3;"> Component</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  constructor</span><span style="color:#D3C6AA;">(props) {</span></span>
<span class="line"><span style="color:#D699B6;">    super</span><span style="color:#D3C6AA;">(props);</span></span>
<span class="line"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">handleClick </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">handleClick</span><span style="color:#859289;">.</span><span style="color:#A7C080;">bind</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">this</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  render</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line highlighted"><span style="color:#E69875;">    const</span><span style="color:#D3C6AA;"> { content } </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">props;</span></span>
<span class="line highlighted"><span style="color:#E67E80;">    return</span><span style="color:#A7C080;"> &lt;</span><span style="color:#E69875;">div</span><span style="color:#A7C080;"> onClick</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">handleClick</span><span style="color:#A7C080;">}&gt;{</span><span style="color:#D3C6AA;">content</span><span style="color:#A7C080;">}&lt;/</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  handleClick</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line highlighted"><span style="color:#E69875;">    const</span><span style="color:#D3C6AA;"> { deleteItem, index } </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">props;</span></span>
<span class="line highlighted"><span style="color:#A7C080;">    deleteItem</span><span style="color:#D3C6AA;">(index);</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>setState() 推荐写法：对象变成函数，返回一个对象。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">handleInputChange</span><span style="color:#D3C6AA;">(e) {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 变成函数后，e.target.value 变成异步的，inputValue 可能没值。</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 所以，用一个 const 保存再赋值。</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> value </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> e</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">target</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">value;</span></span>
<span class="line highlighted"><span style="color:#D699B6;">  this</span><span style="color:#859289;">.</span><span style="color:#A7C080;">setState</span><span style="color:#D3C6AA;">(() </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> ({</span></span>
<span class="line"><span style="color:#D3C6AA;">    inputValue</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> value</span></span>
<span class="line"><span style="color:#D3C6AA;">  }));</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>prevState 修改数据前的那个 state 的值，这样写可以更好的避免误改 state 值</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// 原来的</span></span>
<span class="line"><span style="color:#A7C080;">handleBtnClick</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line highlighted"><span style="color:#D699B6;">  this</span><span style="color:#859289;">.</span><span style="color:#A7C080;">setState</span><span style="color:#D3C6AA;">(() </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> ({</span></span>
<span class="line highlighted"><span style="color:#D3C6AA;">    list</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span><span style="color:#E69875;">...</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">state</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">list, </span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">state</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">inputValue],</span></span>
<span class="line"><span style="color:#D3C6AA;">    inputValue</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;&quot;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }));</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 优化的</span></span>
<span class="line"><span style="color:#A7C080;">handleBtnClick</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line highlighted"><span style="color:#D699B6;">  this</span><span style="color:#859289;">.</span><span style="color:#A7C080;">setState</span><span style="color:#D3C6AA;">(prevState </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> ({</span></span>
<span class="line highlighted"><span style="color:#D3C6AA;">    list</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span><span style="color:#E69875;">...</span><span style="color:#D3C6AA;">prevState</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">list, prevState</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">inputValue],</span></span>
<span class="line"><span style="color:#D3C6AA;">    inputValue</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;&quot;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }));</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// 原来的</span></span>
<span class="line"><span style="color:#A7C080;">handleItemDelete</span><span style="color:#D3C6AA;">(index) {</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> list </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [</span><span style="color:#E69875;">...</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">state</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">list];</span></span>
<span class="line"><span style="color:#D3C6AA;">  list</span><span style="color:#859289;">.</span><span style="color:#A7C080;">splice</span><span style="color:#D3C6AA;">(index, </span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D699B6;">  this</span><span style="color:#859289;">.</span><span style="color:#A7C080;">setState</span><span style="color:#D3C6AA;">({</span></span>
<span class="line"><span style="color:#D3C6AA;">    list</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> list</span></span>
<span class="line"><span style="color:#D3C6AA;">  });</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 优化的</span></span>
<span class="line"><span style="color:#A7C080;">handleItemDelete</span><span style="color:#D3C6AA;">(index) {</span></span>
<span class="line"><span style="color:#D699B6;">  this</span><span style="color:#859289;">.</span><span style="color:#A7C080;">setState</span><span style="color:#D3C6AA;">((prevState) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">    const</span><span style="color:#D3C6AA;"> list </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [</span><span style="color:#E69875;">...</span><span style="color:#D3C6AA;">prevState</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">list];</span></span>
<span class="line"><span style="color:#D3C6AA;">    list</span><span style="color:#859289;">.</span><span style="color:#A7C080;">splice</span><span style="color:#D3C6AA;">(index, </span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> {list}</span></span>
<span class="line"><span style="color:#D3C6AA;">  });</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="proptypes-与-defaultprops-的应用" tabindex="-1">PropTypes 与 DefaultProps 的应用 <a class="header-anchor" href="#proptypes-与-defaultprops-的应用" aria-label="Permalink to &quot;PropTypes 与 DefaultProps 的应用&quot;">​</a></h2><p>引入：</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> PropTypes </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;prop-types&quot;</span><span style="color:#D3C6AA;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>定义 TodoItem 类的类型声明：</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">TodoItem</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">propTypes </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  test</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> PropTypes</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">string</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">isRequired,</span></span>
<span class="line"><span style="color:#D3C6AA;">  content</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> PropTypes</span><span style="color:#859289;">.</span><span style="color:#A7C080;">arrayOf</span><span style="color:#D3C6AA;">(PropTypes</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">number, PropTypes</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">string),</span></span>
<span class="line"><span style="color:#D3C6AA;">  deleteItem</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> PropTypes</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">func,</span></span>
<span class="line"><span style="color:#D3C6AA;">  index</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> PropTypes</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">number</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">TodoItem</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">defaultProps </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  test</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;hello world&quot;</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>1.propTypes 对属性进行强校验，验证格式是否正确（number，string，func 等），isRequired 是必须要传的意思，不能不传。</p><p>2.defaultProps 设置默认的属性值</p><p>类型定义希望它可能是两种类型：</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#83C092;">optionalArrayOf</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> PropTypes</span><span style="color:#859289;">.</span><span style="color:#A7C080;">oneOfType</span><span style="color:#D3C6AA;">([PropTypes</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">number,PropTypes</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">string]),</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>详细用法：<a href="https://reactjs.org/docs/typechecking-with-proptypes.html" target="_blank" rel="noreferrer">https://reactjs.org/docs/typechecking-with-proptypes.html</a></p><h2 id="props-state-与-render-函数的关系" tabindex="-1">props，state 与 render 函数的关系 <a class="header-anchor" href="#props-state-与-render-函数的关系" aria-label="Permalink to &quot;props，state 与 render 函数的关系&quot;">​</a></h2><ol><li><p>当组件的 state 或者 props 发生改变的时候，render 函数就会重新执行。</p></li><li><p>当父组件的 render 函数被运行时，它的子组件的 render 都将被重新运行一次。</p></li></ol><h2 id="react-中的虚拟-dom-的生成过程" tabindex="-1">React 中的虚拟 DOM 的生成过程 <a class="header-anchor" href="#react-中的虚拟-dom-的生成过程" aria-label="Permalink to &quot;React 中的虚拟 DOM 的生成过程&quot;">​</a></h2><p><strong>普通方案一：</strong></p><ol><li>state 数据</li><li>JSX 模版</li><li>数据 + 模版 结合，生成真实的 DOM，来显示在页面中</li><li>当 state 发生改变</li><li>数据 + 模版 结合，生成真实的 DOM，替换原始的 DOM</li></ol><p>缺陷：</p><ol><li>第一次生成了一个完整的真实 DOM 片段。</li><li>第二次生成了一个完整的真实 DOM 片段。</li><li>第二次的真实 DOM 替换第一次的真实 DOM，非常耗性能。</li></ol><p><strong>普通方案二：</strong></p><ol><li>state 数据</li><li>JSX 模版</li><li>数据 + 模版 结合，生成真实的 DOM，来显示在页面中</li><li>当 state 发生改变</li><li>数据 + 模版 结合，生成真实的 DOM，并不直接替换原始的 DOM</li><li>而是新的 DOM（DoucumentFragment） 和原始的 DOM 做比对，找差异</li><li>找出 input 框发生了变化</li><li>只用新的 DOM 中的 input 元素，替换掉老的 DOM 中的 input 元素</li></ol><p>缺陷： 性能的提升并不明显</p><p><strong>React 中的做法</strong></p><ol><li>state 数据</li><li>JSX 模版</li><li>数据 + 模版 生成虚拟 DOM（虚拟 DOM 就是一个 JS 对象，用它来描述真实 DOM）（损耗了一点性能）</li></ol><p><code>[&#39;div&#39;, {id: &#39;abc&#39;}, [&#39;span&#39;, {}, &#39;hello world&#39;]]</code></p><ol start="4"><li>用虚拟 DOM 的结构生成真实的 DOM，来显示在页面中。</li></ol><p><code>&lt;div id=&#39;abc&#39;&gt;&lt;span&gt;hello world&lt;/span&gt;&lt;/div&gt;</code></p><ol start="5"><li>当 state 发生变化</li><li>数据 + 模版 生成新的虚拟 DOM （极大的提升了性能）</li></ol><p><code>[&#39;div&#39;, {id: &#39;abc&#39;}, [&#39;span&#39;, {}, &#39;bye bye&#39;]]</code></p><ol start="7"><li>比较原始虚拟 DOM 和新的虚拟 DOM 的区别，找到区别是 span 中内容（极大的提升性能）</li><li>直接操作真实 DOM，改变 span 中的内容</li></ol><p><strong>状态改变后：生成的是新的虚拟 DOM 而不是真实 DOM，以及对比的是虚拟 DOM 而不是真实 DOM，所以性能极大提升。</strong></p><h2 id="深入了解虚拟-dom" tabindex="-1">深入了解虚拟 DOM <a class="header-anchor" href="#深入了解虚拟-dom" aria-label="Permalink to &quot;深入了解虚拟 DOM&quot;">​</a></h2><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">render</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // JSX -&gt; createElemnt -&gt;  虚拟DOM（JS 对象） -&gt; 真实的DOM</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#A7C080;"> &lt;</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;&lt;</span><span style="color:#E69875;">span</span><span style="color:#A7C080;">&gt;</span><span style="color:#D3C6AA;">item</span><span style="color:#A7C080;">&lt;/</span><span style="color:#E69875;">span</span><span style="color:#A7C080;">&gt;&lt;/</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> React</span><span style="color:#859289;">.</span><span style="color:#A7C080;">createElement</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;div&#39;</span><span style="color:#D3C6AA;">, {}, React</span><span style="color:#859289;">.</span><span style="color:#A7C080;">createElement</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;span&#39;</span><span style="color:#D3C6AA;">, {}, </span><span style="color:#DBBC7F;">&#39;item&#39;</span><span style="color:#D3C6AA;">));</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>以上两个 return 是等同写法。</p><p>React.createElement() 第一个参数是 DOM 节点，第二个参数是 DOM 节点上的属性如 id，第三个参数是 DOM 节点里的内容。</p><p>虚拟 DOM 的好处：</p><ol><li>性能的极大提升。</li><li>使得可以用 React Native 去写原生应用。因为原生应用里是没有 DOM 这种概念的，但是通过虚拟 DOM 可以去转化成原生应用的语法。</li></ol><h2 id="虚拟-dom-中的-diff-算法" tabindex="-1">虚拟 DOM 中的 Diff 算法 <a class="header-anchor" href="#虚拟-dom-中的-diff-算法" aria-label="Permalink to &quot;虚拟 DOM 中的 Diff 算法&quot;">​</a></h2><h3 id="setstate-为什么要设置成异步函数" tabindex="-1">setState()为什么要设置成异步函数？ <a class="header-anchor" href="#setstate-为什么要设置成异步函数" aria-label="Permalink to &quot;setState()为什么要设置成异步函数？&quot;">​</a></h3><p>为了提升性能，例如将连续的三次 setState 执行合并成一次，只需要对比一次虚拟 DOM，节省了两次的消耗。同步的话就会执行三次对比。 <img src="`+o+'" alt="set_state"></p><h3 id="diff-算法-同层虚拟-dom-比对" tabindex="-1">diff 算法 - 同层虚拟 DOM 比对 <a class="header-anchor" href="#diff-算法-同层虚拟-dom-比对" aria-label="Permalink to &quot;diff 算法 - 同层虚拟 DOM 比对&quot;">​</a></h3><p><img src="'+t+'" alt="diff"> 同层比对算法简单，比对速度快。 假如虚拟 DOM 的对比中，红框中的节点对比发现不同，则<strong>直接把旧的真实 DOM 红框节点下的元素全删除，再重新渲染为新的虚拟 DOM 中的内容</strong>。 虽然可能会造成 DOM 重新渲染时的浪费，但是它大大减少了两个虚拟 DOM 比对算法之间的性能消耗。</p><h3 id="为什么不推荐循环中设置-index-为-key" tabindex="-1">为什么不推荐循环中设置 index 为 key？ <a class="header-anchor" href="#为什么不推荐循环中设置-index-为-key" aria-label="Permalink to &quot;为什么不推荐循环中设置 index 为 key？&quot;">​</a></h3><p><img src="'+r+`" alt="key"> 所以为什么说不要设置循环中的 key 值为 index，因为这样就没法保证新生成的虚拟 dom 上的 key 和旧的虚拟 dom 上的 key 是同一个值了。这样在新旧虚拟 DOM 对比时的造成了难度的提升。</p><h2 id="react-中的-ref" tabindex="-1">React 中的 Ref <a class="header-anchor" href="#react-中的-ref" aria-label="Permalink to &quot;React 中的 Ref&quot;">​</a></h2><h3 id="什么是-ref" tabindex="-1">什么是 Ref？ <a class="header-anchor" href="#什么是-ref" aria-label="Permalink to &quot;什么是 Ref？&quot;">​</a></h3><p>Ref 具有获取 DOM 节点的能力。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">&lt;</span><span style="color:#E69875;">input</span></span>
<span class="line"><span style="color:#A7C080;">  id</span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;">&quot;insertArea&quot;</span></span>
<span class="line"><span style="color:#A7C080;">  value</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">state</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">inputValue</span><span style="color:#A7C080;">}</span></span>
<span class="line"><span style="color:#A7C080;">  onChange</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">handleInputChange</span><span style="color:#A7C080;">}</span></span>
<span class="line highlighted"><span style="color:#A7C080;">  ref</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">input </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">input </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> input;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span><span style="color:#A7C080;">}</span></span>
<span class="line"><span style="color:#A7C080;">/&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>this.input 被赋值为 input 参数，这个 input 参数就是由 ref 绑定的 DOM 节点<code>&lt;input /&gt;</code>。 所以 this.input 指向的就是 DOM 节点<code>&lt;input /&gt;</code>。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">handleInputChange</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // const value = e.target.value;</span></span>
<span class="line highlighted"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> value </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">input</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">value;</span></span>
<span class="line"><span style="color:#D699B6;">  this</span><span style="color:#859289;">.</span><span style="color:#A7C080;">setState</span><span style="color:#D3C6AA;">(() </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> ({</span></span>
<span class="line"><span style="color:#D3C6AA;">    inputValue</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> value</span></span>
<span class="line"><span style="color:#D3C6AA;">  }));</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>所以原先的 e.target 可以用 this.input（ref 获取到的 DOM 节点） 替换。</p><p><strong>但是要注意，React 是不推荐我们使用 Ref 的，React 倡导的是数据驱动的方式。</strong></p><h3 id="setstate-和-ref-一块使用中的小坑" tabindex="-1">setState() 和 Ref 一块使用中的小坑 <a class="header-anchor" href="#setstate-和-ref-一块使用中的小坑" aria-label="Permalink to &quot;setState() 和 Ref 一块使用中的小坑&quot;">​</a></h3><p>如下有一个 <code>&lt;ul /&gt;</code>，我们用 ref 获取到它的 DOM 节点(this.ul)。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">&lt;</span><span style="color:#E69875;">ul</span></span>
<span class="line"><span style="color:#A7C080;">  ref</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">ul </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">ul </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> ul;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span><span style="color:#A7C080;">}</span></span>
<span class="line"><span style="color:#A7C080;">/&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">handleBtnClick</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#D699B6;">  this</span><span style="color:#859289;">.</span><span style="color:#A7C080;">setState</span><span style="color:#D3C6AA;">(prevState </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> ({</span></span>
<span class="line"><span style="color:#D3C6AA;">    list</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span><span style="color:#E69875;">...</span><span style="color:#D3C6AA;">prevState</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">list, prevState</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">inputValue],</span></span>
<span class="line"><span style="color:#D3C6AA;">    inputValue</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;&quot;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }));</span></span>
<span class="line highlighted"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">ul</span><span style="color:#859289;">.</span><span style="color:#A7C080;">querySelectorAll</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;div&quot;</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">length);</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>我们 console.log 输出获取到的 DOM 的长度总是滞后不正确的，原因是因为 setState 是异步函数，而 console.log 是同步执行的。</p><p>所以应该写在 setState 提供的第二个参数，即它提供的回调方法中，这样就可以确保 setState 异步执行完后，再输出 DOM 节点的真实长度。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">handleBtnClick</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#D699B6;">  this</span><span style="color:#859289;">.</span><span style="color:#A7C080;">setState</span><span style="color:#D3C6AA;">(</span></span>
<span class="line"><span style="color:#D3C6AA;">    prevState </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> ({</span></span>
<span class="line"><span style="color:#D3C6AA;">      list</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span><span style="color:#E69875;">...</span><span style="color:#D3C6AA;">prevState</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">list, prevState</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">inputValue],</span></span>
<span class="line"><span style="color:#D3C6AA;">      inputValue</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;&quot;</span></span>
<span class="line"><span style="color:#D3C6AA;">    }),</span></span>
<span class="line highlighted"><span style="color:#D3C6AA;">    () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line highlighted"><span style="color:#D3C6AA;">      console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">ul</span><span style="color:#859289;">.</span><span style="color:#A7C080;">querySelectorAll</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;div&quot;</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">length);</span></span>
<span class="line highlighted"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">  );</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="react-的生命周期函数" tabindex="-1">React 的生命周期函数 <a class="header-anchor" href="#react-的生命周期函数" aria-label="Permalink to &quot;React 的生命周期函数&quot;">​</a></h2><p><img src="`+c+`" alt="the_life_cycle"></p><h3 id="initialization-阶段" tabindex="-1">initialization 阶段： <a class="header-anchor" href="#initialization-阶段" aria-label="Permalink to &quot;initialization 阶段：&quot;">​</a></h3><p>就是 constructor() 构造函数执行的阶段。</p><h3 id="mounting-阶段" tabindex="-1">Mounting 阶段： <a class="header-anchor" href="#mounting-阶段" aria-label="Permalink to &quot;Mounting 阶段：&quot;">​</a></h3><p><strong>componentWillMount</strong> 在组件即将被挂载到页面的时刻自动执行。（只会被执行一次）</p><p><strong>render</strong> 前面说过，在 state 或者是 props 更新的时候会自动执行。</p><p><strong>componentDidMount</strong> 组件被挂载到页面之后，自动被执行。（只会被执行一次）</p><h3 id="updation-阶段" tabindex="-1">Updation 阶段： <a class="header-anchor" href="#updation-阶段" aria-label="Permalink to &quot;Updation 阶段：&quot;">​</a></h3><p><strong>shouldComponentUpdate</strong> 组件被更新之前， 它会自动被执行，并要求返回 true 或 false。 假如返回的是 false，那组件则不会被更新，图中下方的流程都不会被执行了。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">shouldComponentUpdate</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;shouldComponentUpdate&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D699B6;"> true</span><span style="color:#D3C6AA;">; </span><span style="color:#859289;font-style:italic;">// 允许组件更新</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>componentWillUpdate（新版废弃的）</strong></p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// 组件被更新之前，它会自动执行，但是他在shouldComponentUpdate之后被执行，</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 如果shouldComponentUpdate返回 true 它才执行</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 如果返回false，这个函数就不会被执行了</span></span>
<span class="line"><span style="color:#A7C080;">componentWillUpdate</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;componentWillUpdate&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>render</strong> 前面说过，在 state 或者是 props 更新的时候会自动执行。</p><p><strong>componentDidUpdate</strong></p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// 组件更新完成之后，他会被执行</span></span>
<span class="line"><span style="color:#A7C080;">componentDidUpdate</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;componentDidUpdate&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>componentWillReceiveProps（新版废弃的）</strong></p><p>一个组件要从父组件接受参数，</p><p>如果这个组件第一次存在于父组件中，不会执行。</p><p>如果这个组件之前已经存在于父组件中，才会执行。</p><p>（只要父组件的 render 函数被重新执行了，子组件的这个<strong>componentWillReceiveProps</strong>就会被执行。）</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">componentWillReceiveProps</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;child componentWillReceiveProps&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="unmounting-阶段" tabindex="-1">Unmounting 阶段： <a class="header-anchor" href="#unmounting-阶段" aria-label="Permalink to &quot;Unmounting 阶段：&quot;">​</a></h3><p><strong>componentWillUnmount</strong></p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// 当这个组件即将被从页面中剔除的时候，会被执行</span></span>
<span class="line"><span style="color:#A7C080;">componentWillUnmount</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;child componentWillUnmount&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="一个问题" tabindex="-1">一个问题 <a class="header-anchor" href="#一个问题" aria-label="Permalink to &quot;一个问题&quot;">​</a></h3><p><strong>删除子组件的流程：</strong><img src="`+i+`" alt="delete"></p><p><strong>Qusetion: 生命周期函数 componentWillUnmount 执行的时候，控制台是先输出了 parent render，然后才是 child componentWillUnmount。但是 parent render 执行完了之后，显示 DOM 的内容不是已经删除后的样子吗？这样的话，感觉是执行 omponentWillUnmount 后执行 parent render 才对。</strong></p><p>理解：在 parent render 完后，按理说是到 child render，但是因为 child 即将被删除，所以不需要重新再为 child 执行一次 render，而是直接 child componentwillUnmount，结束此次渲染。另外，render 永远在 componentWillUnmount 之前执行。</p><h2 id="react-生命周期函数的使用场景" tabindex="-1">React 生命周期函数的使用场景 <a class="header-anchor" href="#react-生命周期函数的使用场景" aria-label="Permalink to &quot;React 生命周期函数的使用场景&quot;">​</a></h2><h3 id="父组件-render-子组件也会随之-render-的优化方案" tabindex="-1">父组件 render，子组件也会随之 render 的优化方案 <a class="header-anchor" href="#父组件-render-子组件也会随之-render-的优化方案" aria-label="Permalink to &quot;父组件 render，子组件也会随之 render 的优化方案&quot;">​</a></h3><p>写在子组件中，当父组件传来的值和当前的值不一样，才更新(true)。否则不更新。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// 子组件</span></span>
<span class="line"><span style="color:#A7C080;">shouldComponentUpdate</span><span style="color:#D3C6AA;">(nextProps, nextState) {</span></span>
<span class="line"><span style="color:#E67E80;">  if</span><span style="color:#D3C6AA;"> (nextProps</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">content </span><span style="color:#E69875;">!==</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">props</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">content) {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D699B6;"> true</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">  } </span><span style="color:#E67E80;">else</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D699B6;"> false</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#A7C080;">render</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> { content } </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">props;</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#A7C080;"> &lt;</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;{</span><span style="color:#D3C6AA;">content</span><span style="color:#A7C080;">}&lt;/</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="约定-ajax-请求-放在-componentdidmount-里。" tabindex="-1">约定：ajax 请求，放在 componentDidMount 里。 <a class="header-anchor" href="#约定-ajax-请求-放在-componentdidmount-里。" aria-label="Permalink to &quot;约定：ajax 请求，放在 componentDidMount 里。&quot;">​</a></h3><p><strong>Question: 从后台获取数据一定要放在 componentDidMount 里面调用，为什么不能在 constructor 或者 componentWillMount 里面调用？</strong></p><p>原因：这与 React 组件的生命周期有关，组件挂载时有关的生命周期有以下几个:</p><ul><li>constructor()</li><li>componentWillMount()</li><li>render()</li><li>componentDidMount()</li></ul><p>上面这些方法的调用是有次序的，由上而下，也就是当说如果你要获取外部数据并加载到组件上，只能在组件&quot;已经&quot;挂载到真实的网页上才能作这事情，其它情况你是加载不到组件的。</p><p><strong>constructor</strong>被调用是在组件准备要挂载的最一开始，所以此时组件尚未挂载到网页上。</p><p><strong>componentWillMount</strong>方法的调用在 constructor 之后，在 render 之前，在这方法里的代码调用 setState 方法不会触发重渲染，所以它一般不会用来作加载数据之用，它也很少被使用到。</p><p><strong>componentDidMount</strong>方法中的代码，是在组件已经完全挂载到网页上才会调用被执行，所以可以保证数据的加载。此外，在这方法中调用 setState 方法，会触发重渲染。所以，官方设计这个方法就是用来加载外部数据用的，或处理其他的副作用代码。</p><p>一般的从后台(服务器)获取的数据，都会与组件上要用的数据加载有关，所以都在 componentDidMount 方法里面做。虽然与组件上的数据无关的加载，也可以在 constructor 里作，但 constructor 是作组件 state 初绐化工作，并不是设计来作加载数据这工作的，所以所有有副作用的代码都会集中在 componentDidMount 方法里。</p><h2 id="使用-charles-实现本地数据-mock" tabindex="-1">使用 Charles 实现本地数据 mock <a class="header-anchor" href="#使用-charles-实现本地数据-mock" aria-label="Permalink to &quot;使用 Charles 实现本地数据 mock&quot;">​</a></h2><p><img src="`+y+`" alt="charles"></p><p>如果不打算在代码里写反向代理的话，可以用这款软件做代理。</p><p>tools - map local 选项，如上个图配置。</p><p>ajax 打接口<code>http://localhost:3000/api/todolist</code>的话，Charles 会把桌面上的 todolist.json 中的内容做代理返回。</p><h2 id="使用-react-transition-group-实现动画" tabindex="-1">使用 react-transition-group 实现动画 <a class="header-anchor" href="#使用-react-transition-group-实现动画" aria-label="Permalink to &quot;使用 react-transition-group 实现动画&quot;">​</a></h2><p>官方文档：<a href="http://reactcommunity.org/react-transition-group/" target="_blank" rel="noreferrer">http://reactcommunity.org/react-transition-group/</a></p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { CSSTransition, TransitionGroup } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react-transition-group&quot;</span><span style="color:#D3C6AA;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">&lt;</span><span style="color:#7FBBB3;">TransitionGroup</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">  {</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">state</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">list</span><span style="color:#859289;">.</span><span style="color:#A7C080;">map</span><span style="color:#D3C6AA;">((item, index) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> (</span></span>
<span class="line"><span style="color:#A7C080;">      &lt;</span><span style="color:#7FBBB3;">CSSTransition</span></span>
<span class="line"><span style="color:#A7C080;">        timeout</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D699B6;">1000</span><span style="color:#A7C080;">}</span></span>
<span class="line"><span style="color:#A7C080;">        classNames</span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;">&quot;fade&quot;</span></span>
<span class="line"><span style="color:#A7C080;">        unmountOnExit</span></span>
<span class="line"><span style="color:#A7C080;">        onEntered</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">el </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">          el</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">style</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">color </span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;"> &quot;blue&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">        }</span><span style="color:#A7C080;">}</span></span>
<span class="line"><span style="color:#A7C080;">        appear</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D699B6;">true</span><span style="color:#A7C080;">}</span></span>
<span class="line"><span style="color:#A7C080;">        key</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">index</span><span style="color:#A7C080;">}</span></span>
<span class="line"><span style="color:#A7C080;">      &gt;</span></span>
<span class="line"><span style="color:#A7C080;">        &lt;</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;{</span><span style="color:#D3C6AA;">item</span><span style="color:#A7C080;">}&lt;/</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">      &lt;/</span><span style="color:#7FBBB3;">CSSTransition</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">    );</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span><span style="color:#A7C080;">}</span></span>
<span class="line"><span style="color:#A7C080;">&lt;/</span><span style="color:#7FBBB3;">TransitionGroup</span><span style="color:#A7C080;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div>`,153)]))}const v=n(A,[["render",b]]);export{g as __pageData,v as default};
