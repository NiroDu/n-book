import{_ as n,c as a,o as p,ag as l}from"./chunks/framework.D-6U7MZ9.js";const C=JSON.parse('{"title":"扩展接口","description":"","frontmatter":{},"headers":[],"relativePath":"typescript/chapter6/extend.md","filePath":"typescript/chapter6/extend.md","lastUpdated":1562065220000}'),o={name:"typescript/chapter6/extend.md"};function e(c,s,r,t,i,y){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="扩展接口" tabindex="-1">扩展接口 <a class="header-anchor" href="#扩展接口" aria-label="Permalink to &quot;扩展接口&quot;">​</a></h1><h2 id="需求分析" tabindex="-1">需求分析 <a class="header-anchor" href="#需求分析" aria-label="Permalink to &quot;需求分析&quot;">​</a></h2><p>为了用户更加方便地使用 axios 发送请求，我们可以为所有支持请求方法扩展一些接口：</p><ul><li><p><code>axios.request(config)</code></p></li><li><p><code>axios.get(url[, config])</code></p></li><li><p><code>axios.delete(url[, config])</code></p></li><li><p><code>axios.head(url[, config])</code></p></li><li><p><code>axios.options(url[, config])</code></p></li><li><p><code>axios.post(url[, data[, config]])</code></p></li><li><p><code>axios.put(url[, data[, config]])</code></p></li><li><p><code>axios.patch(url[, data[, config]])</code></p></li></ul><p>如果使用了这些方法，我们就不必在 <code>config</code> 中指定 <code>url</code>、<code>method</code>、<code>data</code> 这些属性了。</p><p>从需求上来看，<code>axios</code> 不再单单是一个方法，更像是一个混合对象，本身是一个方法，又有很多方法属性，接下来我们就来实现这个混合对象。</p><h2 id="接口类型定义" tabindex="-1">接口类型定义 <a class="header-anchor" href="#接口类型定义" aria-label="Permalink to &quot;接口类型定义&quot;">​</a></h2><p>根据需求分析，混合对象 <code>axios</code> 本身是一个函数，我们再实现一个包括它属性方法的类，然后把这个类的原型属性和自身属性再拷贝到 <code>axios</code> 上。</p><p>我们先来给 <code>axios</code> 混合对象定义接口：</p><p><code>types/index.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> interface</span><span style="color:#83C092;"> Axios</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">  request</span><span style="color:#D3C6AA;">(config</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosPromise</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  get</span><span style="color:#D3C6AA;">(url</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">, config</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosPromise</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  delete</span><span style="color:#D3C6AA;">(url</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">, config</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosPromise</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  head</span><span style="color:#D3C6AA;">(url</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">, config</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosPromise</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  options</span><span style="color:#D3C6AA;">(url</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">, config</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosPromise</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  post</span><span style="color:#D3C6AA;">(url</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">, data</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">, config</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosPromise</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  put</span><span style="color:#D3C6AA;">(url</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">, data</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">, config</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosPromise</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  patch</span><span style="color:#D3C6AA;">(url</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">, data</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">, config</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosPromise</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> interface</span><span style="color:#83C092;"> AxiosInstance</span><span style="color:#E69875;"> extends</span><span style="color:#83C092;"> Axios</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  (config</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosPromise</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> interface</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  url</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>首先定义一个 <code>Axios</code> 类型接口，它描述了 <code>Axios</code> 类中的公共方法，接着定义了 <code>AxiosInstance</code> 接口继承 <code>Axios</code>，它就是一个混合类型的接口。</p><p>另外 <code>AxiosRequestConfig</code> 类型接口中的 <code>url</code> 属性变成了可选属性。</p><h2 id="创建-axios-类" tabindex="-1">创建 Axios 类 <a class="header-anchor" href="#创建-axios-类" aria-label="Permalink to &quot;创建 Axios 类&quot;">​</a></h2><p>我们创建一个 <code>Axios</code> 类，来实现接口定义的公共方法。我们创建了一个 <code>core</code> 目录，用来存放发送请求核心流程的代码。我们在 <code>core</code> 目录下创建 <code>Axios.ts</code> 文件。</p><p><code>core/Axios.ts</code></p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">import</span><span style="color:#D3C6AA;"> { AxiosRequestConfig, AxiosPromise, Method } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;../types&#39;</span></span>
<span class="line"><span style="color:#D699B6;">import</span><span style="color:#D3C6AA;"> dispatchRequest </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;./dispatchRequest&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> default</span><span style="color:#E67E80;"> class</span><span style="color:#83C092;"> Axios</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">  request</span><span style="color:#D3C6AA;">(config</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosPromise</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#A7C080;"> dispatchRequest</span><span style="color:#D3C6AA;">(config)</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  get</span><span style="color:#D3C6AA;">(url</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">, config</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosPromise</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#A7C080;">_requestMethodWithoutData</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;get&#39;</span><span style="color:#D3C6AA;">, url, config)</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  delete</span><span style="color:#D3C6AA;">(url</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">, config</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosPromise</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#A7C080;">_requestMethodWithoutData</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;delete&#39;</span><span style="color:#D3C6AA;">, url, config)</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  head</span><span style="color:#D3C6AA;">(url</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">, config</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosPromise</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#A7C080;">_requestMethodWithoutData</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;head&#39;</span><span style="color:#D3C6AA;">, url, config)</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  options</span><span style="color:#D3C6AA;">(url</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">, config</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosPromise</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#A7C080;">_requestMethodWithoutData</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;options&#39;</span><span style="color:#D3C6AA;">, url, config)</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  post</span><span style="color:#D3C6AA;">(url</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">, data</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">, config</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosPromise</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#A7C080;">_requestMethodWithData</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;post&#39;</span><span style="color:#D3C6AA;">, url, data, config)</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  put</span><span style="color:#D3C6AA;">(url</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">, data</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">, config</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosPromise</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#A7C080;">_requestMethodWithData</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;put&#39;</span><span style="color:#D3C6AA;">, url, data, config)</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  patch</span><span style="color:#D3C6AA;">(url</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">, data</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">, config</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosPromise</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#A7C080;">_requestMethodWithData</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;patch&#39;</span><span style="color:#D3C6AA;">, url, data, config)</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  _requestMethodWithoutData</span><span style="color:#D3C6AA;">(method</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Method</span><span style="color:#D3C6AA;">, url</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">, config</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">) {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#A7C080;">request</span><span style="color:#D3C6AA;">(</span></span>
<span class="line"><span style="color:#D3C6AA;">      Object</span><span style="color:#859289;">.</span><span style="color:#A7C080;">assign</span><span style="color:#D3C6AA;">(config </span><span style="color:#E69875;">||</span><span style="color:#D3C6AA;"> {}, {</span></span>
<span class="line"><span style="color:#D3C6AA;">        method,</span></span>
<span class="line"><span style="color:#D3C6AA;">        url</span></span>
<span class="line"><span style="color:#D3C6AA;">      })</span></span>
<span class="line"><span style="color:#D3C6AA;">    )</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  _requestMethodWithData</span><span style="color:#D3C6AA;">(method</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Method</span><span style="color:#D3C6AA;">, url</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">, data</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">, config</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">) {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#A7C080;">request</span><span style="color:#D3C6AA;">(</span></span>
<span class="line"><span style="color:#D3C6AA;">      Object</span><span style="color:#859289;">.</span><span style="color:#A7C080;">assign</span><span style="color:#D3C6AA;">(config </span><span style="color:#E69875;">||</span><span style="color:#D3C6AA;"> {}, {</span></span>
<span class="line"><span style="color:#D3C6AA;">        method,</span></span>
<span class="line"><span style="color:#D3C6AA;">        url,</span></span>
<span class="line"><span style="color:#D3C6AA;">        data</span></span>
<span class="line"><span style="color:#D3C6AA;">      })</span></span>
<span class="line"><span style="color:#D3C6AA;">    )</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br></div></div><p>其中 <code>request</code> 方法的功能和我们之前的 <code>axios</code> 函数功能是一致。<code>axios</code> 函数的功能就是发送请求，基于模块化编程的思想，我们把这部分功能抽出一个单独的模块，在 <code>core</code> 目录下创建 <code>dispatchRequest</code> 方法，把之前 <code>axios.ts</code> 的相关代码拷贝过去。另外我们把 <code>xhr.ts</code> 文件也迁移到 <code>core</code> 目录下。</p><p><code>core/dispatchRequest.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">import</span><span style="color:#D3C6AA;"> { AxiosPromise, AxiosRequestConfig, AxiosResponse } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;../types&#39;</span></span>
<span class="line"><span style="color:#D699B6;">import</span><span style="color:#D3C6AA;"> xhr </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;./xhr&#39;</span></span>
<span class="line"><span style="color:#D699B6;">import</span><span style="color:#D3C6AA;"> { buildURL } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;../helpers/url&#39;</span></span>
<span class="line"><span style="color:#D699B6;">import</span><span style="color:#D3C6AA;"> { transformRequest, transformResponse } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;../helpers/data&#39;</span></span>
<span class="line"><span style="color:#D699B6;">import</span><span style="color:#D3C6AA;"> { processHeaders } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;../helpers/headers&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> default</span><span style="color:#E67E80;"> function</span><span style="color:#A7C080;"> dispatchRequest</span><span style="color:#D3C6AA;">(config</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosPromise</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">  processConfig</span><span style="color:#D3C6AA;">(config)</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#A7C080;"> xhr</span><span style="color:#D3C6AA;">(config)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(res</span><span style="color:#E69875;"> =&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#A7C080;"> transformResponseData</span><span style="color:#D3C6AA;">(res)</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> processConfig</span><span style="color:#D3C6AA;">(config</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> void</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  config</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">url</span><span style="color:#E69875;"> =</span><span style="color:#A7C080;"> transformURL</span><span style="color:#D3C6AA;">(config)</span></span>
<span class="line"><span style="color:#D3C6AA;">  config</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">headers</span><span style="color:#E69875;"> =</span><span style="color:#A7C080;"> transformHeaders</span><span style="color:#D3C6AA;">(config)</span></span>
<span class="line"><span style="color:#D3C6AA;">  config</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">data</span><span style="color:#E69875;"> =</span><span style="color:#A7C080;"> transformRequestData</span><span style="color:#D3C6AA;">(config)</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> transformURL</span><span style="color:#D3C6AA;">(config</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> {</span><span style="color:#D3C6AA;"> url,</span><span style="color:#D3C6AA;"> params</span><span style="color:#D3C6AA;"> }</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> config</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#A7C080;"> buildURL</span><span style="color:#D3C6AA;">(url,</span><span style="color:#D3C6AA;"> params)</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> transformRequestData</span><span style="color:#D3C6AA;">(config</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#A7C080;"> transformRequest</span><span style="color:#D3C6AA;">(config</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">data)</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> transformHeaders</span><span style="color:#D3C6AA;">(config</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> {</span><span style="color:#D3C6AA;"> headers</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> {},</span><span style="color:#D3C6AA;"> data</span><span style="color:#D3C6AA;"> }</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> config</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#A7C080;"> processHeaders</span><span style="color:#D3C6AA;">(headers,</span><span style="color:#D3C6AA;"> data)</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> transformResponseData</span><span style="color:#D3C6AA;">(res</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosResponse</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosResponse</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  res</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">data</span><span style="color:#E69875;"> =</span><span style="color:#A7C080;"> transformResponse</span><span style="color:#D3C6AA;">(res</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">data)</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> res</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><p>回到 <code>Axios.ts</code> 文件，对于 <code>get</code>、<code>delete</code>、<code>head</code>、<code>options</code>、<code>post</code>、<code>patch</code>、<code>put</code> 这些方法，都是对外提供的语法糖，内部都是通过调用 <code>request</code> 方法实现发送请求，只不过在调用之前对 <code>config</code> 做了一层合并处理。</p><h2 id="混合对象实现" tabindex="-1">混合对象实现 <a class="header-anchor" href="#混合对象实现" aria-label="Permalink to &quot;混合对象实现&quot;">​</a></h2><p>混合对象实现思路很简单，首先这个对象是一个函数，其次这个对象要包括 <code>Axios</code> 类的所有原型属性和实例属性，我们首先来实现一个辅助函数 <code>extend</code>。</p><p><code>helpers/util.ts</code></p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> function</span><span style="color:#A7C080;"> extend</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#D3C6AA;">,</span><span style="color:#83C092;"> U</span><span style="color:#D3C6AA;">&gt;(to</span><span style="color:#859289;">:</span><span style="color:#83C092;"> T</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> from</span><span style="color:#859289;">:</span><span style="color:#83C092;"> U</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> T</span><span style="color:#E69875;"> &amp;</span><span style="color:#83C092;"> U</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  for</span><span style="color:#D3C6AA;"> (</span><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> key</span><span style="color:#E67E80;"> in</span><span style="color:#D3C6AA;"> from)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    ;(to</span><span style="color:#E67E80;"> as</span><span style="color:#83C092;"> T</span><span style="color:#E69875;"> &amp;</span><span style="color:#83C092;"> U</span><span style="color:#D3C6AA;">)[key]</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> from[key]</span><span style="color:#E67E80;"> as</span><span style="color:#7FBBB3;"> any</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> to</span><span style="color:#E67E80;"> as</span><span style="color:#83C092;"> T</span><span style="color:#E69875;"> &amp;</span><span style="color:#83C092;"> U</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><code>extend</code> 方法的实现用到了交叉类型，并且用到了类型断言。<code>extend</code> 的最终目的是把 <code>from</code> 里的属性都扩展到 <code>to</code> 中，包括原型上的属性。</p><p>我们接下来对 <code>axios.ts</code> 文件做修改，我们用工厂模式去创建一个 <code>axios</code> 混合对象。</p><p><code>axios.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">import</span><span style="color:#D3C6AA;"> { AxiosInstance } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;./types&#39;</span></span>
<span class="line"><span style="color:#D699B6;">import</span><span style="color:#D3C6AA;"> Axios </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;./core/Axios&#39;</span></span>
<span class="line"><span style="color:#D699B6;">import</span><span style="color:#D3C6AA;"> { extend } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;./helpers/util&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> createInstance</span><span style="color:#D3C6AA;">()</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosInstance</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> context</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> Axios</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> instance</span><span style="color:#E69875;"> =</span><span style="color:#7FBBB3;"> Axios</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">prototype</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">request</span><span style="color:#859289;">.</span><span style="color:#A7C080;">bind</span><span style="color:#D3C6AA;">(context)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  extend</span><span style="color:#D3C6AA;">(instance,</span><span style="color:#D3C6AA;"> context)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> instance</span><span style="color:#E67E80;"> as</span><span style="color:#83C092;"> AxiosInstance</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> axios </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> createInstance</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> default</span><span style="color:#D3C6AA;"> axios</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>在 <code>createInstance</code> 工厂函数的内部，我们首先实例化了 <code>Axios</code> 实例 <code>context</code>，接着创建<code>instance</code> 指向 <code>Axios.prototype.request</code> 方法，并绑定了上下文 <code>context</code>；接着通过 <code>extend</code> 方法把 <code>context</code> 中的原型方法和实例方法全部拷贝到 <code>instance</code> 上，这样就实现了一个混合对象：<code>instance</code> 本身是一个函数，又拥有了 <code>Axios</code> 类的所有原型和实例属性，最终把这个 <code>instance</code> 返回。由于这里 <code>TypeScript</code> 不能正确推断 <code>instance</code> 的类型，我们把它断言成 <code>AxiosInstance</code> 类型。</p><p>这样我们就可以通过 <code>createInstance</code> 工厂函数创建了 <code>axios</code>，当直接调用 <code>axios</code> 方法就相当于执行了 <code>Axios</code> 类的 <code>request</code> 方法发送请求，当然我们也可以调用 <code>axios.get</code>、<code>axios.post</code> 等方法。</p><h2 id="demo-编写" tabindex="-1">demo 编写 <a class="header-anchor" href="#demo-编写" aria-label="Permalink to &quot;demo 编写&quot;">​</a></h2><p>在 <code>examples</code> 目录下创建 <code>extend</code> 目录，在 <code>extend</code> 目录下创建 <code>index.html</code>:</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">&lt;!</span><span style="color:#E69875;">DOCTYPE</span><span style="color:#DBBC7F;"> html</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">&lt;</span><span style="color:#E69875;">html</span><span style="color:#DBBC7F;"> lang</span><span style="color:#A7C080;">=</span><span style="color:#A7C080;">&quot;en&quot;</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">  &lt;</span><span style="color:#E69875;">head</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;</span><span style="color:#E69875;">meta</span><span style="color:#DBBC7F;"> charset</span><span style="color:#A7C080;">=</span><span style="color:#A7C080;">&quot;utf-8&quot;</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;</span><span style="color:#E69875;">title</span><span style="color:#A7C080;">&gt;</span><span style="color:#D3C6AA;">Extend example</span><span style="color:#A7C080;">&lt;/</span><span style="color:#E69875;">title</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">  &lt;/</span><span style="color:#E69875;">head</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">  &lt;</span><span style="color:#E69875;">body</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;</span><span style="color:#E69875;">script</span><span style="color:#DBBC7F;"> src</span><span style="color:#A7C080;">=</span><span style="color:#A7C080;">&quot;/__build__/extend.js&quot;</span><span style="color:#A7C080;">&gt;&lt;/</span><span style="color:#E69875;">script</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">  &lt;/</span><span style="color:#E69875;">body</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">&lt;/</span><span style="color:#E69875;">html</span><span style="color:#A7C080;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>接着创建 <code>app.ts</code> 作为入口文件：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">import</span><span style="color:#D3C6AA;"> axios </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;../../src/index&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">axios</span><span style="color:#D3C6AA;">({</span></span>
<span class="line"><span style="color:#D3C6AA;">  url</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;/extend/post&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  method</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;post&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  data</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    msg</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;hi&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">axios</span><span style="color:#859289;">.</span><span style="color:#A7C080;">request</span><span style="color:#D3C6AA;">({</span></span>
<span class="line"><span style="color:#D3C6AA;">  url</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;/extend/post&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  method</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;post&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  data</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    msg</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;hello&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">axios</span><span style="color:#859289;">.</span><span style="color:#A7C080;">get</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/extend/get&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">axios</span><span style="color:#859289;">.</span><span style="color:#A7C080;">options</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/extend/options&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">axios</span><span style="color:#859289;">.</span><span style="color:#A7C080;">delete</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/extend/delete&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">axios</span><span style="color:#859289;">.</span><span style="color:#A7C080;">head</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/extend/head&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">axios</span><span style="color:#859289;">.</span><span style="color:#A7C080;">post</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/extend/post&#39;</span><span style="color:#D3C6AA;">, { msg</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;post&#39;</span><span style="color:#D3C6AA;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">axios</span><span style="color:#859289;">.</span><span style="color:#A7C080;">put</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/extend/put&#39;</span><span style="color:#D3C6AA;">, { msg</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;put&#39;</span><span style="color:#D3C6AA;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">axios</span><span style="color:#859289;">.</span><span style="color:#A7C080;">patch</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/extend/patch&#39;</span><span style="color:#D3C6AA;">, { msg</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;patch&#39;</span><span style="color:#D3C6AA;"> })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>然后在命令行运行 <code>npm run dev</code>，接着打开 chrome 浏览器，访问 <code>http://localhost:8080/</code> 即可访问我们的 demo 了，我们点到 <code>Extend</code> 目录下，通过开发者工具的 network 部分我们可以看到每个请求的发送情况。</p><p>至此我们支持了对 <code>axios</code> API 的扩展，把它变成了一个混合对象。官方的 <code>axios</code> 实例除了支持了 <code>axios(config)</code>，还支持了传入 2 个参数 <code>axios(url, config)</code>，这里就涉及到函数重载的概念了，下一节我们来实现这个 feature。</p>`,38)]))}const d=n(o,[["render",e]]);export{C as __pageData,d as default};
