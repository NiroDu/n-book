import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.D-6U7MZ9.js";const b=JSON.parse('{"title":"JS中对 this 的理解","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/about_js_this.md","filePath":"javascript/about_js_this.md","lastUpdated":1550830462000}'),e={name:"javascript/about_js_this.md"};function o(r,s,t,c,i,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="js中对-this-的理解" tabindex="-1">JS中对 <code>this</code> 的理解 <a class="header-anchor" href="#js中对-this-的理解" aria-label="Permalink to &quot;JS中对 \`this\` 的理解&quot;">​</a></h1><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>可以归纳为：<strong>this所指的就是直至包含this指针的上层对象</strong></p><p><strong>调用形式</strong></p><ol><li>普通函数：this指向 ~全局对象window~</li><li>对象的方法：this指向 ~该对象~</li><li>构造函数：this指向 ~新构造的对象~</li></ol><h2 id="_1-一般用处" tabindex="-1">1. 一般用处 <a class="header-anchor" href="#_1-一般用处" aria-label="Permalink to &quot;1. 一般用处&quot;">​</a></h2><p>对于this变量最要的是能够理清this所引用的对象到底是哪一个，首先分析this所在的函数是当做哪个对象的方法调用的，则该对象就是this所引用的对象。</p><p><strong>示例一</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> obj </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {};</span></span>
<span class="line"><span style="color:#D3C6AA;">obj</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">x </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 100</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">obj</span><span style="color:#859289;">.</span><span style="color:#A7C080;">y</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span><span style="color:#A7C080;"> alert</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">x</span><span style="color:#D3C6AA;"> );</span><span style="color:#D3C6AA;"> };</span></span>
<span class="line"><span style="color:#D3C6AA;">obj</span><span style="color:#859289;">.</span><span style="color:#A7C080;">y</span><span style="color:#D3C6AA;">();    </span><span style="color:#859289;font-style:italic;">//弹出 100</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这段代码非常容易理解，当执行 obj.y() 时，函数是作为对象obj的方法调用的，因此函数体内的this指向的是obj对象，所以会弹出100。</p><p><strong>示例二</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">var</span><span style="color:#A7C080;"> checkThis</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">    alert</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">x);</span><span style="color:#A7C080;"> </span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> x </span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;"> &#39;this is a property of window&#39;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> obj </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {};</span></span>
<span class="line"><span style="color:#D3C6AA;">obj</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">x </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 100</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">obj</span><span style="color:#859289;">.</span><span style="color:#A7C080;">y</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">(){</span><span style="color:#A7C080;"> alert</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">x</span><span style="color:#D3C6AA;"> );</span><span style="color:#D3C6AA;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> obj2 </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> obj</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">y;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">obj</span><span style="color:#859289;">.</span><span style="color:#A7C080;">y</span><span style="color:#D3C6AA;">();   </span><span style="color:#859289;font-style:italic;">//弹出 100</span></span>
<span class="line"><span style="color:#A7C080;">checkThis</span><span style="color:#D3C6AA;">();    </span><span style="color:#859289;font-style:italic;">//弹出 &#39;this is a property of window&#39;</span></span>
<span class="line"><span style="color:#A7C080;">obj2</span><span style="color:#D3C6AA;">();    </span><span style="color:#859289;font-style:italic;">//弹出 &#39;this is a property of window&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>这里为什么会弹出 &#39;this is a property of window&#39;，可能有些让人迷惑。在JavaScript的变量作用域里有一条规则 <strong>“全局变量都是window对象的属性”</strong>。 当执行 checkThis() 时相当于 window.checkThis()，因此，此时checkThis函数体内的this关键字的指向变成了window对象，而又因为window对象obj2有一个x属性（ &#39;this is a property of window’），所以会弹出 &#39;this is a property of window&#39;。</p><p>只要判断出当前函数是被哪个对象调用的，就可以判断出当前this变量的指向。</p><hr><h2 id="_2-this-x-与-apply-、call" tabindex="-1">2. this.x 与 apply()、call() <a class="header-anchor" href="#_2-this-x-与-apply-、call" aria-label="Permalink to &quot;2. this.x 与 apply()、call()&quot;">​</a></h2><p>通过call和apply可以重新定义函数的执行环境，即this的指向。</p><p><strong>示例三：call()</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> changeStyle</span><span style="color:#D3C6AA;">(</span><span style="color:#D3C6AA;"> type</span><span style="color:#D3C6AA;"> ,</span><span style="color:#D3C6AA;"> value</span><span style="color:#D3C6AA;"> ){</span></span>
<span class="line"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">style[</span><span style="color:#D3C6AA;"> type</span><span style="color:#D3C6AA;"> ]</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> value;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> one </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> document</span><span style="color:#859289;">.</span><span style="color:#A7C080;">getElementById</span><span style="color:#D3C6AA;">( </span><span style="color:#DBBC7F;">&#39;one&#39;</span><span style="color:#D3C6AA;"> ); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">changeStyle</span><span style="color:#859289;">.</span><span style="color:#A7C080;">call</span><span style="color:#D3C6AA;">( one , </span><span style="color:#DBBC7F;">&#39;fontSize&#39;</span><span style="color:#D3C6AA;"> , </span><span style="color:#DBBC7F;">&#39;100px&#39;</span><span style="color:#D3C6AA;"> ); </span><span style="color:#859289;font-style:italic;">// 正确设置了one元素的字体大小</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">changeStyle</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;fontSize&#39;</span><span style="color:#D3C6AA;"> , </span><span style="color:#DBBC7F;">&#39;300px&#39;</span><span style="color:#D3C6AA;">);  </span><span style="color:#859289;font-style:italic;">//出现错误，因为此时changeStyle中this引用的是window对象，而window并无style属性。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>注意changeStyle.call() 中有三个参数，第一个参数用于指定该函数将被哪个对象所调用。这里指定了one，也就意味着，changeStyle函数将被one调用，因此函数体内this指向是one对象。 而第二个和第三个参数对应的是changeStyle函数里的type和value两个形参。</p><p><strong>示例四：apply()</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> changeStyle</span><span style="color:#D3C6AA;">(</span><span style="color:#D3C6AA;"> type</span><span style="color:#D3C6AA;"> ,</span><span style="color:#D3C6AA;"> value</span><span style="color:#D3C6AA;"> ){</span></span>
<span class="line"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">style[</span><span style="color:#D3C6AA;"> type</span><span style="color:#D3C6AA;"> ]</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> value;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> one </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> document</span><span style="color:#859289;">.</span><span style="color:#A7C080;">getElementById</span><span style="color:#D3C6AA;">( </span><span style="color:#DBBC7F;">&#39;one&#39;</span><span style="color:#D3C6AA;"> ); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">changeStyle</span><span style="color:#859289;">.</span><span style="color:#A7C080;">apply</span><span style="color:#D3C6AA;">( one , [</span><span style="color:#DBBC7F;">&#39;fontSize&#39;</span><span style="color:#D3C6AA;"> , </span><span style="color:#DBBC7F;">&#39;100px&#39;</span><span style="color:#D3C6AA;"> ]); </span><span style="color:#859289;font-style:italic;">// 正确设置了one元素的字体大小</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">changeStyle</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;fontSize&#39;</span><span style="color:#D3C6AA;"> , </span><span style="color:#DBBC7F;">&#39;300px&#39;</span><span style="color:#D3C6AA;">);  </span><span style="color:#859289;font-style:italic;">//出现错误，原因同示例三</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>apply的用法和call大致相同，只有一点区别，apply只接受两个参数，第一个参数和call相同，第二个参数必须是一个数组，数组中的元素对应的就是函数的形参。</p><hr><h2 id="_3-无意义-诡异-的this用处" tabindex="-1">3. 无意义（诡异）的this用处 <a class="header-anchor" href="#_3-无意义-诡异-的this用处" aria-label="Permalink to &quot;3. 无意义（诡异）的this用处&quot;">​</a></h2><p><strong>示例五</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> obj </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    x </span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 100</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#A7C080;">    y</span><span style="color:#859289;"> :</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">(){</span></span>
<span class="line"><span style="color:#A7C080;">        setTimeout</span><span style="color:#D3C6AA;">(</span></span>
<span class="line"><span style="color:#E67E80;">            function</span><span style="color:#D3C6AA;">(){</span><span style="color:#A7C080;"> alert</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">x);</span><span style="color:#D3C6AA;"> }</span><span style="color:#859289;font-style:italic;">    //这里的this指向的是window对象，并不是我们期待的obj,所以会弹出undefined</span></span>
<span class="line"><span style="color:#D3C6AA;">         ,</span><span style="color:#D699B6;"> 2000</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">obj</span><span style="color:#859289;">.</span><span style="color:#A7C080;">y</span><span style="color:#D3C6AA;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>如何达到预期的效果：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> obj </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    x </span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 100</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#A7C080;">    y</span><span style="color:#859289;"> :</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">(){</span></span>
<span class="line"><span style="color:#E69875;">        var</span><span style="color:#D3C6AA;"> that</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> this</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#A7C080;">        setTimeout</span><span style="color:#D3C6AA;">(</span></span>
<span class="line"><span style="color:#E67E80;">            function</span><span style="color:#D3C6AA;">(){</span><span style="color:#A7C080;"> alert</span><span style="color:#D3C6AA;">(that</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">x);</span><span style="color:#D3C6AA;"> }</span></span>
<span class="line"><span style="color:#D3C6AA;">         ,</span><span style="color:#D699B6;"> 2000</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">obj</span><span style="color:#859289;">.</span><span style="color:#A7C080;">y</span><span style="color:#D3C6AA;">(); </span><span style="color:#859289;font-style:italic;">//弹出100</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><hr><h2 id="_4-事件监听函数中的this" tabindex="-1">4. 事件监听函数中的this <a class="header-anchor" href="#_4-事件监听函数中的this" aria-label="Permalink to &quot;4. 事件监听函数中的this&quot;">​</a></h2><p><strong>示例六</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> one </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> document</span><span style="color:#859289;">.</span><span style="color:#A7C080;">getElementById</span><span style="color:#D3C6AA;">( </span><span style="color:#DBBC7F;">&#39;one&#39;</span><span style="color:#D3C6AA;"> );</span></span>
<span class="line"><span style="color:#D3C6AA;">one</span><span style="color:#859289;">.</span><span style="color:#A7C080;">onclick</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">(){</span></span>
<span class="line"><span style="color:#A7C080;">    alert</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">innerHTML</span><span style="color:#D3C6AA;"> );</span><span style="color:#859289;font-style:italic;">    //this指向的是one元素</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><hr><h2 id="补充一句" tabindex="-1">补充一句： <a class="header-anchor" href="#补充一句" aria-label="Permalink to &quot;补充一句：&quot;">​</a></h2><p>箭头函数，是不会创建自己的this,它只会从自己的作用域链的上一层继承this。 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="noreferrer">箭头函数 - JavaScript | MDN</a></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> myFunc</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D699B6;">  this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">myVar</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> 0</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#A7C080;">  setTimeout</span><span style="color:#D3C6AA;">(()</span><span style="color:#E69875;"> =&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">myVar</span><span style="color:#E69875;">++</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">    console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">myVar)</span><span style="color:#859289;font-style:italic;"> // 1</span></span>
<span class="line"><span style="color:#D3C6AA;">  },</span><span style="color:#D699B6;"> 0</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><a href="http://www.cnblogs.com/rainman/archive/2009/05/03/1448392.html#1523756" target="_blank" rel="noreferrer">深入理解JavaScript中的this关键字</a></p>`,38)]))}const C=n(e,[["render",o]]);export{b as __pageData,C as default};
