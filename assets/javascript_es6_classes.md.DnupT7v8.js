import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.D-6U7MZ9.js";const b=JSON.parse('{"title":"ES6 Classes","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/es6_classes.md","filePath":"javascript/es6_classes.md","lastUpdated":1536577720000}'),e={name:"javascript/es6_classes.md"};function o(c,s,r,t,i,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="es6-classes" tabindex="-1">ES6 Classes <a class="header-anchor" href="#es6-classes" aria-label="Permalink to &quot;ES6 Classes&quot;">​</a></h1><h2 id="声明一个类" tabindex="-1">声明一个类 <a class="header-anchor" href="#声明一个类" aria-label="Permalink to &quot;声明一个类&quot;">​</a></h2><p>Classes are in fact &quot;special functions&quot;, and just as you can define function expressions and function declarations, the class syntax has two components: <strong>class declarations</strong> and <strong>class expressions</strong></p><h3 id="class-declarations" tabindex="-1">Class declarations <a class="header-anchor" href="#class-declarations" aria-label="Permalink to &quot;Class declarations&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">class</span><span style="color:#7FBBB3;"> Rectangle</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  constructor</span><span style="color:#D3C6AA;">(height, width) {</span></span>
<span class="line"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">height </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> height;</span></span>
<span class="line"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">width </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> width;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="class-expressions" tabindex="-1">Class expressions <a class="header-anchor" href="#class-expressions" aria-label="Permalink to &quot;Class expressions&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// unnamed</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> Rectangle </span><span style="color:#E69875;">=</span><span style="color:#E67E80;"> class</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  constructor</span><span style="color:#D3C6AA;">(height, width) {</span></span>
<span class="line"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">height </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> height;</span></span>
<span class="line"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">width </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> width;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(Rectangle</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">name);</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// output: &quot;Rectangle&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// named</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> Rectangle </span><span style="color:#E69875;">=</span><span style="color:#E67E80;"> class</span><span style="color:#7FBBB3;"> Rectangle2</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  constructor</span><span style="color:#D3C6AA;">(height, width) {</span></span>
<span class="line"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">height </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> height;</span></span>
<span class="line"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">width </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> width;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(Rectangle</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">name);</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// output: &quot;Rectangle2&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="声明类的成员" tabindex="-1">声明类的成员 <a class="header-anchor" href="#声明类的成员" aria-label="Permalink to &quot;声明类的成员&quot;">​</a></h2><h3 id="constructor" tabindex="-1">Constructor <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;Constructor&quot;">​</a></h3><p>The <code>constructor</code> method is a special method for creating and initializing an object created with a <code>class</code>. There can <strong>only</strong> be one special method with the name <code>&quot;constructor&quot;</code> in a <code>class</code>.</p><h3 id="static-methods" tabindex="-1">Static methods <a class="header-anchor" href="#static-methods" aria-label="Permalink to &quot;Static methods&quot;">​</a></h3><p>The static keyword defines a static method for a class. Static methods are called without instantiating their class and cannot be called through a class instance. Static methods are often used to create utility functions for an application. （调用静态方法不需要实例化类，也不能通过类的实例去调用。）</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">class</span><span style="color:#7FBBB3;"> Point</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  constructor</span><span style="color:#D3C6AA;">(x, y) {</span></span>
<span class="line"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">x </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> x;</span></span>
<span class="line"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">y </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> y;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">  static</span><span style="color:#A7C080;"> distance</span><span style="color:#D3C6AA;">(a, b) {</span></span>
<span class="line"><span style="color:#E69875;">    const</span><span style="color:#D3C6AA;"> dx </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> a</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">x </span><span style="color:#E69875;">-</span><span style="color:#D3C6AA;"> b</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">x;</span></span>
<span class="line"><span style="color:#E69875;">    const</span><span style="color:#D3C6AA;"> dy </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> a</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">y </span><span style="color:#E69875;">-</span><span style="color:#D3C6AA;"> b</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">y;</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> Math</span><span style="color:#859289;">.</span><span style="color:#A7C080;">hypot</span><span style="color:#D3C6AA;">(dx, dy);</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> p1 </span><span style="color:#E69875;">=</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> Point</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">5</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">5</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> p2 </span><span style="color:#E69875;">=</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> Point</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">10</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">10</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(Point</span><span style="color:#859289;">.</span><span style="color:#A7C080;">distance</span><span style="color:#D3C6AA;">(p1, p2)); </span><span style="color:#859289;font-style:italic;">// 7.0710678118654755</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="autoboxing-in-class-自动装箱" tabindex="-1">Autoboxing in Class （自动装箱） <a class="header-anchor" href="#autoboxing-in-class-自动装箱" aria-label="Permalink to &quot;Autoboxing in Class （自动装箱）&quot;">​</a></h3><p>When a static or prototype method is called without a value for <code>this</code>, the this value will be <code>undefined</code> inside the method. because code within the <code>class</code> body&#39;s syntactic boundary is always executed <strong>in strict mode</strong>. Autoboxing will not happen in strict mode. （因为类body的执行环境总是严格模式，不会<code>Autoboxing</code>，所以<code>this</code>值保持不变，即还是<code>undefined</code>）</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">class</span><span style="color:#7FBBB3;"> Animal</span><span style="color:#D3C6AA;"> { </span></span>
<span class="line"><span style="color:#A7C080;">  speak</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D699B6;"> this</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#E69875;">  static</span><span style="color:#A7C080;"> eat</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D699B6;"> this</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> obj </span><span style="color:#E69875;">=</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> Animal</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#D3C6AA;">obj</span><span style="color:#859289;">.</span><span style="color:#A7C080;">speak</span><span style="color:#D3C6AA;">(); </span><span style="color:#859289;font-style:italic;">// Animal {}</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> speak </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> obj</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">speak;</span></span>
<span class="line"><span style="color:#A7C080;">speak</span><span style="color:#D3C6AA;">(); </span><span style="color:#859289;font-style:italic;">// undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">Animal</span><span style="color:#859289;">.</span><span style="color:#A7C080;">eat</span><span style="color:#D3C6AA;">() </span><span style="color:#859289;font-style:italic;">// Class Animal</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> eat </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> Animal</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">eat;</span></span>
<span class="line"><span style="color:#A7C080;">eat</span><span style="color:#D3C6AA;">(); </span><span style="color:#859289;font-style:italic;">// undefined</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>而用传统的函数语法实现上面的代码。则会<code>Autoboxing</code>，So, If the initial value is <code>undefined</code>, this will be set to the <code>global object</code>.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> Animal</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span><span style="color:#D3C6AA;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7FBBB3;">Animal</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">prototype</span><span style="color:#859289;">.</span><span style="color:#A7C080;">speak</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D699B6;"> this</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">Animal</span><span style="color:#859289;">.</span><span style="color:#A7C080;">eat</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D699B6;"> this</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> obj </span><span style="color:#E69875;">=</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> Animal</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> speak </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> obj</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">speak;</span></span>
<span class="line"><span style="color:#A7C080;">speak</span><span style="color:#D3C6AA;">(); </span><span style="color:#859289;font-style:italic;">// global object</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> eat </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> Animal</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">eat;</span></span>
<span class="line"><span style="color:#A7C080;">eat</span><span style="color:#D3C6AA;">(); </span><span style="color:#859289;font-style:italic;">// global object</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="sub-classing-with-extends" tabindex="-1">Sub classing with <code>extends</code> <a class="header-anchor" href="#sub-classing-with-extends" aria-label="Permalink to &quot;Sub classing with \`extends\`&quot;">​</a></h2><p>The <code>extends</code> keyword is used in <code>class declarations</code> or <code>class expressions</code> to <strong>create a class as a child of another class.</strong></p><p>先看第一种 <code>extend</code> 的例子（类与类之间）：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">class</span><span style="color:#7FBBB3;"> Animal</span><span style="color:#D3C6AA;"> { </span></span>
<span class="line"><span style="color:#E69875;">  constructor</span><span style="color:#D3C6AA;">(name) {</span></span>
<span class="line"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">name </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> name;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#A7C080;">  speak</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#D3C6AA;">    console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">name </span><span style="color:#E69875;">+</span><span style="color:#DBBC7F;"> &#39; makes a noise.&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">class</span><span style="color:#7FBBB3;"> Dog</span><span style="color:#E69875;"> extends</span><span style="color:#7FBBB3;"> Animal</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  constructor</span><span style="color:#D3C6AA;">(name) {</span></span>
<span class="line"><span style="color:#D699B6;">    super</span><span style="color:#D3C6AA;">(name); </span><span style="color:#859289;font-style:italic;">// call the super class constructor and pass in the name parameter</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#A7C080;">  speak</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#D3C6AA;">    console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">name </span><span style="color:#E69875;">+</span><span style="color:#DBBC7F;"> &#39; barks.&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> d </span><span style="color:#E69875;">=</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> Dog</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;Mitzie&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">d</span><span style="color:#859289;">.</span><span style="color:#A7C080;">speak</span><span style="color:#D3C6AA;">(); </span><span style="color:#859289;font-style:italic;">// Mitzie barks.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>再看第二种 <code>extend</code> 的例子（类与传统函数之间）：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> Animal </span><span style="color:#D3C6AA;">(name)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D699B6;">  this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">name</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> name;</span><span style="color:#A7C080;">  </span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7FBBB3;">Animal</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">prototype</span><span style="color:#859289;">.</span><span style="color:#A7C080;">speak</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;"> ()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">name</span><span style="color:#E69875;"> +</span><span style="color:#DBBC7F;"> &#39; makes a noise.&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">class</span><span style="color:#7FBBB3;"> Dog</span><span style="color:#E69875;"> extends</span><span style="color:#7FBBB3;"> Animal</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">  speak</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#D3C6AA;">    console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">name </span><span style="color:#E69875;">+</span><span style="color:#DBBC7F;"> &#39; barks.&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> d </span><span style="color:#E69875;">=</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> Dog</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;Mitzie&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">d</span><span style="color:#859289;">.</span><span style="color:#A7C080;">speak</span><span style="color:#D3C6AA;">(); </span><span style="color:#859289;font-style:italic;">// Mitzie barks.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>再看第三种 <code>extend</code> 的例子（类与常规变量之间，不可以直接 <code>extend</code>）：</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>需要注意的是：Classes cannot <code>extend</code> regular objects. If you want to inherit from a regular object, you can instead use <code>Object.setPrototypeOf()</code></p></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> Animal </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">  speak</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#D3C6AA;">    console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">name </span><span style="color:#E69875;">+</span><span style="color:#DBBC7F;"> &#39; makes a noise.&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">class</span><span style="color:#7FBBB3;"> Dog</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  constructor</span><span style="color:#D3C6AA;">(name) {</span></span>
<span class="line"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">name </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> name;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// If you do not do this you will get a TypeError when you invoke speak</span></span>
<span class="line"><span style="color:#D3C6AA;">Object</span><span style="color:#859289;">.</span><span style="color:#A7C080;">setPrototypeOf</span><span style="color:#D3C6AA;">(</span><span style="color:#7FBBB3;">Dog</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">prototype, Animal);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> d </span><span style="color:#E69875;">=</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> Dog</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;Mitzie&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">d</span><span style="color:#859289;">.</span><span style="color:#A7C080;">speak</span><span style="color:#D3C6AA;">(); </span><span style="color:#859289;font-style:italic;">// Mitzie makes a noise.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="super-class-calls-with-super" tabindex="-1">Super class calls with super <a class="header-anchor" href="#super-class-calls-with-super" aria-label="Permalink to &quot;Super class calls with super&quot;">​</a></h2><p>The <code>super</code> keyword is used to call corresponding methods of super class. This is one advantage over prototype-based inheritance.</p><p>e.g. A constructor can use the <code>super</code> keyword to call the constructor of the super class.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">class</span><span style="color:#7FBBB3;"> Cat</span><span style="color:#D3C6AA;"> { </span></span>
<span class="line"><span style="color:#E69875;">  constructor</span><span style="color:#D3C6AA;">(name) {</span></span>
<span class="line"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">name </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> name;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#A7C080;">  speak</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#D3C6AA;">    console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">\`</span><span style="color:#A7C080;">\${</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">name</span><span style="color:#A7C080;">}</span><span style="color:#DBBC7F;"> makes a noise.\`</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">class</span><span style="color:#7FBBB3;"> Lion</span><span style="color:#E69875;"> extends</span><span style="color:#7FBBB3;"> Cat</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">  speak</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#D699B6;">    super</span><span style="color:#859289;">.</span><span style="color:#A7C080;">speak</span><span style="color:#D3C6AA;">();</span><span style="color:#859289;font-style:italic;">// 假若去掉了这一句，则调用speak()时，只会输出 \`\${this.name} roars.\`</span></span>
<span class="line"><span style="color:#D3C6AA;">    console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">\`</span><span style="color:#A7C080;">\${</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">name</span><span style="color:#A7C080;">}</span><span style="color:#DBBC7F;"> roars.\`</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> l </span><span style="color:#E69875;">=</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> Lion</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;Fuzzy&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">l</span><span style="color:#859289;">.</span><span style="color:#A7C080;">speak</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// Fuzzy makes a noise.</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// Fuzzy roars.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="mix-ins" tabindex="-1">Mix-ins <a class="header-anchor" href="#mix-ins" aria-label="Permalink to &quot;Mix-ins&quot;">​</a></h2><p><code>mix-ins</code> is template for classes. An ECMAScript <code>class</code> can only have a single <code>superclass</code>，<code>Mix-ins</code> 使得一个类实现多重继承（同时继承多个父类）</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">let</span><span style="color:#A7C080;"> MyMixin</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> (superclass) </span><span style="color:#E69875;">=&gt;</span><span style="color:#E67E80;"> class</span><span style="color:#E69875;"> extends</span><span style="color:#7FBBB3;"> superclass</span><span style="color:#D3C6AA;"> {  </span></span>
<span class="line"><span style="color:#A7C080;">  foo</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#D3C6AA;">    console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;foo from MyMixin&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"><span style="color:#E67E80;">class</span><span style="color:#7FBBB3;"> MyClass</span><span style="color:#E69875;"> extends</span><span style="color:#A7C080;"> MyMixin</span><span style="color:#D3C6AA;">(MyBaseClass) {  </span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  /* ... */</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> c </span><span style="color:#E69875;">=</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> MyClass</span><span style="color:#D3C6AA;">();  </span></span>
<span class="line"><span style="color:#D3C6AA;">c</span><span style="color:#859289;">.</span><span style="color:#A7C080;">foo</span><span style="color:#D3C6AA;">(); </span><span style="color:#859289;font-style:italic;">// prints &quot;foo from MyMixin&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>当需要多个 Mixin 继承时，Mixin1, Mixin2, Mixin3…</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">class</span><span style="color:#7FBBB3;"> MyClass</span><span style="color:#E69875;"> extends</span><span style="color:#A7C080;"> Mixin1</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">Mixin2</span><span style="color:#D3C6AA;">(MyBaseClass)) {  </span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  /* ... */</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>关于 Mix-ins 想了解更多可以访问 <a href="http://justinfagnani.com/2015/12/21/real-mixins-with-javascript-classes/" target="_blank" rel="noreferrer">“Real” Mixins with JavaScript Classes</a></p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Defining_classes" target="_blank" rel="noreferrer">Classes - JavaScript | MDN</a></p>`,39)]))}const u=n(e,[["render",o]]);export{b as __pageData,u as default};
