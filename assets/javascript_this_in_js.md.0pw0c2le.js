import{_ as n,c as a,o as l,ag as e}from"./chunks/framework.D-6U7MZ9.js";const d=JSON.parse('{"title":"“This” in JS","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/this_in_js.md","filePath":"javascript/this_in_js.md","lastUpdated":1577442807000}'),o={name:"javascript/this_in_js.md"};function p(t,s,c,r,i,y){return l(),a("div",null,s[0]||(s[0]=[e(`<h1 id="this-in-js" tabindex="-1">“This” in JS <a class="header-anchor" href="#this-in-js" aria-label="Permalink to &quot;“This” in JS&quot;">​</a></h1><blockquote><p>A function&#39;s this keyword behaves a little differently in JavaScript compared to other languages. It also has some differences between <strong>strict mode</strong> and <strong>non-strict mode</strong>.</p></blockquote><h2 id="this-s-value" tabindex="-1">This‘s Value？ <a class="header-anchor" href="#this-s-value" aria-label="Permalink to &quot;This‘s Value？&quot;">​</a></h2><p><strong>it’s the JavaScript context object in which the current code is executing.</strong></p><p>In most cases, the value of this is determined by how a function is called. It can&#39;t be set by assignment during execution, and it may be different each time the function is called. ES5 introduced the <code>bind()</code> method to set the value of a function&#39;s this regardless of how it&#39;s called, and ES2015 introduced arrow functions which don&#39;t provide their own this binding (it retains the this value of the enclosing lexical context).</p><h2 id="case-1-global-context" tabindex="-1">Case 1 - Global context <a class="header-anchor" href="#case-1-global-context" aria-label="Permalink to &quot;Case 1 - Global context&quot;">​</a></h2><blockquote><p>In the global execution context (outside of any function), this refers to the global object whether in strict mode or not.</p></blockquote><h2 id="case-2-function-context" tabindex="-1">Case 2 - Function context <a class="header-anchor" href="#case-2-function-context" aria-label="Permalink to &quot;Case 2 - Function context&quot;">​</a></h2><blockquote><p>Inside a function, the value of this depends on how the function is called.</p></blockquote><h3 id="simple-call" tabindex="-1">Simple call <a class="header-anchor" href="#simple-call" aria-label="Permalink to &quot;Simple call&quot;">​</a></h3><p>Since the following code is not in strict mode, and because the value of this is not set by the call, this will default to the global object, which is window in a browser. （非严格模式下，this 默认指向 window）</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> f1</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D699B6;"> this</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// In a browser:</span></span>
<span class="line"><span style="color:#A7C080;">f1</span><span style="color:#D3C6AA;">() </span><span style="color:#E69875;">===</span><span style="color:#D3C6AA;"> window; </span><span style="color:#859289;font-style:italic;">// true </span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// In Node:</span></span>
<span class="line"><span style="color:#A7C080;">f1</span><span style="color:#D3C6AA;">() </span><span style="color:#E69875;">===</span><span style="color:#D3C6AA;"> global; </span><span style="color:#859289;font-style:italic;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>In strict mode</strong>, however, the value of this remains at whatever it was set to when entering the execution context, so, in the following case, this will default to <strong>undefined</strong>:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> f2</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#DBBC7F;">  &#39;use strict&#39;</span><span style="color:#D3C6AA;">;</span><span style="color:#859289;font-style:italic;"> // see strict mode</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D699B6;"> this</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#A7C080;">f2</span><span style="color:#D3C6AA;">() </span><span style="color:#E69875;">===</span><span style="color:#D699B6;"> undefined</span><span style="color:#D3C6AA;">; </span><span style="color:#859289;font-style:italic;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="call-and-apply" tabindex="-1">call() and apply() <a class="header-anchor" href="#call-and-apply" aria-label="Permalink to &quot;call() and apply()&quot;">​</a></h3><p>To pass the value of this from one context to another, use <code>call()</code>, or <code>apply()</code>:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// An object can be passed as the first argument to call or apply and this will be bound to it.</span></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> obj </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {a</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;Custom&#39;</span><span style="color:#D3C6AA;">};</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// This property is set on the global object</span></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> a </span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;"> &#39;Global&#39;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> whatsThis</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">a;</span><span style="color:#859289;font-style:italic;">  // The value of this is dependent on how the function is called</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#A7C080;">whatsThis</span><span style="color:#D3C6AA;">();          </span><span style="color:#859289;font-style:italic;">// &#39;Global&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">whatsThis</span><span style="color:#859289;">.</span><span style="color:#A7C080;">call</span><span style="color:#D3C6AA;">(obj);  </span><span style="color:#859289;font-style:italic;">// &#39;Custom&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">whatsThis</span><span style="color:#859289;">.</span><span style="color:#A7C080;">apply</span><span style="color:#D3C6AA;">(obj); </span><span style="color:#859289;font-style:italic;">// &#39;Custom&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> add</span><span style="color:#D3C6AA;">(c,</span><span style="color:#D3C6AA;"> d)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">a</span><span style="color:#E69875;"> +</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">b</span><span style="color:#E69875;"> +</span><span style="color:#D3C6AA;"> c</span><span style="color:#E69875;"> +</span><span style="color:#D3C6AA;"> d;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> o </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {a</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 1</span><span style="color:#D3C6AA;">, b</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 2</span><span style="color:#D3C6AA;">};</span></span>
<span class="line"><span style="color:#D3C6AA;">add</span><span style="color:#859289;">.</span><span style="color:#A7C080;">call</span><span style="color:#D3C6AA;">(o, </span><span style="color:#D699B6;">3</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">4</span><span style="color:#D3C6AA;">); </span><span style="color:#859289;font-style:italic;">//10</span></span>
<span class="line"><span style="color:#D3C6AA;">add</span><span style="color:#859289;">.</span><span style="color:#A7C080;">apply</span><span style="color:#D3C6AA;">(o, [</span><span style="color:#D699B6;">10</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">20</span><span style="color:#D3C6AA;">]); </span><span style="color:#859289;font-style:italic;">//33</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="bind" tabindex="-1">bind() <a class="header-anchor" href="#bind" aria-label="Permalink to &quot;bind()&quot;">​</a></h3><p><code>Function.prototype.bind()</code>, Calling f.bind(someObject) creates a new function with the same body and scope as f, but where <code>this</code> occurs in the original function, in the new function it is permanently bound to the first argument of bind, regardless of how the function is being used.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> f</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">a;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> g </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> f</span><span style="color:#859289;">.</span><span style="color:#A7C080;">bind</span><span style="color:#D3C6AA;">({a</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;azerty&#39;</span><span style="color:#D3C6AA;">});</span></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">g</span><span style="color:#D3C6AA;">()); </span><span style="color:#859289;font-style:italic;">// azerty</span></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> h </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> g</span><span style="color:#859289;">.</span><span style="color:#A7C080;">bind</span><span style="color:#D3C6AA;">({a</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;yoo&#39;</span><span style="color:#D3C6AA;">}); </span><span style="color:#859289;font-style:italic;">// bind only works once!</span></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">h</span><span style="color:#D3C6AA;">()); </span><span style="color:#859289;font-style:italic;">// azerty</span></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> o </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {a</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 37</span><span style="color:#D3C6AA;">, f</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> f, g</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> g, h</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> h};</span></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(o</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">a, o</span><span style="color:#859289;">.</span><span style="color:#A7C080;">f</span><span style="color:#D3C6AA;">(), o</span><span style="color:#859289;">.</span><span style="color:#A7C080;">g</span><span style="color:#D3C6AA;">(), o</span><span style="color:#859289;">.</span><span style="color:#A7C080;">h</span><span style="color:#D3C6AA;">()); </span><span style="color:#859289;font-style:italic;">// 37,37, azerty, azerty</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="arrow-functions" tabindex="-1">Arrow functions <a class="header-anchor" href="#arrow-functions" aria-label="Permalink to &quot;Arrow functions&quot;">​</a></h3><p>In arrow functions, <code>this</code> retains the value of the enclosing lexical context&#39;s <code>this</code>. （不会创建自己的this,它只会从自己的作用域链的上一层继承this）</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> myFunc</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D699B6;">  this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">myVar</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> 0</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#A7C080;">  setTimeout</span><span style="color:#D3C6AA;">(()</span><span style="color:#E69875;"> =&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">myVar</span><span style="color:#E69875;">++</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">    console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">myVar)</span><span style="color:#859289;font-style:italic;"> // 1</span></span>
<span class="line"><span style="color:#D3C6AA;">  },</span><span style="color:#D699B6;"> 0</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="as-an-object-method" tabindex="-1">As an object method <a class="header-anchor" href="#as-an-object-method" aria-label="Permalink to &quot;As an object method&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> o </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  prop</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 37</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#A7C080;">  f</span><span style="color:#859289;">:</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">prop;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> independent</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">prop;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#D3C6AA;">o</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">f </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> independent;</span></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(o</span><span style="color:#859289;">.</span><span style="color:#A7C080;">f</span><span style="color:#D3C6AA;">()); </span><span style="color:#859289;font-style:italic;">// 37</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>Similarly, the this binding is <strong>only</strong> affected by the most immediate member reference.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">o</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">b </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {g</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> independent, prop</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 42</span><span style="color:#D3C6AA;">};</span></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(o</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">b</span><span style="color:#859289;">.</span><span style="color:#A7C080;">g</span><span style="color:#D3C6AA;">()); </span><span style="color:#859289;font-style:italic;">// 42</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// we call it as a method g of the object o.b. This time during execution, this inside the function will refer to o.b</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="as-a-constructor" tabindex="-1">As a constructor <a class="header-anchor" href="#as-a-constructor" aria-label="Permalink to &quot;As a constructor&quot;">​</a></h3><p>When a function is used as a constructor (with the new keyword), its <code>this</code> is bound to the new object being constructed.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> C</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D699B6;">  this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">a</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> 37</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> o </span><span style="color:#E69875;">=</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> C</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(o</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">a); </span><span style="color:#859289;font-style:italic;">// 37</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> C2</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D699B6;">  this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">a</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> 37</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> {a</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 38</span><span style="color:#D3C6AA;">};</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#D3C6AA;">o </span><span style="color:#E69875;">=</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> C2</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(o</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">a); </span><span style="color:#859289;font-style:italic;">// 38</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="in-an-inline-event-handlersection" tabindex="-1">In an inline event handlerSection <a class="header-anchor" href="#in-an-inline-event-handlersection" aria-label="Permalink to &quot;In an inline event handlerSection&quot;">​</a></h3><p>When the code is called from an inline on-event handler, its <code>this</code> is set to the DOM element on which the listener is placed:</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">&lt;</span><span style="color:#E69875;">button</span><span style="color:#DBBC7F;"> onclick</span><span style="color:#A7C080;">=</span><span style="color:#A7C080;">&quot;alert</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">tagName</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toLowerCase</span><span style="color:#D3C6AA;">());</span><span style="color:#A7C080;">&quot;</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">  Show this</span></span>
<span class="line"><span style="color:#A7C080;">&lt;/</span><span style="color:#E69875;">button</span><span style="color:#A7C080;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>alert shows <code>button</code>.</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">&lt;</span><span style="color:#E69875;">button</span><span style="color:#DBBC7F;"> onclick</span><span style="color:#A7C080;">=</span><span style="color:#A7C080;">&quot;alert</span><span style="color:#D3C6AA;">((</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span><span style="color:#E67E80;"> return</span><span style="color:#D699B6;"> this</span><span style="color:#D3C6AA;">;</span><span style="color:#D3C6AA;"> })());</span><span style="color:#A7C080;">&quot;</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">  Show inner this</span></span>
<span class="line"><span style="color:#A7C080;">&lt;/</span><span style="color:#E69875;">button</span><span style="color:#A7C080;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>In this case, the inner function&#39;s <code>this</code> isn&#39;t set so it returns the global/window object.</p>`,36)]))}const b=n(o,[["render",p]]);export{d as __pageData,b as default};
