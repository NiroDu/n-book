import{_ as n,c as a,o as e,ag as p}from"./chunks/framework.D-6U7MZ9.js";const l="/n-book/assets/xsrf.DFPMI0AU.png",C=JSON.parse('{"title":"XSRF 防御","description":"","frontmatter":{},"headers":[],"relativePath":"typescript/chapter10/xsrf.md","filePath":"typescript/chapter10/xsrf.md","lastUpdated":1752550410000}'),o={name:"typescript/chapter10/xsrf.md"};function r(c,s,t,i,y,d){return e(),a("div",null,s[0]||(s[0]=[p('<h1 id="xsrf-防御" tabindex="-1">XSRF 防御 <a class="header-anchor" href="#xsrf-防御" aria-label="Permalink to &quot;XSRF 防御&quot;">​</a></h1><h2 id="需求分析" tabindex="-1">需求分析 <a class="header-anchor" href="#需求分析" aria-label="Permalink to &quot;需求分析&quot;">​</a></h2><p>XSRF 又名 <a href="https://developer.mozilla.org/en-US/docs/Learn/Server-side/First_steps/Website_security#Cross-Site_Request_Forgery_(CSRF)" target="_blank" rel="noreferrer">CSRF</a>，跨站请求伪造，它是前端常见的一种攻击方式，我们先通过一张图来认识它的攻击手段。</p><p><img src="'+l+`" alt="xsrf"></p><p>CSRF 的防御手段有很多，比如验证请求的 referer，但是 referer 也是可以伪造的，所以杜绝此类攻击的一种方式是服务器端要求每次请求都包含一个 <code>token</code>，这个 <code>token</code> 不在前端生成，而是在我们每次访问站点的时候生成，并通过 <code>set-cookie</code> 的方式种到客户端，然后客户端发送请求的时候，从 <code>cookie</code> 中对应的字段读取出 <code>token</code>，然后添加到请求 <code>headers</code> 中。这样服务端就可以从请求 <code>headers</code> 中读取这个 <code>token</code> 并验证，由于这个 <code>token</code> 是很难伪造的，所以就能区分这个请求是否是用户正常发起的。</p><p>对于我们的 <code>ts-axios</code> 库，我们要自动把这几件事做了，每次发送请求的时候，从 <code>cookie</code> 中读取对应的 <code>token</code> 值，然后添加到请求 <code>headers</code>中。我们允许用户配置 <code>xsrfCookieName</code> 和 <code>xsrfHeaderName</code>，其中 <code>xsrfCookieName</code> 表示存储 <code>token</code> 的 <code>cookie</code> 名称，<code>xsrfHeaderName</code> 表示请求 <code>headers</code> 中 <code>token</code> 对应的 <code>header</code> 名称。</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">axios</span><span style="color:#859289;">.</span><span style="color:#A7C080;">get</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/more/get&#39;</span><span style="color:#D3C6AA;">,{</span></span>
<span class="line"><span style="color:#D3C6AA;">  xsrfCookieName</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;XSRF-TOKEN&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#859289;font-style:italic;">// default</span></span>
<span class="line"><span style="color:#D3C6AA;">  xsrfHeaderName</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;X-XSRF-TOKEN&#39;</span><span style="color:#859289;font-style:italic;"> // default</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(res </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(res)</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>我们提供 <code>xsrfCookieName</code> 和 <code>xsrfHeaderName</code> 的默认值，当然用户也可以根据自己的需求在请求中去配置 <code>xsrfCookieName</code> 和 <code>xsrfHeaderName</code>。</p><h2 id="代码实现" tabindex="-1">代码实现 <a class="header-anchor" href="#代码实现" aria-label="Permalink to &quot;代码实现&quot;">​</a></h2><p>先修改 <code>AxiosRequestConfig</code> 的类型定义。</p><p><code>types/index.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> interface</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#D3C6AA;">  xsrfCookieName</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span></span>
<span class="line"><span style="color:#D3C6AA;">  xsrfHeaderName</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>然后修改默认配置。</p><p><code>defaults.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> defaults</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#D3C6AA;">  xsrfCookieName</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;XSRF-TOKEN&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">  xsrfHeaderName</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;X-XSRF-TOKEN&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>接下来我们要做三件事：</p><ul><li><p>首先判断如果是配置 <code>withCredentials</code> 为 <code>true</code> 或者是同域请求，我们才会请求 <code>headers</code> 添加 <code>xsrf</code> 相关的字段。</p></li><li><p>如果判断成功，尝试从 cookie 中读取 <code>xsrf</code> 的 <code>token</code> 值。</p></li><li><p>如果能读到，则把它添加到请求 <code>headers</code> 的 <code>xsrf</code> 相关字段中。</p></li></ul><p>我们先来实现同域请求的判断。</p><p><code>helpers/url.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">interface</span><span style="color:#83C092;"> URLOrigin</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  protocol</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span></span>
<span class="line"><span style="color:#D3C6AA;">  host</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> function</span><span style="color:#A7C080;"> isURLSameOrigin</span><span style="color:#D3C6AA;">(requestURL</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> boolean</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> parsedOrigin</span><span style="color:#E69875;"> =</span><span style="color:#A7C080;"> resolveURL</span><span style="color:#D3C6AA;">(requestURL)</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> (</span></span>
<span class="line"><span style="color:#D3C6AA;">    parsedOrigin</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">protocol</span><span style="color:#E69875;"> ===</span><span style="color:#D3C6AA;"> currentOrigin</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">protocol</span><span style="color:#E69875;"> &amp;&amp;</span><span style="color:#D3C6AA;"> parsedOrigin</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">host</span><span style="color:#E69875;"> ===</span><span style="color:#D3C6AA;"> currentOrigin</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">host</span></span>
<span class="line"><span style="color:#D3C6AA;">  )</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> urlParsingNode </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> document</span><span style="color:#859289;">.</span><span style="color:#A7C080;">createElement</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;a&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> currentOrigin </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> resolveURL</span><span style="color:#D3C6AA;">(window</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">location</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">href)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> resolveURL</span><span style="color:#D3C6AA;">(url</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> URLOrigin</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  urlParsingNode</span><span style="color:#859289;">.</span><span style="color:#A7C080;">setAttribute</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;href&#39;</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> url)</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> {</span><span style="color:#D3C6AA;"> protocol,</span><span style="color:#D3C6AA;"> host</span><span style="color:#D3C6AA;"> }</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> urlParsingNode</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    protocol,</span></span>
<span class="line"><span style="color:#D3C6AA;">    host</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>同域名的判断主要利用了一个技巧，创建一个 a 标签的 DOM，然后设置 <code>href</code> 属性为我们传入的 <code>url</code>，然后可以获取该 DOM 的 <code>protocol</code>、<code>host</code>。当前页面的 <code>url</code> 和请求的 <code>url</code> 都通过这种方式获取，然后对比它们的 <code>protocol</code> 和 <code>host</code> 是否相同即可。</p><p>接着实现 cookie 的读取。</p><p><code>helpers/cookie.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> cookie </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">  read</span><span style="color:#D3C6AA;">(name</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#E69875;"> |</span><span style="color:#7FBBB3;"> null</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">    const</span><span style="color:#D3C6AA;"> match </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> document</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">cookie</span><span style="color:#859289;">.</span><span style="color:#A7C080;">match</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">new</span><span style="color:#A7C080;"> RegExp</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;(^|;</span><span style="color:#A7C080;">\\\\</span><span style="color:#DBBC7F;">s*)(&#39;</span><span style="color:#E69875;"> +</span><span style="color:#D3C6AA;"> name </span><span style="color:#E69875;">+</span><span style="color:#DBBC7F;"> &#39;)=([^;]*)&#39;</span><span style="color:#D3C6AA;">))</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> match </span><span style="color:#E69875;">?</span><span style="color:#A7C080;"> decodeURIComponent</span><span style="color:#D3C6AA;">(match[</span><span style="color:#D699B6;">3</span><span style="color:#D3C6AA;">]) </span><span style="color:#E69875;">:</span><span style="color:#D699B6;"> null</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> default</span><span style="color:#D3C6AA;"> cookie</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><code>cookie</code> 的读取逻辑很简单，利用了正则表达式可以解析到 <code>name</code> 对应的值。</p><p>最后实现完整的逻辑。</p><p><code>core/xhr.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  /*...*/</span></span>
<span class="line"><span style="color:#D3C6AA;">  xsrfCookieName,</span></span>
<span class="line"><span style="color:#D3C6AA;">  xsrfHeaderName</span></span>
<span class="line"><span style="color:#D3C6AA;">} </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> config</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">if</span><span style="color:#D3C6AA;"> ((withCredentials </span><span style="color:#E69875;">||</span><span style="color:#A7C080;"> isURLSameOrigin</span><span style="color:#D3C6AA;">(url</span><span style="color:#E69875;">!</span><span style="color:#D3C6AA;">)) </span><span style="color:#E69875;">&amp;&amp;</span><span style="color:#D3C6AA;"> xsrfCookieName){</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> xsrfValue </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> cookie</span><span style="color:#859289;">.</span><span style="color:#A7C080;">read</span><span style="color:#D3C6AA;">(xsrfCookieName)</span></span>
<span class="line"><span style="color:#E67E80;">  if</span><span style="color:#D3C6AA;"> (xsrfValue) {</span></span>
<span class="line"><span style="color:#D3C6AA;">    headers[xsrfHeaderName</span><span style="color:#E69875;">!</span><span style="color:#D3C6AA;">] </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> xsrfValue</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="demo-编写" tabindex="-1">demo 编写 <a class="header-anchor" href="#demo-编写" aria-label="Permalink to &quot;demo 编写&quot;">​</a></h2><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> instance </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> axios</span><span style="color:#859289;">.</span><span style="color:#A7C080;">create</span><span style="color:#D3C6AA;">({</span></span>
<span class="line"><span style="color:#D3C6AA;">  xsrfCookieName</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;XSRF-TOKEN-D&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  xsrfHeaderName</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;X-XSRF-TOKEN-D&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">instance</span><span style="color:#859289;">.</span><span style="color:#A7C080;">get</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/more/get&#39;</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(res </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(res)</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><code>examples/server.js</code>：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">app</span><span style="color:#859289;">.</span><span style="color:#A7C080;">use</span><span style="color:#D3C6AA;">(express</span><span style="color:#859289;">.</span><span style="color:#A7C080;">static</span><span style="color:#D3C6AA;">(__dirname, {</span></span>
<span class="line"><span style="color:#A7C080;">  setHeaders</span><span style="color:#D3C6AA;"> (res) {</span></span>
<span class="line"><span style="color:#D3C6AA;">    res</span><span style="color:#859289;">.</span><span style="color:#A7C080;">cookie</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;XSRF-TOKEN-D&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;1234abc&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在访问页面的时候，服务端通过 <code>set-cookie</code> 往客户端种了 <code>key</code> 为 <code>XSRF-TOKEN</code>，值为 <code>1234abc</code> 的 <code>cookie</code>，作为 <code>xsrf</code> 的 <code>token</code> 值。</p><p>然后我们在前端发送请求的时候，就能从 cookie 中读出 <code>key</code> 为 <code>XSRF-TOKEN</code> 的值，然后把它添加到 <code>key</code> 为 <code>X-XSRF-TOKEN</code> 的请求 <code>headers</code> 中。</p><p>至此，我们实现了 XSRF 的自动防御的能力，下节课我们来实现 ts-axios 对上传和下载请求的支持。</p>`,35)]))}const b=n(o,[["render",r]]);export{C as __pageData,b as default};
