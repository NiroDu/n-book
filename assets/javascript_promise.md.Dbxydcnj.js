import{_ as n,c as a,o as e,ag as l}from"./chunks/framework.D-6U7MZ9.js";const p="/n-book/assets/promises.DFMVOXTU.png",b=JSON.parse('{"title":"Promise","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/promise.md","filePath":"javascript/promise.md","lastUpdated":1543409173000}'),o={name:"javascript/promise.md"};function r(c,s,t,i,y,A){return e(),a("div",null,s[0]||(s[0]=[l('<h1 id="promise" tabindex="-1">Promise <a class="header-anchor" href="#promise" aria-label="Permalink to &quot;Promise&quot;">​</a></h1><h2 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h2><blockquote><p>A <code>Promise</code> is an object representing the eventual completion or failure of an asynchronous operation, and its resulting value.</p></blockquote><p>Promise Constructor:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">new</span><span style="color:#7FBBB3;"> Promise</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">(resolve,</span><span style="color:#D3C6AA;"> reject)</span><span style="color:#D3C6AA;"> {</span><span style="color:#E69875;"> ...</span><span style="color:#D3C6AA;"> });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>A <strong>Promise</strong> is a proxy for a value not necessarily known when the promise is created. instead of immediately returning the final value, the asynchronous method returns a <code>promise</code> to supply the value at some point in the future.</p><p>A <strong>Promise</strong> is in one of these states:</p><ol><li><code>pending（进行中）</code>: initial state, neither fulfilled nor rejected.</li><li><code>fulfilled（已成功）</code>: meaning that the operation completed successfully.</li><li><code>rejected（已失败）</code>: meaning that the operation failed.</li></ol><p>A <code>pending</code> promise can either be <code>fulfilled</code> with a value, or <code>rejected</code> with a reason (error). When either of these options happens, the associated handlers queued up by a promise&#39;s <code>then</code> method are called.</p><p>（<code>then</code> 方法包含两个参数：<code>onfulfilled</code> 和 <code>onrejected</code>，它们都是 Function 类型。当 Promise 状态为 fulfilled 时，调用 then 的 onfulfilled 方法，当 Promise 状态为 rejected 时，调用 then 的 onrejected 方法， 在异步操作的完成和绑定处理方法之间不存在竞争）</p><p><img src="'+p+`" alt="promises"></p><div class="warning custom-block"><p class="custom-block-title">Note</p><p>Promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。</p></div><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><h3 id="promise-resolve-value" tabindex="-1">Promise.resolve(value) <a class="header-anchor" href="#promise-resolve-value" aria-label="Permalink to &quot;Promise.resolve(value)&quot;">​</a></h3><p>Returns a Promise object that is resolved with the given value.</p><p>通常而言，如果你不知道一个值是否是 Promise 对象，使用 <code>Promise.resolve(value)</code> 来返回一个 Promise 对象, 这样就能将该 value 以 Promise 对象形式使用。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#7FBBB3;">Promise</span><span style="color:#859289;">.</span><span style="color:#A7C080;">resolve</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;foo&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 等价于</span></span>
<span class="line"><span style="color:#E67E80;">new</span><span style="color:#7FBBB3;"> Promise</span><span style="color:#D3C6AA;">(resolve </span><span style="color:#E69875;">=&gt;</span><span style="color:#A7C080;"> resolve</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;foo&#39;</span><span style="color:#D3C6AA;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Promise.resolve方法的参数分成四种情况。</p><p><strong>（1）如果参数是一个原始值，或者是一个不具有<code>then</code>方法的对象，则<code>Promise.resolve</code>方法返回一个新的 Promise 对象，状态为<code>resolved</code>。</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> p </span><span style="color:#E69875;">=</span><span style="color:#7FBBB3;"> Promise</span><span style="color:#859289;">.</span><span style="color:#A7C080;">resolve</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;Hello&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 由于字符串 Hello 不属于异步操作，字符串对象不具有 then 方法，返回 Promise 实例的状态从一生成就是 resolved，所以回调函数会立即执行。</span></span>
<span class="line"><span style="color:#D3C6AA;">p</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;"> (s){</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(s)</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// Hello</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>（2）参数是一个 <code>thenable</code> 对象</strong></p><p><code>thenable</code>对象指的是具有<code>then</code>方法的对象，如下例：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> thenable </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">  then</span><span style="color:#859289;">:</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">(resolve,</span><span style="color:#D3C6AA;"> reject)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">    resolve</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">42</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// Promise.resolve 法会将这个对象转为 Promise 对象，然后就立即执行 thenable 对象的 then 方法。</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> p1 </span><span style="color:#E69875;">=</span><span style="color:#7FBBB3;"> Promise</span><span style="color:#859289;">.</span><span style="color:#A7C080;">resolve</span><span style="color:#D3C6AA;">(thenable);</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// thenable 对象的 then 方法执行后，对象 p1 的状态就变为 resolved</span></span>
<span class="line"><span style="color:#D3C6AA;">p1</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">(value)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(value);</span><span style="color:#859289;font-style:italic;">  // 42</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><strong>（3）参数是一个 Promise 实例</strong></p><p>如果参数是 Promise 实例，那么<code>Promise.resolve</code>将不做任何修改、原封不动地返回这个实例。</p><p><strong>（4）不带有任何参数</strong></p><p>直接返回一个<code>resolved</code>状态的 Promise 对象。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> p </span><span style="color:#E69875;">=</span><span style="color:#7FBBB3;"> Promise</span><span style="color:#859289;">.</span><span style="color:#A7C080;">resolve</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 变量p就是一个 Promise 对象。</span></span>
<span class="line"><span style="color:#D3C6AA;">p</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;"> ()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>另外要注意，立即<code>resolve</code>的 Promise 对象，是在本轮 “事件循环”（event loop）的结束时，而不是在下一轮 “事件循环” 的开始时。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">setTimeout</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;"> ()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;three&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">}, </span><span style="color:#D699B6;">0</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7FBBB3;">Promise</span><span style="color:#859289;">.</span><span style="color:#A7C080;">resolve</span><span style="color:#D3C6AA;">()</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;"> ()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;two&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;one&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// setTimeout(fn, 0)在下一轮 “事件循环” 开始时执行，</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// Promise.resolve()在本轮 “事件循环” 结束时执行，</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// console.log(&#39;one&#39;)则是立即执行，因此最先输出。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// one</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// two</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// three</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="promise-reject-reason" tabindex="-1">Promise.reject(reason) <a class="header-anchor" href="#promise-reject-reason" aria-label="Permalink to &quot;Promise.reject(reason)&quot;">​</a></h3><p>Returns a Promise object that is rejected with the given reason.</p><p>（返回一个新的 Promise 实例，该实例的状态为rejected。 并且<code>Promise.reject()</code>方法的参数，会原封不动地作为reject的理由，变成后续方法的参数。）</p><p>例子1：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> p </span><span style="color:#E69875;">=</span><span style="color:#7FBBB3;"> Promise</span><span style="color:#859289;">.</span><span style="color:#A7C080;">reject</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;出错了&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 等同于</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> p </span><span style="color:#E69875;">=</span><span style="color:#E67E80;"> new</span><span style="color:#7FBBB3;"> Promise</span><span style="color:#D3C6AA;">((resolve, reject) </span><span style="color:#E69875;">=&gt;</span><span style="color:#A7C080;"> reject</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;出错了&#39;</span><span style="color:#D3C6AA;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// then方法的第一个参数是resolved状态的回调函数，第二个参数（可选）是rejected状态的回调函数。</span></span>
<span class="line"><span style="color:#D3C6AA;">p</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">null</span><span style="color:#D3C6AA;">, </span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;"> (s)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(s)</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 出错了</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>例子2：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> thenable </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">  then</span><span style="color:#D3C6AA;">(resolve, reject) {</span></span>
<span class="line"><span style="color:#A7C080;">    reject</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;出错了&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7FBBB3;">Promise</span><span style="color:#859289;">.</span><span style="color:#A7C080;">reject</span><span style="color:#D3C6AA;">(thenable)</span></span>
<span class="line"><span style="color:#859289;">.</span><span style="color:#A7C080;">catch</span><span style="color:#D3C6AA;">(e </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">	// Promise.reject方法的参数是一个thenable对象，执行以后，后面catch方法的参数不是reject抛出的 “出错了” 这个字符串，而是thenable对象。</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(e </span><span style="color:#E69875;">===</span><span style="color:#D3C6AA;"> thenable)</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="promise-all-iterable" tabindex="-1">Promise.all(iterable) <a class="header-anchor" href="#promise-all-iterable" aria-label="Permalink to &quot;Promise.all(iterable)&quot;">​</a></h3><p><code>Promise.all</code>方法将多个 Promise 实例，包装成一个新的 Promise 实例。接受一个数组作为参数。</p><p>Returns a promise that either fulfills when all of the promises in the iterable argument have fulfilled or rejects as soon as one of the promises in the iterable argument rejects.</p><p>（返回一个 promise 对象。当参数里的所有 promise 对象都为 <code>fulfilled</code> 时，返回的 promise 对象的值才为 <code>fulfills</code>；只要参数里其中一个 promise 对象为 <code>rejected</code>，那返回的 promise 对象的值为 <code>rejects</code>）</p><p>If the returned promise fulfills, it is fulfilled with an array of the values from the fulfilled promises in the same order as defined in the iterable.</p><p>（返回的 promise 对象会把参数里所有 promise 返回值作为数组返回（作为成功回调的返回值），顺序跟参数里的顺序保持一致）</p><p>If the returned promise rejects, it is rejected with the reason from the first promise in the iterable that rejected.</p><p>（如果这个返回的 promise 对象触发了 <code>rejects</code> 状态，它会把参数里第一个触发 <code>rejects</code> 的 promise 对象的错误信息作为它的失败错误信息。）</p><p>This method can be useful for aggregating results of multiple promises.</p><p>（<code>Promise.all()</code> 方法常被用于处理多个 promise 对象的状态集合。）</p><p>下面是个好例子：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> p1 </span><span style="color:#E69875;">=</span><span style="color:#E67E80;"> new</span><span style="color:#7FBBB3;"> Promise</span><span style="color:#D3C6AA;">((resolve, reject) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">  resolve</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;hello&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span>
<span class="line"><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(result </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> result)</span></span>
<span class="line"><span style="color:#859289;">.</span><span style="color:#A7C080;">catch</span><span style="color:#D3C6AA;">(e </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> e);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> p2 </span><span style="color:#E69875;">=</span><span style="color:#E67E80;"> new</span><span style="color:#7FBBB3;"> Promise</span><span style="color:#D3C6AA;">((resolve, reject) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  throw</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> Error</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;报错了&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span>
<span class="line"><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(result </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> result)</span></span>
<span class="line"><span style="color:#859289;">.</span><span style="color:#A7C080;">catch</span><span style="color:#D3C6AA;">(e </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> e);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7FBBB3;">Promise</span><span style="color:#859289;">.</span><span style="color:#A7C080;">all</span><span style="color:#D3C6AA;">([p1, p2])</span></span>
<span class="line"><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(result </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(result))</span></span>
<span class="line"><span style="color:#859289;">.</span><span style="color:#A7C080;">catch</span><span style="color:#D3C6AA;">(e </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(e));</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// [&quot;hello&quot;, Error: 报错了]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>p1 会 resolved，p2 会 rejected，但是p2有自己的catch方法，该方法返回的是一个新的 Promise 实例，p2指向的实际上是这个实例。</p><p>该实例执行完catch方法后，也会变成resolved，导致Promise.all()方法参数里面的两个实例都会resolved，因此会调用then方法指定的回调函数，而不会调用catch方法指定的回调函数。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>如果<code>p2</code>没有自己的 <code>catch</code>方法，就会调用<code>Promise.all()</code>的<code>catch</code>方法。</p></div><h3 id="promise-race-iterable" tabindex="-1">Promise.race(iterable) <a class="header-anchor" href="#promise-race-iterable" aria-label="Permalink to &quot;Promise.race(iterable)&quot;">​</a></h3><p><code>Promise.race()</code>方法也是将多个 Promise 实例，包装成一个新的 Promise 实例。接受一个数组作为参数。</p><p>Returns a promise that fulfills or rejects as soon as one of the promises in the iterable fulfills or rejects, with the value or reason from that promise.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> p </span><span style="color:#E69875;">=</span><span style="color:#7FBBB3;"> Promise</span><span style="color:#859289;">.</span><span style="color:#A7C080;">race</span><span style="color:#D3C6AA;">([p1, p2, p3]);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>上面代码中，只要<code>p1</code>、<code>p2</code>、<code>p3</code>之中有一个实例率先改变状态，<code>p</code>的状态就跟着改变。那个率先改变的 <code>Promise</code> 实例的返回值，就传递给<code>p</code>的回调函数。</p><p>应用：下例中 如果指定时间内没有获得结果，就将 <code>Promise</code> 的状态变为<code>reject</code>，否则变为<code>resolve</code>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> p </span><span style="color:#E69875;">=</span><span style="color:#7FBBB3;"> Promise</span><span style="color:#859289;">.</span><span style="color:#A7C080;">race</span><span style="color:#D3C6AA;">([</span></span>
<span class="line"><span style="color:#A7C080;">  fetch</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/resource-that-may-take-a-while&#39;</span><span style="color:#D3C6AA;">),</span></span>
<span class="line"><span style="color:#E67E80;">  new</span><span style="color:#7FBBB3;"> Promise</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;"> (resolve,</span><span style="color:#D3C6AA;"> reject)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">    setTimeout</span><span style="color:#D3C6AA;">(()</span><span style="color:#E69875;"> =&gt;</span><span style="color:#A7C080;"> reject</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">new</span><span style="color:#A7C080;"> Error</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;request timeout&#39;</span><span style="color:#D3C6AA;">)),</span><span style="color:#D699B6;"> 5000</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"><span style="color:#D3C6AA;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">p</span></span>
<span class="line"><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(console</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">log)</span></span>
<span class="line"><span style="color:#859289;">.</span><span style="color:#A7C080;">catch</span><span style="color:#D3C6AA;">(console</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">error);</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 如果 5 秒之内fetch方法无法返回结果，变量p的状态就会变为rejected，从而触发catch方法指定的回调函数。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="promise-prototype-methods" tabindex="-1">Promise prototype methods <a class="header-anchor" href="#promise-prototype-methods" aria-label="Permalink to &quot;Promise prototype methods&quot;">​</a></h2><h3 id="promise-prototype-then-onfulfilled-onrejected" tabindex="-1">Promise.prototype.then(onFulfilled, onRejected) <a class="header-anchor" href="#promise-prototype-then-onfulfilled-onrejected" aria-label="Permalink to &quot;Promise.prototype.then(onFulfilled, onRejected)&quot;">​</a></h3><p>then方法的第一个参数是<code>resolved</code>状态的回调函数，第二个参数（可选）是<code>rejected</code>状态的回调函数。</p><p><code>then</code>方法返回的是一个新的Promise实例，因此可以采用链式写法。</p><h3 id="promise-prototype-catch-onrejected" tabindex="-1">Promise.prototype.catch(onRejected) <a class="header-anchor" href="#promise-prototype-catch-onrejected" aria-label="Permalink to &quot;Promise.prototype.catch(onRejected)&quot;">​</a></h3><p><strong>Promise.prototype.catch方法是.then(null, rejection)的别名</strong></p><p>如果异步操作抛出错误，状态就会变为<code>rejected</code>，就会调用<code>catch</code>方法指定的回调函数，处理这个错误。</p><p>另外，<code>then</code>方法指定的回调函数，如果运行中抛出错误，也会被<code>catch</code>方法捕获。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">p</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">((val) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;fulfilled:&#39;</span><span style="color:#D3C6AA;">, val))</span></span>
<span class="line"><span style="color:#859289;">  .</span><span style="color:#A7C080;">catch</span><span style="color:#D3C6AA;">((err) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;rejected&#39;</span><span style="color:#D3C6AA;">, err));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 等同于</span></span>
<span class="line"><span style="color:#D3C6AA;">p</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">((val) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;fulfilled:&#39;</span><span style="color:#D3C6AA;">, val))</span></span>
<span class="line"><span style="color:#859289;">  .</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">null</span><span style="color:#D3C6AA;">, (err) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;rejected:&quot;</span><span style="color:#D3C6AA;">, err));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Promise 在resolve语句后面，再抛出错误，不会被捕获，等于没有抛出。因为Promise 的状态一旦改变，就永久保持该状态，不会再变了。</p><h3 id="promise-prototype-finally-onfinally" tabindex="-1">Promise.prototype.finally(onFinally) <a class="header-anchor" href="#promise-prototype-finally-onfinally" aria-label="Permalink to &quot;Promise.prototype.finally(onFinally)&quot;">​</a></h3><p>finally方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。</p><p>finally方法的回调函数不接受任何参数。这表明，finally方法里面的操作，应该是与状态无关的，不依赖于 Promise 的执行结果。</p><p>finally本质上是then方法的特例。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">promise</span></span>
<span class="line"><span style="color:#859289;">.</span><span style="color:#A7C080;">finally</span><span style="color:#D3C6AA;">(() </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 语句</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 等同于</span></span>
<span class="line"><span style="color:#D3C6AA;">promise</span></span>
<span class="line"><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(</span></span>
<span class="line"><span style="color:#D3C6AA;">  result </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // 语句</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> result;</span></span>
<span class="line"><span style="color:#D3C6AA;">  },</span></span>
<span class="line"><span style="color:#D3C6AA;">  error </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // 语句</span></span>
<span class="line"><span style="color:#E67E80;">    throw</span><span style="color:#D3C6AA;"> error;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p><code>finally</code> 方法的实现：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#7FBBB3;">Promise</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">prototype</span><span style="color:#859289;">.</span><span style="color:#A7C080;">finally</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;"> (callback)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  let</span><span style="color:#D3C6AA;"> P</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">constructor;</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(</span></span>
<span class="line"><span style="color:#D3C6AA;">    value</span><span style="color:#E69875;">  =&gt;</span><span style="color:#D3C6AA;"> P</span><span style="color:#859289;">.</span><span style="color:#A7C080;">resolve</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">callback</span><span style="color:#D3C6AA;">())</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(()</span><span style="color:#E69875;"> =&gt;</span><span style="color:#D3C6AA;"> value),</span></span>
<span class="line"><span style="color:#D3C6AA;">    reason</span><span style="color:#E69875;"> =&gt;</span><span style="color:#D3C6AA;"> P</span><span style="color:#859289;">.</span><span style="color:#A7C080;">resolve</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">callback</span><span style="color:#D3C6AA;">())</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(()</span><span style="color:#E69875;"> =&gt;</span><span style="color:#D3C6AA;"> {</span><span style="color:#E67E80;"> throw</span><span style="color:#D3C6AA;"> reason</span><span style="color:#D3C6AA;"> })</span></span>
<span class="line"><span style="color:#D3C6AA;">  );</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="chaining-after-a-catch" tabindex="-1">Chaining after a catch <a class="header-anchor" href="#chaining-after-a-catch" aria-label="Permalink to &quot;Chaining after a catch&quot;">​</a></h2><p>It&#39;s possible to chain after a failure, i.e. a catch, which is useful to accomplish new actions even after an action failed in the chain. （在 Promise 链式调用中，其中一节抛出错误(throw new Error)，后面的<code>catch</code>就能捕捉到，并且不会阻塞下一个<code>then</code>的调用，如下例：）</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">new</span><span style="color:#7FBBB3;"> Promise</span><span style="color:#D3C6AA;">((resolve, reject) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;Initial&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#A7C080;">    resolve</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span>
<span class="line"><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(() </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    throw</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> Error</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;Something failed&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">    console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;Do this&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span>
<span class="line"><span style="color:#859289;">.</span><span style="color:#A7C080;">catch</span><span style="color:#D3C6AA;">(() </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;Do that&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span>
<span class="line"><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(() </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;Do this, no matter what happened before&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">the text “Do this” is not output because the “Something failed“ error caused a rejection.</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">This will output the following text:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">Initial</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">Do that</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">Do this, no matter what happened before</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">*/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h2 id="creating-a-promise-around-an-old-callback-api" tabindex="-1">Creating a Promise around an old callback API <a class="header-anchor" href="#creating-a-promise-around-an-old-callback-api" aria-label="Permalink to &quot;Creating a Promise around an old callback API&quot;">​</a></h2><p>some APIs still expect success and/or failure callbacks to be passed in the old way:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">setTimeout</span><span style="color:#D3C6AA;">(() </span><span style="color:#E69875;">=&gt;</span><span style="color:#A7C080;"> saySomething</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;3 seconds passed&quot;</span><span style="color:#D3C6AA;">), </span><span style="color:#D699B6;">3000</span><span style="color:#D3C6AA;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Mixing old-style callbacks and promises is problematic. If <code>saySomething()</code> fails or contains a programming error, nothing catches it. （上例中，假如 saySomething 函数出现了报错，我们没法在 setTimeout 中捕获这个错误。）</p><p>Luckily we can wrap it in a <strong>promise</strong>. Best practice is to wrap problematic functions at the lowest possible level, and then never call them directly again: （那我们可以使用 Promise 来封装一下：）</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">const</span><span style="color:#A7C080;"> saySomething</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> text </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> { console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(text); }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#A7C080;"> wait</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> ms </span><span style="color:#E69875;">=&gt;</span><span style="color:#E67E80;"> new</span><span style="color:#7FBBB3;"> Promise</span><span style="color:#D3C6AA;">(resolve </span><span style="color:#E69875;">=&gt;</span><span style="color:#A7C080;"> setTimeout</span><span style="color:#D3C6AA;">(resolve, ms));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">wait</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">3000</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(text </span><span style="color:#E69875;">=&gt;</span><span style="color:#A7C080;"> saySomething</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;3 seconds&quot;</span><span style="color:#D3C6AA;">))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">catch</span><span style="color:#D3C6AA;">(failureCallback); </span><span style="color:#859289;font-style:italic;">// failureCallback 在这里还没定义</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="timing-时序" tabindex="-1">Timing（时序） <a class="header-anchor" href="#timing-时序" aria-label="Permalink to &quot;Timing（时序）&quot;">​</a></h2><p>为了防止意外，即使是一个已经变成<code>resolve</code>状态的<code>promise</code>，传给<code>then</code>的函数也不会被同步执行。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#7FBBB3;">Promise</span><span style="color:#859289;">.</span><span style="color:#A7C080;">resolve</span><span style="color:#D3C6AA;">()</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(() </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">2</span><span style="color:#D3C6AA;">)); </span><span style="color:#859289;font-style:italic;">// 并不会以同步的顺序先输出 2</span></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 1, 2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Instead of running immediately, the passed-in function is put on a <code>microtask queue</code>, which means it runs later <strong>when the queue is emptied</strong> at the end of the current run of the JavaScript event loop:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">const</span><span style="color:#A7C080;"> wait</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> ms </span><span style="color:#E69875;">=&gt;</span><span style="color:#E67E80;"> new</span><span style="color:#7FBBB3;"> Promise</span><span style="color:#D3C6AA;">(resolve </span><span style="color:#E69875;">=&gt;</span><span style="color:#A7C080;"> setTimeout</span><span style="color:#D3C6AA;">(resolve, ms)); </span><span style="color:#859289;font-style:italic;">// setTimeout 是 macrotask, 所以会最后输出 4</span></span>
<span class="line"><span style="color:#A7C080;">wait</span><span style="color:#D3C6AA;">()</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(() </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">4</span><span style="color:#D3C6AA;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7FBBB3;">Promise</span><span style="color:#859289;">.</span><span style="color:#A7C080;">resolve</span><span style="color:#D3C6AA;">()</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(() </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">2</span><span style="color:#D3C6AA;">))</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(() </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">3</span><span style="color:#D3C6AA;">)); </span><span style="color:#859289;font-style:italic;">// Promise 是 microtask</span></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 1, 2, 3, 4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noreferrer">Promise - JavaScript | MDN</a><a href="http://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="noreferrer">ECMAScript 6入门 - Pormise</a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises" target="_blank" rel="noreferrer">Using promises - JavaScript | MDN</a></p>`,92)]))}const m=n(o,[["render",r]]);export{b as __pageData,m as default};
