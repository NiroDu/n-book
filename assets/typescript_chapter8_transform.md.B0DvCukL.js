import{_ as n,c as a,o as p,ag as l}from"./chunks/framework.D-6U7MZ9.js";const d=JSON.parse('{"title":"请求和响应配置化","description":"","frontmatter":{},"headers":[],"relativePath":"typescript/chapter8/transform.md","filePath":"typescript/chapter8/transform.md","lastUpdated":1562148797000}'),e={name:"typescript/chapter8/transform.md"};function o(r,s,c,t,y,A){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="请求和响应配置化" tabindex="-1">请求和响应配置化 <a class="header-anchor" href="#请求和响应配置化" aria-label="Permalink to &quot;请求和响应配置化&quot;">​</a></h1><h2 id="需求分析" tabindex="-1">需求分析 <a class="header-anchor" href="#需求分析" aria-label="Permalink to &quot;需求分析&quot;">​</a></h2><p>官方的 axios 库 给默认配置添加了 <code>transformRequest</code> 和 <code>transformResponse</code> 两个字段，它们的值是一个数组或者是一个函数。</p><p>其中 <code>transformRequest</code> 允许你在将请求数据发送到服务器之前对其进行修改，这只适用于请求方法 <code>put</code>、<code>post</code> 和 <code>patch</code>，如果值是数组，则数组中的最后一个函数必须返回一个字符串或 <code>FormData</code>、<code>URLSearchParams</code>、<code>Blob</code> 等类型作为 <code>xhr.send</code> 方法的参数，而且在 <code>transform</code> 过程中可以修改 <code>headers</code> 对象。</p><p>而 <code>transformResponse</code> 允许你在把响应数据传递给 <code>then</code> 或者 <code>catch</code> 之前对它们进行修改。</p><p>当值为数组的时候，数组的每一个函数都是一个转换函数，数组中的函数就像管道一样依次执行，前者的输出作为后者的输入。</p><p>举个例子：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">axios</span><span style="color:#D3C6AA;">({</span></span>
<span class="line"><span style="color:#D3C6AA;">  transformRequest</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [(</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">(data)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> qs</span><span style="color:#859289;">.</span><span style="color:#A7C080;">stringify</span><span style="color:#D3C6AA;">(data)</span></span>
<span class="line"><span style="color:#D3C6AA;">  }), </span><span style="color:#E69875;">...</span><span style="color:#D3C6AA;">axios</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">defaults</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">transformRequest],</span></span>
<span class="line"><span style="color:#D3C6AA;">  transformResponse</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [axios</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">defaults</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">transformResponse, </span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">(data)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    if</span><span style="color:#D3C6AA;"> (</span><span style="color:#E67E80;">typeof</span><span style="color:#D3C6AA;"> data</span><span style="color:#E69875;"> ===</span><span style="color:#DBBC7F;"> &#39;object&#39;</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">      data</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">b</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> 2</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> data</span></span>
<span class="line"><span style="color:#D3C6AA;">  }],</span></span>
<span class="line"><span style="color:#D3C6AA;">  url</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;/config/post&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  method</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;post&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  data</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    a</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 1</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="修改默认配置" tabindex="-1">修改默认配置 <a class="header-anchor" href="#修改默认配置" aria-label="Permalink to &quot;修改默认配置&quot;">​</a></h2><p>先修改 <code>AxiosRequestConfig</code> 的类型定义，添加 <code>transformRequest</code> 和 <code>transformResponse</code> 俩个可选属性。</p><p><code>types/index.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> interface</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#D3C6AA;">  transformRequest</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosTransformer</span><span style="color:#E69875;"> |</span><span style="color:#83C092;"> AxiosTransformer</span><span style="color:#D3C6AA;">[]</span></span>
<span class="line"><span style="color:#D3C6AA;">  transformResponse</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosTransformer</span><span style="color:#E69875;"> |</span><span style="color:#83C092;"> AxiosTransformer</span><span style="color:#D3C6AA;">[]</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> interface</span><span style="color:#83C092;"> AxiosTransformer</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  (data</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">, headers</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>接着修改默认配置，如下：</p><p><code>defaults.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">import</span><span style="color:#D3C6AA;"> { processHeaders } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;./helpers/headers&#39;</span></span>
<span class="line"><span style="color:#D699B6;">import</span><span style="color:#D3C6AA;"> { transformRequest, transformResponse } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;./helpers/data&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> defaults</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#D3C6AA;">  transformRequest</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span></span>
<span class="line"><span style="color:#E67E80;">    function</span><span style="color:#D3C6AA;">(data</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> headers</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">      processHeaders</span><span style="color:#D3C6AA;">(headers,</span><span style="color:#D3C6AA;"> data)</span></span>
<span class="line"><span style="color:#E67E80;">      return</span><span style="color:#A7C080;"> transformRequest</span><span style="color:#D3C6AA;">(data)</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">  ],</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">  transformResponse</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span></span>
<span class="line"><span style="color:#E67E80;">    function</span><span style="color:#D3C6AA;">(data</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">      return</span><span style="color:#A7C080;"> transformResponse</span><span style="color:#D3C6AA;">(data)</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">  ]</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>我们把之前对请求数据和响应数据的处理逻辑，放到了默认配置中，也就是默认处理逻辑。</p><h2 id="transform-逻辑重构" tabindex="-1">transform 逻辑重构 <a class="header-anchor" href="#transform-逻辑重构" aria-label="Permalink to &quot;transform 逻辑重构&quot;">​</a></h2><p>接下来，我们就要重构之前写的对请求数据和响应数据的处理逻辑了。由于我们可能会编写多个转换函数，我们先定义一个 <code>transform</code> 函数来处理这些转换函数的调用逻辑。</p><p><code>core/transform.ts</code></p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">import</span><span style="color:#D3C6AA;"> { AxiosTransformer } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;../types&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> default</span><span style="color:#E67E80;"> function</span><span style="color:#A7C080;"> transform</span><span style="color:#D3C6AA;">(</span></span>
<span class="line"><span style="color:#D3C6AA;">  data</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  headers</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  fns</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosTransformer</span><span style="color:#E69875;"> |</span><span style="color:#83C092;"> AxiosTransformer</span><span style="color:#D3C6AA;">[]</span></span>
<span class="line"><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  if</span><span style="color:#D3C6AA;"> (</span><span style="color:#E69875;">!</span><span style="color:#D3C6AA;">fns)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> data</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#E67E80;">  if</span><span style="color:#D3C6AA;"> (</span><span style="color:#E69875;">!</span><span style="color:#D3C6AA;">Array</span><span style="color:#859289;">.</span><span style="color:#A7C080;">isArray</span><span style="color:#D3C6AA;">(fns))</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    fns</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> [fns]</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">  fns</span><span style="color:#859289;">.</span><span style="color:#A7C080;">forEach</span><span style="color:#D3C6AA;">(fn</span><span style="color:#E69875;"> =&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    data</span><span style="color:#E69875;"> =</span><span style="color:#A7C080;"> fn</span><span style="color:#D3C6AA;">(data,</span><span style="color:#D3C6AA;"> headers)</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> data</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p><code>transform</code> 函数中接收 <code>data</code>、<code>headers</code>、<code>fns</code> 3 个参数，其中 <code>fns</code> 代表一个或者多个转换函数，内部逻辑很简单，遍历 <code>fns</code>，执行这些转换函数，并且把 <code>data</code> 和 <code>headers</code> 作为参数传入，每个转换函数返回的 <code>data</code> 会作为下一个转换函数的参数 <code>data</code> 传入。</p><p>接下来修改对请求数据和响应数据的处理逻辑。</p><p><code>dispatchRequest.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#D699B6;">import</span><span style="color:#D3C6AA;"> transform </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;./transform&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> processConfig</span><span style="color:#D3C6AA;">(config</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> void</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  config</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">url</span><span style="color:#E69875;"> =</span><span style="color:#A7C080;"> transformURL</span><span style="color:#D3C6AA;">(config)</span></span>
<span class="line"><span style="color:#D3C6AA;">  config</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">data</span><span style="color:#E69875;"> =</span><span style="color:#A7C080;"> transform</span><span style="color:#D3C6AA;">(config</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">data,</span><span style="color:#D3C6AA;"> config</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">headers,</span><span style="color:#D3C6AA;"> config</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">transformRequest)</span></span>
<span class="line"><span style="color:#D3C6AA;">  config</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">headers</span><span style="color:#E69875;"> =</span><span style="color:#A7C080;"> flattenHeaders</span><span style="color:#D3C6AA;">(config</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">headers,</span><span style="color:#D3C6AA;"> config</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">method</span><span style="color:#E69875;">!</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> transformResponseData</span><span style="color:#D3C6AA;">(res</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosResponse</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosResponse</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  res</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">data</span><span style="color:#E69875;"> =</span><span style="color:#A7C080;"> transform</span><span style="color:#D3C6AA;">(res</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">data,</span><span style="color:#D3C6AA;"> res</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">headers,</span><span style="color:#D3C6AA;"> res</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">config</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">transformResponse)</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> res</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>我们把对请求数据的处理和对响应数据的处理改成使用 <code>transform</code> 函数实现，并把配置中的 <code>transformRequest</code> 及 <code>transformResponse</code> 分别传入。</p><h2 id="demo-编写" tabindex="-1">demo 编写 <a class="header-anchor" href="#demo-编写" aria-label="Permalink to &quot;demo 编写&quot;">​</a></h2><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">axios</span><span style="color:#D3C6AA;">({</span></span>
<span class="line"><span style="color:#D3C6AA;">  transformRequest</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [(</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">(data)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> qs</span><span style="color:#859289;">.</span><span style="color:#A7C080;">stringify</span><span style="color:#D3C6AA;">(data)</span></span>
<span class="line"><span style="color:#D3C6AA;">  }), </span><span style="color:#E69875;">...</span><span style="color:#D3C6AA;">(axios</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">defaults</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">transformRequest </span><span style="color:#E67E80;">as</span><span style="color:#83C092;"> AxiosTransformer</span><span style="color:#D3C6AA;">[])],</span></span>
<span class="line"><span style="color:#D3C6AA;">  transformResponse</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span><span style="color:#E69875;">...</span><span style="color:#D3C6AA;">(axios</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">defaults</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">transformResponse </span><span style="color:#E67E80;">as</span><span style="color:#83C092;"> AxiosTransformer</span><span style="color:#D3C6AA;">[]), </span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">(data)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    if</span><span style="color:#D3C6AA;"> (</span><span style="color:#E67E80;">typeof</span><span style="color:#D3C6AA;"> data</span><span style="color:#E69875;"> ===</span><span style="color:#DBBC7F;"> &#39;object&#39;</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">      data</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">b</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> 2</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> data</span></span>
<span class="line"><span style="color:#D3C6AA;">  }],</span></span>
<span class="line"><span style="color:#D3C6AA;">  url</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;/config/post&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  method</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;post&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  data</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    a</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 1</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">((res) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(res</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">data)</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>我们对 <code>transformRequest</code> 做了修改，在执行它默认的 <code>transformRequest</code> 之前，我们先用 <code>qs.stringify</code> 库对传入的数据 <code>data</code> 做了一层转换。同时也对 <code>transformResponse</code> 做了修改，在执行完默认的 <code>transformResponse</code> 后，会给响应的 <code>data</code> 对象添加一个 <code>data.b = 2</code>。</p><p>因为之前我们实现了配置的合并，而且我们传入的 <code>transformRequest</code> 和 <code>transformResponse</code> 遵循默认合并策略，它们会覆盖默认的值。</p><p>至此，我们就实现了请求和响应的配置化。到目前为止，我们的 axios 都是一个单例，一旦我们修改了 axios 的默认配置，会影响所有的请求。官网提供了一个 <code>axios.create</code> 的工厂方法允许我们创建一个新的 <code>axios</code> 实例，同时允许我们传入新的配置和默认配置合并，并做为新的默认配置。下面一节课我们就来实现这个 feature。</p>`,30)]))}const C=n(e,[["render",o]]);export{d as __pageData,C as default};
