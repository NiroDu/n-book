import{_ as a,c as n,o as p,ag as l}from"./chunks/framework.D-6U7MZ9.js";const d=JSON.parse('{"title":"自定义合法状态码","description":"","frontmatter":{},"headers":[],"relativePath":"typescript/chapter10/validateStatus.md","filePath":"typescript/chapter10/validateStatus.md","lastUpdated":1562148797000}'),e={name:"typescript/chapter10/validateStatus.md"};function o(r,s,t,c,i,y){return p(),n("div",null,s[0]||(s[0]=[l(`<h1 id="自定义合法状态码" tabindex="-1">自定义合法状态码 <a class="header-anchor" href="#自定义合法状态码" aria-label="Permalink to &quot;自定义合法状态码&quot;">​</a></h1><h2 id="需求分析" tabindex="-1">需求分析 <a class="header-anchor" href="#需求分析" aria-label="Permalink to &quot;需求分析&quot;">​</a></h2><p>之前 <code>ts-axios</code> 在处理响应结果的时候，认为 HTTP <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/status" target="_blank" rel="noreferrer">status</a> 在 200 和 300 之间是一个合法值，在这个区间之外则创建一个错误。有些时候我们想自定义这个规则，比如认为 304 也是一个合法的状态码，所以我们希望 <code>ts-axios</code> 能提供一个配置，允许我们自定义合法状态码规则。如下：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">axios</span><span style="color:#859289;">.</span><span style="color:#A7C080;">get</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/more/304&#39;</span><span style="color:#D3C6AA;">, {</span></span>
<span class="line"><span style="color:#A7C080;">  validateStatus</span><span style="color:#D3C6AA;">(status) {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> status </span><span style="color:#E69875;">&gt;=</span><span style="color:#D699B6;"> 200</span><span style="color:#E69875;"> &amp;&amp;</span><span style="color:#D3C6AA;"> status </span><span style="color:#E69875;">&lt;</span><span style="color:#D699B6;"> 400</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(res </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(res)</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span><span style="color:#859289;">.</span><span style="color:#A7C080;">catch</span><span style="color:#D3C6AA;">((e</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosError</span><span style="color:#D3C6AA;">) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(e</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">message)</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>通过在请求配置中配置一个 <code>validateStatus</code> 函数，它可以根据参数 <code>status</code> 来自定义合法状态码的规则。</p><h2 id="代码实现" tabindex="-1">代码实现 <a class="header-anchor" href="#代码实现" aria-label="Permalink to &quot;代码实现&quot;">​</a></h2><p>首先修改一下类型定义。</p><p><code>types/index.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> interface</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#A7C080;">  validateStatus</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> (status</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">) </span><span style="color:#E69875;">=&gt;</span><span style="color:#7FBBB3;"> boolean</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>然后我们来修改默认配置规则。</p><p><code>defaults.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">validateStatus</span><span style="color:#D3C6AA;">(status: number): boolean {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> status </span><span style="color:#E69875;">&gt;=</span><span style="color:#D699B6;"> 200</span><span style="color:#E69875;"> &amp;&amp;</span><span style="color:#D3C6AA;"> status </span><span style="color:#E69875;">&lt;</span><span style="color:#D699B6;"> 300</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>添加默认合法状态码的校验规则。然后再请求后对响应数据的处理逻辑。</p><p><code>core/xhr.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  /*...*/</span></span>
<span class="line"><span style="color:#D3C6AA;">  validateStatus</span></span>
<span class="line"><span style="color:#D3C6AA;">} </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> config</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> handleResponse</span><span style="color:#D3C6AA;">(response</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosResponse</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> void</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  if</span><span style="color:#D3C6AA;"> (</span><span style="color:#E69875;">!</span><span style="color:#D3C6AA;">validateStatus</span><span style="color:#E69875;"> ||</span><span style="color:#A7C080;"> validateStatus</span><span style="color:#D3C6AA;">(response</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">status))</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">    resolve</span><span style="color:#D3C6AA;">(response)</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span><span style="color:#E67E80;"> else</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">    reject</span><span style="color:#D3C6AA;">(</span></span>
<span class="line"><span style="color:#A7C080;">      createError</span><span style="color:#D3C6AA;">(</span></span>
<span class="line"><span style="color:#DBBC7F;">        \`Request failed with status code </span><span style="color:#A7C080;">\${</span><span style="color:#D3C6AA;">response</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">status</span><span style="color:#A7C080;">}</span><span style="color:#DBBC7F;">\`</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">        config,</span></span>
<span class="line"><span style="color:#D699B6;">        null</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">        request,</span></span>
<span class="line"><span style="color:#D3C6AA;">        response</span></span>
<span class="line"><span style="color:#D3C6AA;">      )</span></span>
<span class="line"><span style="color:#D3C6AA;">    )</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>如果没有配置 <code>validateStatus</code> 以及 <code>validateStatus</code> 函数返回的值为 true 的时候，都认为是合法的，正常 <code>resolve(response)</code>，否则都创建一个错误。</p><h2 id="demo-编写" tabindex="-1">demo 编写 <a class="header-anchor" href="#demo-编写" aria-label="Permalink to &quot;demo 编写&quot;">​</a></h2><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">axios</span><span style="color:#859289;">.</span><span style="color:#A7C080;">get</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/more/304&#39;</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(res </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(res)</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span><span style="color:#859289;">.</span><span style="color:#A7C080;">catch</span><span style="color:#D3C6AA;">((e</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosError</span><span style="color:#D3C6AA;">) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(e</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">message)</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">axios</span><span style="color:#859289;">.</span><span style="color:#A7C080;">get</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/more/304&#39;</span><span style="color:#D3C6AA;">, {</span></span>
<span class="line"><span style="color:#A7C080;">  validateStatus</span><span style="color:#D3C6AA;">(status) {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> status </span><span style="color:#E69875;">&gt;=</span><span style="color:#D699B6;"> 200</span><span style="color:#E69875;"> &amp;&amp;</span><span style="color:#D3C6AA;"> status </span><span style="color:#E69875;">&lt;</span><span style="color:#D699B6;"> 400</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(res </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(res)</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span><span style="color:#859289;">.</span><span style="color:#A7C080;">catch</span><span style="color:#D3C6AA;">((e</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosError</span><span style="color:#D3C6AA;">) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(e</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">message)</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p><code>server.js</code> 中我们编写了这个路由接口</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">router</span><span style="color:#859289;">.</span><span style="color:#A7C080;">get</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/more/304&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">(req,</span><span style="color:#D3C6AA;"> res)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  res</span><span style="color:#859289;">.</span><span style="color:#A7C080;">status</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">304</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">  res</span><span style="color:#859289;">.</span><span style="color:#A7C080;">end</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>接口返回 304 状态码，对于默认的请求我们会输出一条错误信息。第二个请求中我们配置了自定义合法状态码规则，区间在 200 和 400 之间，这样就不会报错，而是可以正常输出响应对象。</p><p>至此 <code>ts-axios</code> 实现了自定义合法状态码功能，用户可以配置 <code>validateStatus</code> 自定义合法状态码规则。之前有同学会质疑 <code>ts-axios</code> 对于请求 <code>url</code> 参数的序列化处理规则，下一节课我们来实现自定义参数序列化规则功能。</p>`,22)]))}const C=a(e,[["render",o]]);export{d as __pageData,C as default};
