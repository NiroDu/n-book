import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.D-6U7MZ9.js";const b=JSON.parse('{"title":"TypeScript 进阶部分","description":"","frontmatter":{},"headers":[],"relativePath":"typescript/intermediate_usage.md","filePath":"typescript/intermediate_usage.md","lastUpdated":1559820936000}'),e={name:"typescript/intermediate_usage.md"};function o(r,s,c,t,y,i){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="typescript-进阶部分" tabindex="-1">TypeScript 进阶部分 <a class="header-anchor" href="#typescript-进阶部分" aria-label="Permalink to &quot;TypeScript 进阶部分&quot;">​</a></h1><h2 id="类型别名" tabindex="-1">类型别名 <a class="header-anchor" href="#类型别名" aria-label="Permalink to &quot;类型别名&quot;">​</a></h2><p>类型别名用来给一个类型起个新名字。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">type</span><span style="color:#83C092;"> Name</span><span style="color:#E69875;"> =</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#E69875;">type</span><span style="color:#83C092;"> NameResolver</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> () </span><span style="color:#E69875;">=&gt;</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#E69875;">type</span><span style="color:#83C092;"> NameOrResolver</span><span style="color:#E69875;"> =</span><span style="color:#83C092;"> Name</span><span style="color:#E69875;"> |</span><span style="color:#83C092;"> NameResolver</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> getName</span><span style="color:#D3C6AA;">(n</span><span style="color:#859289;">:</span><span style="color:#83C092;"> NameOrResolver</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Name</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    if</span><span style="color:#D3C6AA;"> (</span><span style="color:#E67E80;">typeof</span><span style="color:#D3C6AA;"> n</span><span style="color:#E69875;"> ===</span><span style="color:#DBBC7F;"> &#39;string&#39;</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">        return</span><span style="color:#D3C6AA;"> n;</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span><span style="color:#E67E80;"> else</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">        return</span><span style="color:#A7C080;"> n</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>上例中，我们使用 <code>type</code> 创建类型别名。</p><p>类型别名常用于联合类型。</p><h2 id="字符串字面量类型" tabindex="-1">字符串字面量类型 <a class="header-anchor" href="#字符串字面量类型" aria-label="Permalink to &quot;字符串字面量类型&quot;">​</a></h2><p><strong>注意，类型别名与字符串字面量类型都是使用 type 进行定义。</strong></p><p>字符串字面量类型用来约束取值只能是某几个字符串中的一个。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// 我们使用 type 定了一个字符串字面量类型 EventNames，它只能取三种字符串中的一种。</span></span>
<span class="line"><span style="color:#E69875;">type</span><span style="color:#83C092;"> EventNames</span><span style="color:#E69875;"> =</span><span style="color:#DBBC7F;"> &#39;click&#39;</span><span style="color:#E69875;"> |</span><span style="color:#DBBC7F;"> &#39;scroll&#39;</span><span style="color:#E69875;"> |</span><span style="color:#DBBC7F;"> &#39;mousemove&#39;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> handleEvent</span><span style="color:#D3C6AA;">(ele</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Element</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> event</span><span style="color:#859289;">:</span><span style="color:#83C092;"> EventNames</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // do something</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">handleEvent</span><span style="color:#D3C6AA;">(document</span><span style="color:#859289;">.</span><span style="color:#A7C080;">getElementById</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;hello&#39;</span><span style="color:#D3C6AA;">), </span><span style="color:#DBBC7F;">&#39;scroll&#39;</span><span style="color:#D3C6AA;">);  </span><span style="color:#859289;font-style:italic;">// 没问题</span></span>
<span class="line"><span style="color:#A7C080;">handleEvent</span><span style="color:#D3C6AA;">(document</span><span style="color:#859289;">.</span><span style="color:#A7C080;">getElementById</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;world&#39;</span><span style="color:#D3C6AA;">), </span><span style="color:#DBBC7F;">&#39;dbclick&#39;</span><span style="color:#D3C6AA;">); </span><span style="color:#859289;font-style:italic;">// 报错，event 不能为 &#39;dbclick&#39;</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// error TS2345: Argument of type &#39;&quot;dbclick&quot;&#39; is not assignable to parameter of type &#39;EventNames&#39;.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="元组" tabindex="-1">元组 <a class="header-anchor" href="#元组" aria-label="Permalink to &quot;元组&quot;">​</a></h2><p>数组合并了相同类型的对象，而<strong>元组（Tuple）合并了不同类型的对象</strong>。</p><p>定义一对值分别为 <code>string</code> 和 <code>number</code> 的元组：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> xiaoming</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span><span style="color:#7FBBB3;">string</span><span style="color:#D3C6AA;">, </span><span style="color:#7FBBB3;">number</span><span style="color:#D3C6AA;">] </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [</span><span style="color:#DBBC7F;">&#39;Xiao Ming&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#D699B6;">25</span><span style="color:#D3C6AA;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>当赋值或访问一个已知索引的元素时，会得到正确的类型：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> xiaoming</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span><span style="color:#7FBBB3;">string</span><span style="color:#D3C6AA;">, </span><span style="color:#7FBBB3;">number</span><span style="color:#D3C6AA;">];</span></span>
<span class="line"><span style="color:#D3C6AA;">xiaoming[</span><span style="color:#D699B6;">0</span><span style="color:#D3C6AA;">] </span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;"> &#39;Xiao Ming&#39;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">xiaoming[</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">] </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 25</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">xiaoming[</span><span style="color:#D699B6;">0</span><span style="color:#D3C6AA;">]</span><span style="color:#859289;">.</span><span style="color:#A7C080;">slice</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">xiaoming[</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">]</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toFixed</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">2</span><span style="color:#D3C6AA;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>当直接对元组类型的变量进行初始化或者赋值的时候，需要提供<strong>所有</strong>元组类型中指定的项。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span>let xiaoming: [string, number];</span></span>
<span class="line"><span>xiaoming = [&#39;Xiao Ming&#39;, 25];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>只赋值其中一项会报错：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> xiaoming</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span><span style="color:#7FBBB3;">string</span><span style="color:#D3C6AA;">, </span><span style="color:#7FBBB3;">number</span><span style="color:#D3C6AA;">] </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [</span><span style="color:#DBBC7F;">&#39;Xiao Ming&#39;</span><span style="color:#D3C6AA;">];</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// error TS2322: Type &#39;[string]&#39; is not assignable to type &#39;[string, number]&#39;.</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// Property &#39;1&#39; is missing in type &#39;[string]&#39;.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> xiaoming</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span><span style="color:#7FBBB3;">string</span><span style="color:#D3C6AA;">, </span><span style="color:#7FBBB3;">number</span><span style="color:#D3C6AA;">];</span></span>
<span class="line"><span style="color:#D3C6AA;">xiaoming </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [</span><span style="color:#DBBC7F;">&#39;Xiao Ming&#39;</span><span style="color:#D3C6AA;">];</span></span>
<span class="line"><span style="color:#D3C6AA;">xiaoming[</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">] </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 25</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// error TS2322: Type &#39;[string]&#39; is not assignable to type &#39;[string, number]&#39;.</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// Property &#39;1&#39; is missing in type &#39;[string]&#39;.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>若想只赋值其中一项，可以这么做：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> xiaoming</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span><span style="color:#7FBBB3;">string</span><span style="color:#D3C6AA;">, </span><span style="color:#7FBBB3;">number</span><span style="color:#D3C6AA;">];</span></span>
<span class="line"><span style="color:#D3C6AA;">xiaoming[</span><span style="color:#D699B6;">0</span><span style="color:#D3C6AA;">] </span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;"> &#39;Xiao Ming&#39;</span><span style="color:#D3C6AA;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="类" tabindex="-1">类 <a class="header-anchor" href="#类" aria-label="Permalink to &quot;类&quot;">​</a></h2><p>TypeScript 除了实现了所有 ES6 中的类的功能以外，还添加了一些新的用法。</p><h3 id="es7-中类的用法" tabindex="-1">ES7 中类的用法 <a class="header-anchor" href="#es7-中类的用法" aria-label="Permalink to &quot;ES7 中类的用法&quot;">​</a></h3><p>ES7 中有一些关于类的提案，TypeScript 也实现了它们，这里做一个简单的介绍。</p><h4 id="实例属性" tabindex="-1">实例属性 <a class="header-anchor" href="#实例属性" aria-label="Permalink to &quot;实例属性&quot;">​</a></h4><p>ES6 中实例的属性只能通过构造函数中的 <code>this.xxx</code> 来定义，ES7 提案中可以直接在类里面定义：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">class</span><span style="color:#83C092;"> Animal</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    name </span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;"> &#39;Jack&#39;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#E69875;">    constructor</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">        // ...</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> a </span><span style="color:#E69875;">=</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> Animal</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(a</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">name); </span><span style="color:#859289;font-style:italic;">// Jack</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="静态属性" tabindex="-1">静态属性 <a class="header-anchor" href="#静态属性" aria-label="Permalink to &quot;静态属性&quot;">​</a></h4><p>ES7 提案中，可以使用 static 定义一个静态属性：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">class</span><span style="color:#83C092;"> Animal</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">    static</span><span style="color:#D3C6AA;"> num </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 42</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#E69875;">    constructor</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">        // ...</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(Animal</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">num); </span><span style="color:#859289;font-style:italic;">// 42</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="typescript中类的用法" tabindex="-1">TypeScript中类的用法 <a class="header-anchor" href="#typescript中类的用法" aria-label="Permalink to &quot;TypeScript中类的用法&quot;">​</a></h3><h4 id="public-private-和-protected" tabindex="-1">public private 和 protected <a class="header-anchor" href="#public-private-和-protected" aria-label="Permalink to &quot;public private 和 protected&quot;">​</a></h4><p>TypeScript 可以使用三种访问修饰符（Access Modifiers），分别是 <code>public</code>、<code>private</code> 和 <code>protected</code>。</p><ul><li><code>public</code> 修饰的属性或方法是公有的，可以在任何地方被访问到，默认所有的属性和方法都是 <code>public</code> 的</li><li><code>private</code> 修饰的属性或方法是私有的，不能在声明它的类的外部访问</li><li><code>protected</code> 修饰的属性或方法是受保护的，它和 <code>private</code> 类似，<strong>区别是它在子类中也是允许被访问的</strong></li></ul><p>使用 private 修饰的属性或方法，在子类中也是不允许访问的：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">class</span><span style="color:#83C092;"> Animal</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">    private</span><span style="color:#D3C6AA;"> name;</span></span>
<span class="line"><span style="color:#E69875;">    public</span><span style="color:#E69875;"> constructor</span><span style="color:#D3C6AA;">(name) {</span></span>
<span class="line"><span style="color:#D699B6;">        this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">name </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> name;</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#E67E80;">class</span><span style="color:#83C092;"> Cat</span><span style="color:#E69875;"> extends</span><span style="color:#83C092;"> Animal</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">    constructor</span><span style="color:#D3C6AA;">(name) {</span></span>
<span class="line"><span style="color:#D699B6;">        super</span><span style="color:#D3C6AA;">(name);</span></span>
<span class="line"><span style="color:#D3C6AA;">        console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">name);</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// error TS2341: Property &#39;name&#39; is private and only accessible within class &#39;Animal&#39;.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>而如果是用 protected 修饰，则允许在子类中访问：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">class</span><span style="color:#83C092;"> Animal</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">    protected</span><span style="color:#D3C6AA;"> name;</span></span>
<span class="line"><span style="color:#E69875;">    public</span><span style="color:#E69875;"> constructor</span><span style="color:#D3C6AA;">(name) {</span></span>
<span class="line"><span style="color:#D699B6;">        this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">name </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> name;</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#E67E80;">class</span><span style="color:#83C092;"> Cat</span><span style="color:#E69875;"> extends</span><span style="color:#83C092;"> Animal</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">    constructor</span><span style="color:#D3C6AA;">(name) {</span></span>
<span class="line"><span style="color:#D699B6;">        super</span><span style="color:#D3C6AA;">(name);</span></span>
<span class="line"><span style="color:#D3C6AA;">        console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">name);</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="抽象类" tabindex="-1">抽象类 <a class="header-anchor" href="#抽象类" aria-label="Permalink to &quot;抽象类&quot;">​</a></h3><p><code>abstract</code> 用于定义抽象类和其中的抽象方法。 抽象类是供其他类继承的基类，抽象类不允许被实例化：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">abstract</span><span style="color:#E67E80;"> class</span><span style="color:#83C092;"> Animal</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">    public</span><span style="color:#D3C6AA;"> name;</span></span>
<span class="line"><span style="color:#E69875;">    public</span><span style="color:#E69875;"> constructor</span><span style="color:#D3C6AA;">(name) {</span></span>
<span class="line"><span style="color:#D699B6;">        this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">name </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> name;</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#E69875;">    public</span><span style="color:#E69875;"> abstract</span><span style="color:#A7C080;"> sayHi</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> a </span><span style="color:#E69875;">=</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> Animal</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;Jack&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// index.ts(9,11): error TS2511: Cannot create an instance of the abstract class &#39;Animal&#39;.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>以及，抽象类中的抽象方法必须在子类中被实现。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">abstract</span><span style="color:#E67E80;"> class</span><span style="color:#83C092;"> Animal</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">    public</span><span style="color:#D3C6AA;"> name;</span></span>
<span class="line"><span style="color:#E69875;">    public</span><span style="color:#E69875;"> constructor</span><span style="color:#D3C6AA;">(name) {</span></span>
<span class="line"><span style="color:#D699B6;">        this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">name </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> name;</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#E69875;">    public</span><span style="color:#E69875;"> abstract</span><span style="color:#A7C080;"> sayHi</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#E67E80;">class</span><span style="color:#83C092;"> Cat</span><span style="color:#E69875;"> extends</span><span style="color:#83C092;"> Animal</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 这里必须要实现父类中的抽象类中的 abstract 方法</span></span>
<span class="line"><span style="color:#E69875;">    public</span><span style="color:#A7C080;"> sayHi</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#D3C6AA;">        console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">\`Meow, My name is </span><span style="color:#A7C080;">\${</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">name</span><span style="color:#A7C080;">}</span><span style="color:#DBBC7F;">\`</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> cat </span><span style="color:#E69875;">=</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> Cat</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;Tom&#39;</span><span style="color:#D3C6AA;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="类的类型" tabindex="-1">类的类型 <a class="header-anchor" href="#类的类型" aria-label="Permalink to &quot;类的类型&quot;">​</a></h3><p>给类加上 TypeScript 的类型很简单，与接口类似：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">class</span><span style="color:#83C092;"> Animal</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    name</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#E69875;">    constructor</span><span style="color:#D3C6AA;">(name</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">) {</span></span>
<span class="line"><span style="color:#D699B6;">        this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">name </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> name;</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#A7C080;">    sayHi</span><span style="color:#D3C6AA;">()</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">      return</span><span style="color:#DBBC7F;"> \`My name is </span><span style="color:#A7C080;">\${</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">name</span><span style="color:#A7C080;">}</span><span style="color:#DBBC7F;">\`</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> a</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Animal</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> Animal</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;Jack&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(a</span><span style="color:#859289;">.</span><span style="color:#A7C080;">sayHi</span><span style="color:#D3C6AA;">()); </span><span style="color:#859289;font-style:italic;">// My name is Jack</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="类与接口" tabindex="-1">类与接口 <a class="header-anchor" href="#类与接口" aria-label="Permalink to &quot;类与接口&quot;">​</a></h2><p>之前学习过，接口（Interfaces）可以用于对「对象的形状（Shape）」进行描述。 现在介绍接口的另一个用途，对类的一部分行为进行抽象。</p><h3 id="类实现接口" tabindex="-1">类实现接口 <a class="header-anchor" href="#类实现接口" aria-label="Permalink to &quot;类实现接口&quot;">​</a></h3><p>实现（implements）是面向对象中的一个重要概念。 一般来讲，一个类只能继承自另一个类，有时候不同类之间可以有一些共有的特性，这时候就可以把特性提取成接口（interfaces），用 <code>implements</code> 关键字来实现。</p><p>举例来说，门是一个类，防盗门是门的子类。如果防盗门有一个报警器的功能，我们可以简单的给防盗门添加一个报警方法。这时候如果有另一个类，车，也有报警器的功能，就可以考虑把报警器提取出来，作为一个接口，防盗门和车都去实现它：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">interface</span><span style="color:#83C092;"> Alarm</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">    alert</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#E67E80;">class</span><span style="color:#83C092;"> Door</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#E67E80;">class</span><span style="color:#83C092;"> SecurityDoor</span><span style="color:#E69875;"> extends</span><span style="color:#83C092;"> Door</span><span style="color:#E69875;"> implements</span><span style="color:#83C092;"> Alarm</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">    alert</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#D3C6AA;">        console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;SecurityDoor alert&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#E67E80;">class</span><span style="color:#83C092;"> Car</span><span style="color:#E69875;"> implements</span><span style="color:#83C092;"> Alarm</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">    alert</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#D3C6AA;">        console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;Car alert&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>一个类可以实现多个接口：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// Car 实现了 Alarm 和 Light 接口，既能报警，也能开关车灯。</span></span>
<span class="line"><span style="color:#E67E80;">interface</span><span style="color:#83C092;"> Alarm</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">    alert</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#E67E80;">interface</span><span style="color:#83C092;"> Light</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">    lightOn</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#A7C080;">    lightOff</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#E67E80;">class</span><span style="color:#83C092;"> Car</span><span style="color:#E69875;"> implements</span><span style="color:#83C092;"> Alarm</span><span style="color:#D3C6AA;">, </span><span style="color:#83C092;">Light</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">    alert</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#D3C6AA;">        console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;Car alert&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#A7C080;">    lightOn</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#D3C6AA;">        console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;Car light on&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#A7C080;">    lightOff</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#D3C6AA;">        console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;Car light off&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="接口继承类" tabindex="-1">接口继承类 <a class="header-anchor" href="#接口继承类" aria-label="Permalink to &quot;接口继承类&quot;">​</a></h3><p>接口也可以继承类：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">class</span><span style="color:#83C092;"> Point</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    x</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">    y</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">interface</span><span style="color:#83C092;"> Point3d</span><span style="color:#E69875;"> extends</span><span style="color:#83C092;"> Point</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    z</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> point3d</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Point3d</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> {x</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 1</span><span style="color:#D3C6AA;">, y</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 2</span><span style="color:#D3C6AA;">, z</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 3</span><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="接口继承接口" tabindex="-1">接口继承接口 <a class="header-anchor" href="#接口继承接口" aria-label="Permalink to &quot;接口继承接口&quot;">​</a></h3><p>接口与接口之间可以是继承关系：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// 使用 extends 使 LightableAlarm 继承 Alarm。</span></span>
<span class="line"><span style="color:#E67E80;">interface</span><span style="color:#83C092;"> Alarm</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">    alert</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">interface</span><span style="color:#83C092;"> LightableAlarm</span><span style="color:#E69875;"> extends</span><span style="color:#83C092;"> Alarm</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">    lightOn</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#A7C080;">    lightOff</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="混合类型" tabindex="-1">混合类型 <a class="header-anchor" href="#混合类型" aria-label="Permalink to &quot;混合类型&quot;">​</a></h3><p>之前学习过，可以使用接口的方式来定义一个函数需要符合的形状：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">interface</span><span style="color:#83C092;"> SearchFunc</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    (source</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">, subString</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> boolean</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> mySearch</span><span style="color:#859289;">:</span><span style="color:#83C092;"> SearchFunc</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#A7C080;">mySearch</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">(source</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> subString</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> source</span><span style="color:#859289;">.</span><span style="color:#A7C080;">search</span><span style="color:#D3C6AA;">(subString)</span><span style="color:#E69875;"> !==</span><span style="color:#E69875;"> -</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>有时候，一个函数还可以有自己的属性和方法：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">interface</span><span style="color:#83C092;"> Counter</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    (start</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">    interval</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#A7C080;">    reset</span><span style="color:#D3C6AA;">()</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> void</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> getCounter</span><span style="color:#D3C6AA;">()</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Counter</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">	  // 类型断言&lt;Counter&gt;</span></span>
<span class="line"><span style="color:#E69875;">    let</span><span style="color:#D3C6AA;"> counter</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> &lt;</span><span style="color:#83C092;">Counter</span><span style="color:#D3C6AA;">&gt;</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;"> (start</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span><span style="color:#D3C6AA;"> };</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">	  // 自己的属性和方法</span></span>
<span class="line"><span style="color:#D3C6AA;">    counter</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">interval</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> 123</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">    counter</span><span style="color:#859289;">.</span><span style="color:#A7C080;">reset </span><span style="color:#E69875;">=</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;"> ()</span><span style="color:#D3C6AA;"> {</span><span style="color:#D3C6AA;"> };</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> counter;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> c </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> getCounter</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#A7C080;">c</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">10</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">c</span><span style="color:#859289;">.</span><span style="color:#A7C080;">reset</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#D3C6AA;">c</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">interval </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 5</span><span style="color:#D3C6AA;">.</span><span style="color:#D699B6;">0</span><span style="color:#D3C6AA;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="泛型" tabindex="-1">泛型 <a class="header-anchor" href="#泛型" aria-label="Permalink to &quot;泛型&quot;">​</a></h2><p>泛型（Generics）是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。</p><h3 id="为什么要有泛型" tabindex="-1">为什么要有泛型 <a class="header-anchor" href="#为什么要有泛型" aria-label="Permalink to &quot;为什么要有泛型&quot;">​</a></h3><p>首先，我们来实现一个函数 createArray，它可以创建一个指定长度的数组，同时将每一项都填充一个默认值：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> createArray</span><span style="color:#D3C6AA;">(length</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> value</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Array</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#7FBBB3;">any</span><span style="color:#D3C6AA;">&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">    let</span><span style="color:#D3C6AA;"> result</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> [];</span></span>
<span class="line"><span style="color:#E67E80;">    for</span><span style="color:#D3C6AA;"> (</span><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> i</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> 0</span><span style="color:#D3C6AA;">;</span><span style="color:#D3C6AA;"> i</span><span style="color:#E69875;"> &lt;</span><span style="color:#D3C6AA;"> length;</span><span style="color:#D3C6AA;"> i</span><span style="color:#E69875;">++</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">        result[i]</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> value;</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> result;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#A7C080;">createArray</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">3</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;x&#39;</span><span style="color:#D3C6AA;">); </span><span style="color:#859289;font-style:italic;">// [&#39;x&#39;, &#39;x&#39;, &#39;x&#39;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>这段代码编译不会报错，但是一个显而易见的缺陷是，它并没有准确的定义返回值的类型：<code>Array&lt;any&gt;</code> 允许数组的每一项都为任意类型。但是我们预期的是，数组中每一项都应该是输入的 value 的类型。</p><p>这时候，泛型就派上用场了：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// 在函数名后添加了 &lt;T&gt;，其中 T 用来指代任意输入的类型，在后面的输入 value: T 和输出 Array&lt;T&gt; 中即可使用</span></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> createArray</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#D3C6AA;">&gt;(length</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> value</span><span style="color:#859289;">:</span><span style="color:#83C092;"> T</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Array</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#D3C6AA;">&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">    let</span><span style="color:#D3C6AA;"> result</span><span style="color:#859289;">:</span><span style="color:#83C092;"> T</span><span style="color:#D3C6AA;">[]</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> [];</span></span>
<span class="line"><span style="color:#E67E80;">    for</span><span style="color:#D3C6AA;"> (</span><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> i</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> 0</span><span style="color:#D3C6AA;">;</span><span style="color:#D3C6AA;"> i</span><span style="color:#E69875;"> &lt;</span><span style="color:#D3C6AA;"> length;</span><span style="color:#D3C6AA;"> i</span><span style="color:#E69875;">++</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">        result[i]</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> value;</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> result;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 接着在调用的时候，可以指定它具体的类型为 \`string\`。</span></span>
<span class="line"><span style="color:#A7C080;">createArray</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#7FBBB3;">string</span><span style="color:#D3C6AA;">&gt;(</span><span style="color:#D699B6;">3</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;x&#39;</span><span style="color:#D3C6AA;">); </span><span style="color:#859289;font-style:italic;">// [&#39;x&#39;, &#39;x&#39;, &#39;x&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 当然，也可以不手动指定，而让类型推论自动推算出来：</span></span>
<span class="line"><span style="color:#A7C080;">createArray</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">3</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;x&#39;</span><span style="color:#D3C6AA;">); </span><span style="color:#859289;font-style:italic;">// [&#39;x&#39;, &#39;x&#39;, &#39;x&#39;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="多个类型参数" tabindex="-1">多个类型参数 <a class="header-anchor" href="#多个类型参数" aria-label="Permalink to &quot;多个类型参数&quot;">​</a></h3><p>定义泛型的时候，可以一次定义多个类型参数：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> swap</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#D3C6AA;">,</span><span style="color:#83C092;"> U</span><span style="color:#D3C6AA;">&gt;(tuple</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span><span style="color:#83C092;">T</span><span style="color:#D3C6AA;">,</span><span style="color:#83C092;"> U</span><span style="color:#D3C6AA;">])</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span><span style="color:#83C092;">U</span><span style="color:#D3C6AA;">,</span><span style="color:#83C092;"> T</span><span style="color:#D3C6AA;">]</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> [tuple[</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">],</span><span style="color:#D3C6AA;"> tuple[</span><span style="color:#D699B6;">0</span><span style="color:#D3C6AA;">]];</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">swap</span><span style="color:#D3C6AA;">([</span><span style="color:#D699B6;">7</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;seven&#39;</span><span style="color:#D3C6AA;">]); </span><span style="color:#859289;font-style:italic;">// [&#39;seven&#39;, 7]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上例中，我们定义了一个 <code>swap</code> 函数，用来交换输入的元组。</p><h3 id="泛型约束" tabindex="-1">泛型约束 <a class="header-anchor" href="#泛型约束" aria-label="Permalink to &quot;泛型约束&quot;">​</a></h3><p>在函数内部使用泛型变量的时候，由于事先不知道它是哪种类型，所以不能随意的操作它的属性或方法：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// 泛型 T 不一定包含属性 length，所以编译的时候报错了。</span></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> loggingIdentity</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#D3C6AA;">&gt;(arg</span><span style="color:#859289;">:</span><span style="color:#83C092;"> T</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> T</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(arg</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">length);</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> arg;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// index.ts(2,19): error TS2339: Property &#39;length&#39; does not exist on type &#39;T&#39;.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>这时，我们可以对泛型进行约束，只允许这个函数传入那些包含 <code>length</code> 属性的变量。这就是<strong>泛型约束</strong>：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">interface</span><span style="color:#83C092;"> Lengthwise</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    length</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 使用了 extends 约束了泛型 T 必须符合接口 Lengthwise 的形状，也就是必须包含 length 属性。</span></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> loggingIdentity</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#E69875;"> extends</span><span style="color:#83C092;"> Lengthwise</span><span style="color:#D3C6AA;">&gt;(arg</span><span style="color:#859289;">:</span><span style="color:#83C092;"> T</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> T</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(arg</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">length);</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> arg;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>多个类型参数之间也可以互相约束：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// 我们使用了两个类型参数，其中要求 T 继承 U，这样就保证了 U 上不会出现 T 中不存在的字段。</span></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> copyFields</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#E69875;"> extends</span><span style="color:#83C092;"> U</span><span style="color:#D3C6AA;">,</span><span style="color:#83C092;"> U</span><span style="color:#D3C6AA;">&gt;(target</span><span style="color:#859289;">:</span><span style="color:#83C092;"> T</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> source</span><span style="color:#859289;">:</span><span style="color:#83C092;"> U</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> T</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    for</span><span style="color:#D3C6AA;"> (</span><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> id</span><span style="color:#E67E80;"> in</span><span style="color:#D3C6AA;"> source)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">        target[id]</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> (&lt;</span><span style="color:#83C092;">T</span><span style="color:#D3C6AA;">&gt;source)[id];</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> target;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> x </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> { a</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 1</span><span style="color:#D3C6AA;">, b</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 2</span><span style="color:#D3C6AA;">, c</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 3</span><span style="color:#D3C6AA;">, d</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 4</span><span style="color:#D3C6AA;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">copyFields</span><span style="color:#D3C6AA;">(x, { b</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 10</span><span style="color:#D3C6AA;">, d</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 20</span><span style="color:#D3C6AA;"> });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="泛型接口" tabindex="-1">泛型接口 <a class="header-anchor" href="#泛型接口" aria-label="Permalink to &quot;泛型接口&quot;">​</a></h3><p>之前学习过，可以使用接口的方式来定义一个函数需要符合的形状：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">interface</span><span style="color:#83C092;"> SearchFunc</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  (source</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">, subString</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> boolean</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> mySearch</span><span style="color:#859289;">:</span><span style="color:#83C092;"> SearchFunc</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#A7C080;">mySearch</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">(source</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> subString</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> source</span><span style="color:#859289;">.</span><span style="color:#A7C080;">search</span><span style="color:#D3C6AA;">(subString)</span><span style="color:#E69875;"> !==</span><span style="color:#E69875;"> -</span><span style="color:#D699B6;">1</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>也可以使用含有泛型的接口来定义函数的形状：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">interface</span><span style="color:#83C092;"> CreateArrayFunc</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    &lt;</span><span style="color:#83C092;">T</span><span style="color:#D3C6AA;">&gt;(length</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">, value</span><span style="color:#859289;">:</span><span style="color:#83C092;"> T</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Array</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#D3C6AA;">&gt;;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> createArray</span><span style="color:#859289;">:</span><span style="color:#83C092;"> CreateArrayFunc</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#A7C080;">createArray</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#D3C6AA;">&gt;(length</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> value</span><span style="color:#859289;">:</span><span style="color:#83C092;"> T</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Array</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#D3C6AA;">&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">    let</span><span style="color:#D3C6AA;"> result</span><span style="color:#859289;">:</span><span style="color:#83C092;"> T</span><span style="color:#D3C6AA;">[]</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> [];</span></span>
<span class="line"><span style="color:#E67E80;">    for</span><span style="color:#D3C6AA;"> (</span><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> i</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> 0</span><span style="color:#D3C6AA;">;</span><span style="color:#D3C6AA;"> i</span><span style="color:#E69875;"> &lt;</span><span style="color:#D3C6AA;"> length;</span><span style="color:#D3C6AA;"> i</span><span style="color:#E69875;">++</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">        result[i]</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> value;</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> result;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">createArray</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">3</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;x&#39;</span><span style="color:#D3C6AA;">); </span><span style="color:#859289;font-style:italic;">// [&#39;x&#39;, &#39;x&#39;, &#39;x&#39;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>进一步，我们可以把泛型参数提前到接口名上：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">interface</span><span style="color:#83C092;"> CreateArrayFunc</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#D3C6AA;">&gt; {</span></span>
<span class="line"><span style="color:#D3C6AA;">    (length</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">, value</span><span style="color:#859289;">:</span><span style="color:#83C092;"> T</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Array</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#D3C6AA;">&gt;;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> createArray</span><span style="color:#859289;">:</span><span style="color:#83C092;"> CreateArrayFunc</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#7FBBB3;">any</span><span style="color:#D3C6AA;">&gt;;</span></span>
<span class="line"><span style="color:#A7C080;">createArray</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#D3C6AA;">&gt;(length</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> value</span><span style="color:#859289;">:</span><span style="color:#83C092;"> T</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Array</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#D3C6AA;">&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">    let</span><span style="color:#D3C6AA;"> result</span><span style="color:#859289;">:</span><span style="color:#83C092;"> T</span><span style="color:#D3C6AA;">[]</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> [];</span></span>
<span class="line"><span style="color:#E67E80;">    for</span><span style="color:#D3C6AA;"> (</span><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> i</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> 0</span><span style="color:#D3C6AA;">;</span><span style="color:#D3C6AA;"> i</span><span style="color:#E69875;"> &lt;</span><span style="color:#D3C6AA;"> length;</span><span style="color:#D3C6AA;"> i</span><span style="color:#E69875;">++</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">        result[i]</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> value;</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> result;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">createArray</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">3</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&#39;x&#39;</span><span style="color:#D3C6AA;">); </span><span style="color:#859289;font-style:italic;">// [&#39;x&#39;, &#39;x&#39;, &#39;x&#39;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>注意，此时在使用泛型接口的时候，需要定义泛型的类型。</p><h3 id="泛型类" tabindex="-1">泛型类 <a class="header-anchor" href="#泛型类" aria-label="Permalink to &quot;泛型类&quot;">​</a></h3><p>与泛型接口类似，泛型也可以用于类的类型定义中：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">class</span><span style="color:#83C092;"> GenericNumber</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#D3C6AA;">&gt; {</span></span>
<span class="line"><span style="color:#D3C6AA;">    zeroValue</span><span style="color:#859289;">:</span><span style="color:#83C092;"> T</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#A7C080;">    add</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> (x</span><span style="color:#859289;">:</span><span style="color:#83C092;"> T</span><span style="color:#D3C6AA;">, y</span><span style="color:#859289;">:</span><span style="color:#83C092;"> T</span><span style="color:#D3C6AA;">) </span><span style="color:#E69875;">=&gt;</span><span style="color:#83C092;"> T</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> myGenericNumber </span><span style="color:#E69875;">=</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> GenericNumber</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#7FBBB3;">number</span><span style="color:#D3C6AA;">&gt;();</span></span>
<span class="line"><span style="color:#D3C6AA;">myGenericNumber</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">zeroValue </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 0</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">myGenericNumber</span><span style="color:#859289;">.</span><span style="color:#A7C080;">add</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">(x,</span><span style="color:#D3C6AA;"> y)</span><span style="color:#D3C6AA;"> {</span><span style="color:#E67E80;"> return</span><span style="color:#D3C6AA;"> x</span><span style="color:#E69875;"> +</span><span style="color:#D3C6AA;"> y;</span><span style="color:#D3C6AA;"> };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="泛型参数的默认类型" tabindex="-1">泛型参数的默认类型 <a class="header-anchor" href="#泛型参数的默认类型" aria-label="Permalink to &quot;泛型参数的默认类型&quot;">​</a></h3><p>我们可以为泛型中的类型参数指定默认类型。当使用泛型时没有在代码中直接指定类型参数，从实际值参数中也无法推测出时，这个默认类型就会起作用。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> createArray</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#E69875;"> =</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">&gt;(length</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> value</span><span style="color:#859289;">:</span><span style="color:#83C092;"> T</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Array</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">T</span><span style="color:#D3C6AA;">&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">    let</span><span style="color:#D3C6AA;"> result</span><span style="color:#859289;">:</span><span style="color:#83C092;"> T</span><span style="color:#D3C6AA;">[]</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> [];</span></span>
<span class="line"><span style="color:#E67E80;">    for</span><span style="color:#D3C6AA;"> (</span><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> i</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> 0</span><span style="color:#D3C6AA;">;</span><span style="color:#D3C6AA;"> i</span><span style="color:#E69875;"> &lt;</span><span style="color:#D3C6AA;"> length;</span><span style="color:#D3C6AA;"> i</span><span style="color:#E69875;">++</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">        result[i]</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> value;</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> result;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="声明合并" tabindex="-1">声明合并 <a class="header-anchor" href="#声明合并" aria-label="Permalink to &quot;声明合并&quot;">​</a></h2><p>如果定义了两个相同名字的函数、接口或类，那么它们会合并成一个类型。</p><h3 id="函数的合并" tabindex="-1">函数的合并 <a class="header-anchor" href="#函数的合并" aria-label="Permalink to &quot;函数的合并&quot;">​</a></h3><p>之前学习过，我们可以使用<strong>重载</strong>定义多个函数类型：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> reverse</span><span style="color:#D3C6AA;">(x</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> reverse</span><span style="color:#D3C6AA;">(x</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> reverse</span><span style="color:#D3C6AA;">(x</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#E69875;"> |</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#E69875;"> |</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    if</span><span style="color:#D3C6AA;"> (</span><span style="color:#E67E80;">typeof</span><span style="color:#D3C6AA;"> x</span><span style="color:#E69875;"> ===</span><span style="color:#DBBC7F;"> &#39;number&#39;</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">        return</span><span style="color:#A7C080;"> Number</span><span style="color:#D3C6AA;">(x</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toString</span><span style="color:#D3C6AA;">()</span><span style="color:#859289;">.</span><span style="color:#A7C080;">split</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;&#39;</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">reverse</span><span style="color:#D3C6AA;">()</span><span style="color:#859289;">.</span><span style="color:#A7C080;">join</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;&#39;</span><span style="color:#D3C6AA;">));</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span><span style="color:#E67E80;"> else</span><span style="color:#E67E80;"> if</span><span style="color:#D3C6AA;"> (</span><span style="color:#E67E80;">typeof</span><span style="color:#D3C6AA;"> x</span><span style="color:#E69875;"> ===</span><span style="color:#DBBC7F;"> &#39;string&#39;</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">        return</span><span style="color:#D3C6AA;"> x</span><span style="color:#859289;">.</span><span style="color:#A7C080;">split</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;&#39;</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">reverse</span><span style="color:#D3C6AA;">()</span><span style="color:#859289;">.</span><span style="color:#A7C080;">join</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="接口的合并" tabindex="-1">接口的合并 <a class="header-anchor" href="#接口的合并" aria-label="Permalink to &quot;接口的合并&quot;">​</a></h3><p>接口中的属性在合并时会简单的合并到一个接口中：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">interface</span><span style="color:#83C092;"> Alarm</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    price</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#E67E80;">interface</span><span style="color:#83C092;"> Alarm</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    weight</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 相当于：</span></span>
<span class="line"><span style="color:#E67E80;">interface</span><span style="color:#83C092;"> Alarm</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    price</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">    weight</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>注意，<strong>合并的属性的类型必须是唯一的：</strong></p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">interface</span><span style="color:#83C092;"> Alarm</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    price</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#E67E80;">interface</span><span style="color:#83C092;"> Alarm</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    price</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">;  </span><span style="color:#859289;font-style:italic;">// 类型不一致，会报错</span></span>
<span class="line"><span style="color:#D3C6AA;">    weight</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// index.ts(5,3): error TS2403: Subsequent variable declarations must have the same type.  Variable &#39;price&#39; must be of type &#39;number&#39;, but here has type &#39;string&#39;.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>接口中方法的合并，与函数的合并一样：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">interface</span><span style="color:#83C092;"> Alarm</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    price</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#A7C080;">    alert</span><span style="color:#D3C6AA;">(s</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#E67E80;">interface</span><span style="color:#83C092;"> Alarm</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    weight</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#A7C080;">    alert</span><span style="color:#D3C6AA;">(s</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">, n</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 相当于：</span></span>
<span class="line"><span style="color:#E67E80;">interface</span><span style="color:#83C092;"> Alarm</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    price</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">    weight</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#A7C080;">    alert</span><span style="color:#D3C6AA;">(s</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#A7C080;">    alert</span><span style="color:#D3C6AA;">(s</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">, n</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="类的合并" tabindex="-1">类的合并 <a class="header-anchor" href="#类的合并" aria-label="Permalink to &quot;类的合并&quot;">​</a></h3><p>类的合并与接口的合并规则一致。</p>`,114)]))}const C=n(e,[["render",o]]);export{b as __pageData,C as default};
