import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.D-6U7MZ9.js";const e="/n-book/assets/csr_ssr.CcMr4JbX.png",o="/n-book/assets/flow_1.8OO8i1Dj.png",r="/n-book/assets/flow_2.BV05JLuJ.png",t="/n-book/assets/warning_1.DOx3IC4b.png",c="/n-book/assets/error_1.BWiR--7k.png",i="/n-book/assets/flow_3.BKChPSyP.png",y="/n-book/assets/source_1.Cmwxos6H.png",A="/n-book/assets/source_2.CcK63bsn.png",b="/n-book/assets/network_1.C6PMripJ.png",C="/n-book/assets/flow_4.n4LP-9-s.png",u="/n-book/assets/console_1.BB3tng1-.png",m="/n-book/assets/console_2.0SDRo7G3.png",d="/n-book/assets/source_3.CcjMOybs.png",D="/n-book/assets/source_4.Cxvs6WqX.png",g="/n-book/assets/code_1.DpNZYjdH.png",h="/n-book/assets/node_1.CwJ7LI5d.png",B="/n-book/assets/network_2.UdGCjh8b.png",E="/n-book/assets/code_2.BlR3mhbM.png",v="/n-book/assets/intro_1.CjROst6d.png",x="/n-book/assets/code_3.B1f5rjde.png",f="/n-book/assets/code_4.nbJzpo9x.png",q="/n-book/assets/console_3.CQZ2hH82.png",F="/n-book/assets/code_5.CbUJV1kD.png",k="/n-book/assets/code_6.CiCDoxCF.png",j="/n-book/assets/console_4.B-VsLEsI.png",w="/n-book/assets/source_5.bcnzFym3.png",R="/n-book/assets/source_6.Bj_7SlQe.png",S="/n-book/assets/console_5.BdUhA5R7.png",_="/n-book/assets/seo_1.BbX5dBGe.png",P="/n-book/assets/seo_2.oobcywwu.png",$=JSON.parse('{"title":"从 0 实现 React SSR","description":"","frontmatter":{},"headers":[],"relativePath":"react/react_ssr.md","filePath":"react/react_ssr.md","lastUpdated":1557397798000}'),H={name:"react/react_ssr.md"};function L(T,s,N,O,M,I){return l(),a("div",null,s[0]||(s[0]=[p('<h1 id="从-0-实现-react-ssr" tabindex="-1">从 0 实现 React SSR <a class="header-anchor" href="#从-0-实现-react-ssr" aria-label="Permalink to &quot;从 0 实现 React SSR&quot;">​</a></h1><h2 id="什么是服务端渲染" tabindex="-1">什么是服务端渲染？ <a class="header-anchor" href="#什么是服务端渲染" aria-label="Permalink to &quot;什么是服务端渲染？&quot;">​</a></h2><p>SSR：服务器把页面要展示的内容提前渲染好，直接返回给客户端去展示。</p><p>SSR 缺点：很消耗服务器的性能。</p><p>CSR（Client Server Render）客户端渲染：由客户端来渲染页面内容。</p><p>CSR 缺点：TTFP 首屏展现时间慢，对 SEO 不友好。</p><p><img src="'+e+'" alt="csr_ssr"></p><p>CSR 首屏渲染时间不如 SSR。</p><p>CSR 的 SEO 效果不如 SSR。（因为爬虫只能读取到 html 中的文本内容，读取不到 JS 里的内容，而 CSR 是由 JS 执行后渲染页面内容。）</p><h2 id="在服务器端编写-react-组件" tabindex="-1">在服务器端编写 React 组件 <a class="header-anchor" href="#在服务器端编写-react-组件" aria-label="Permalink to &quot;在服务器端编写 React 组件&quot;">​</a></h2><p>用 React 进行的客户端渲染，页面访问的执行顺序： <img src="'+o+'" alt="flow_1"></p><p>在服务器端写 React ，页面访问的执行顺序： <img src="'+r+`" alt="flow_2"></p><p>Node 环境下不遵从 <strong>ESModule</strong> 的写法，而遵从 <strong>common.js</strong> 的写法。 所以不能写</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> React </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#A7C080;"> Home</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#A7C080;"> &lt;</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span><span style="color:#D3C6AA;">home</span><span style="color:#A7C080;">&lt;/</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E67E80;"> default</span><span style="color:#D3C6AA;"> App;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>而是要 <strong>common.js</strong> 的写法：</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> React </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;react&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 需要 webpack 编译打包好 JSX 语法内容才能用</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#A7C080;"> Home</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#A7C080;"> &lt;</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span><span style="color:#D3C6AA;">home</span><span style="color:#A7C080;">&lt;/</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"><span style="color:#83C092;">module</span><span style="color:#859289;">.</span><span style="color:#83C092;">exports</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  default</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> Home</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>但我们可以通过 webpack 编译打包，来使我们依然使用 <strong>ESModule</strong> 的写法。</p><h2 id="编写-webpack-4-的配置文件" tabindex="-1">编写 webpack 4 的配置文件 <a class="header-anchor" href="#编写-webpack-4-的配置文件" aria-label="Permalink to &quot;编写 webpack 4 的配置文件&quot;">​</a></h2><p>安装 webpack cli: <a href="https://github.com/webpack/webpack-cli" target="_blank" rel="noreferrer">https://github.com/webpack/webpack-cli</a></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">npm</span><span style="color:#DBBC7F;"> install</span><span style="color:#DBBC7F;"> --save-dev</span><span style="color:#DBBC7F;"> webpack-cli</span></span>
<span class="line"><span style="color:#A7C080;">yarn</span><span style="color:#DBBC7F;"> add</span><span style="color:#DBBC7F;"> webpack-cli</span><span style="color:#DBBC7F;"> --dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="babel" tabindex="-1">Babel <a class="header-anchor" href="#babel" aria-label="Permalink to &quot;Babel&quot;">​</a></h3><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">//  /webpack.server.js;</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> path </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;path&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> nodeExternals </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;webpack-node-externals&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#83C092;">module</span><span style="color:#859289;">.</span><span style="color:#83C092;">exports</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 指定target是node环境，原因是例如const path = require(&#39;path&#39;);</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 在node环境下不会将整个path包全部引入，而在客户端环境（需要）会将整个path包全部引入。</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 所以需要声明。</span></span>
<span class="line"><span style="color:#D3C6AA;">  target</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;node&quot;</span><span style="color:#D3C6AA;">, </span><span style="color:#859289;font-style:italic;">// webpack4要求要声明mode环境</span></span>
<span class="line"><span style="color:#D3C6AA;">  mode</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;development&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  entry</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;./src/index.js&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  output</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    filename</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;bundle.js&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // __dirname 指的是服务器端的根路径</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // 打包后的文件放到根路径下的 build 文件夹</span></span>
<span class="line"><span style="color:#D3C6AA;">    path</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> path</span><span style="color:#859289;">.</span><span style="color:#A7C080;">resolve</span><span style="color:#D3C6AA;">(__dirname, </span><span style="color:#DBBC7F;">&quot;build&quot;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">  },</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 运行 nodeExternals</span></span>
<span class="line"><span style="color:#D3C6AA;">  externals</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span><span style="color:#A7C080;">nodeExternals</span><span style="color:#D3C6AA;">()],</span></span>
<span class="line"><span style="color:#D3C6AA;">  module</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    rules</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span></span>
<span class="line"><span style="color:#D3C6AA;">      {</span></span>
<span class="line"><span style="color:#D3C6AA;">        test</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> /</span><span style="color:#A7C080;">\\.</span><span style="color:#DBBC7F;">js</span><span style="color:#E69875;">?</span><span style="color:#E67E80;">$</span><span style="color:#DBBC7F;">/</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">        // 要使用 babel-loader，还需要安装它的核心库 babel-core</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">        // npm install babel-loader babel-core --save</span></span>
<span class="line"><span style="color:#D3C6AA;">        loader</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;babel-loader&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">        exclude</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> /node_modules/</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">        options</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">          // 需要安装babel-preset-react来使得babel-loader能编译react代码</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">          // babel-preset-stage-0,babel-preset-env是辅助编译react的</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">          // 都需要安装</span></span>
<span class="line"><span style="color:#D3C6AA;">          presets</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span></span>
<span class="line"><span style="color:#DBBC7F;">            &quot;react&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#DBBC7F;">            &quot;stage-0&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">            // 打包编译时，babel会去兼容所有主流浏览器的最后两个版本</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">            // 需要安装 npm install babel-preset-env --save 来设置env变量</span></span>
<span class="line"><span style="color:#D3C6AA;">            [</span></span>
<span class="line"><span style="color:#DBBC7F;">              &quot;env&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">              {</span></span>
<span class="line"><span style="color:#D3C6AA;">                targets</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">                  browsers</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span><span style="color:#DBBC7F;">&quot;last 2 versions&quot;</span><span style="color:#D3C6AA;">]</span></span>
<span class="line"><span style="color:#D3C6AA;">                }</span></span>
<span class="line"><span style="color:#D3C6AA;">              }</span></span>
<span class="line"><span style="color:#D3C6AA;">            ]</span></span>
<span class="line"><span style="color:#D3C6AA;">          ]</span></span>
<span class="line"><span style="color:#D3C6AA;">        }</span></span>
<span class="line"><span style="color:#D3C6AA;">      }</span></span>
<span class="line"><span style="color:#D3C6AA;">    ]</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br></div></div><p>使用下面这条命令，使 webpack 用我们指定的配置文件进行打包。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">$</span><span style="color:#DBBC7F;"> webpack</span><span style="color:#DBBC7F;"> --config</span><span style="color:#DBBC7F;"> webpack.server.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>运行可能会报如下警告： <img src="`+t+'" alt="warning_1"> 在服务器端除了要声明 target: &quot;node&quot;，还需要安装 <strong>webpack-node-externals</strong>，使得代码中引入的第三方的库（如 koa、express）不被打包进 bundled.js 里，还是会在 node modules 中加载。</p><p>文档：<a href="https://github.com/liady/webpack-node-externals" target="_blank" rel="noreferrer">https://github.com/liady/webpack-node-externals</a></p><h3 id="css" tabindex="-1">CSS <a class="header-anchor" href="#css" aria-label="Permalink to &quot;CSS&quot;">​</a></h3><p>webpack css 客户端打包编译需要安装 style-loader 和 css-loader。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">yarn</span><span style="color:#DBBC7F;"> add</span><span style="color:#DBBC7F;"> style-loader</span><span style="color:#DBBC7F;"> css-loader</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在服务器渲染时，使用 style-loader 会报以下错误，因为服务端上没有 window 对象。 <img src="'+c+`" alt="error_1"></p><p>所以服务端渲染时，CSS 打包使用 isomorphic 来代替 style-loader。 <a href="https://github.com/kriasoft/isomorphic-style-loader" target="_blank" rel="noreferrer">https://github.com/kriasoft/isomorphic-style-loader</a></p><p>分别配置客户端和服务端的 webpack 文件：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// /webpack.client.js</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> clientConfig </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  mode</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;development&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  entry</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;./src/client/index.js&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  output</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    filename</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;index.js&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">    path</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> path</span><span style="color:#859289;">.</span><span style="color:#A7C080;">resolve</span><span style="color:#D3C6AA;">(__dirname, </span><span style="color:#DBBC7F;">&quot;public&quot;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">  },</span></span>
<span class="line"><span style="color:#D3C6AA;">  module</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    rules</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span></span>
<span class="line"><span style="color:#D3C6AA;">      {</span></span>
<span class="line"><span style="color:#D3C6AA;">        test</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> /</span><span style="color:#A7C080;">\\.</span><span style="color:#DBBC7F;">css</span><span style="color:#E69875;">?</span><span style="color:#E67E80;">$</span><span style="color:#DBBC7F;">/</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">        use</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span></span>
<span class="line"><span style="color:#DBBC7F;">          &quot;style-loader&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">          {</span></span>
<span class="line"><span style="color:#D3C6AA;">            loader</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;css-loader&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">            options</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">              importLoaders</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 1</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">              modules</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> true</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">              localIdentName</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;[name]_[local]_[hash:base64:5]&quot;</span></span>
<span class="line"><span style="color:#D3C6AA;">            }</span></span>
<span class="line"><span style="color:#D3C6AA;">          }</span></span>
<span class="line"><span style="color:#D3C6AA;">        ]</span></span>
<span class="line"><span style="color:#D3C6AA;">      }</span></span>
<span class="line"><span style="color:#D3C6AA;">    ]</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// /webpack.server.js</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> serverConfig </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  target</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;node&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  mode</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;development&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  entry</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;./src/server/index.js&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  output</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    filename</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;bundle.js&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">    path</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> path</span><span style="color:#859289;">.</span><span style="color:#A7C080;">resolve</span><span style="color:#D3C6AA;">(__dirname, </span><span style="color:#DBBC7F;">&quot;build&quot;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">  },</span></span>
<span class="line"><span style="color:#D3C6AA;">  externals</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span><span style="color:#A7C080;">nodeExternals</span><span style="color:#D3C6AA;">()],</span></span>
<span class="line"><span style="color:#D3C6AA;">  module</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    rules</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span></span>
<span class="line"><span style="color:#D3C6AA;">      {</span></span>
<span class="line"><span style="color:#D3C6AA;">        test</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> /</span><span style="color:#A7C080;">\\.</span><span style="color:#DBBC7F;">css</span><span style="color:#E69875;">?</span><span style="color:#E67E80;">$</span><span style="color:#DBBC7F;">/</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">        use</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span></span>
<span class="line"><span style="color:#DBBC7F;">          &quot;isomorphic-style-loader&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">          {</span></span>
<span class="line"><span style="color:#D3C6AA;">            loader</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;css-loader&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">            options</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">              importLoaders</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 1</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">              modules</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> true</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">              localIdentName</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;[name]_[local]_[hash:base64:5]&quot;</span></span>
<span class="line"><span style="color:#D3C6AA;">            }</span></span>
<span class="line"><span style="color:#D3C6AA;">          }</span></span>
<span class="line"><span style="color:#D3C6AA;">        ]</span></span>
<span class="line"><span style="color:#D3C6AA;">      }</span></span>
<span class="line"><span style="color:#D3C6AA;">    ]</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>但是这种做法也只是可以成功打包在服务端渲染时的 CSS 代码，页面上显示的还是客户端渲染的 CSS。想要服务端渲染时就把 CSS 代码打包好，参考下方的小节内容：<strong>处理 SSR 框架中的 CSS 样式- 实现 CSS 样式的服务器端渲染。</strong></p><h3 id="webpack-的自动打包与服务器自动重启" tabindex="-1">Webpack 的自动打包与服务器自动重启 <a class="header-anchor" href="#webpack-的自动打包与服务器自动重启" aria-label="Permalink to &quot;Webpack 的自动打包与服务器自动重启&quot;">​</a></h3><p>nodemon is a tool that helps develop node.js based applications by automatically restarting the node application when file changes in the directory are detected.</p><p>全局安装：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">yarn</span><span style="color:#DBBC7F;"> global</span><span style="color:#DBBC7F;"> add</span><span style="color:#DBBC7F;"> nodemon</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>文档：<a href="https://github.com/remy/nodemon" target="_blank" rel="noreferrer">https://github.com/remy/nodemon</a></p><p>配置新命令： server/package.json</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;">&quot;</span><span style="color:#A7C080;">scripts</span><span style="color:#859289;">&quot;</span><span style="color:#D3C6AA;">: {</span></span>
<span class="line"><span style="color:#859289;">  &quot;</span><span style="color:#E69875;">start</span><span style="color:#859289;">&quot;</span><span style="color:#859289;">:</span><span style="color:#859289;"> &quot;</span><span style="color:#A7C080;">nodemon --watch build --exec node \\&quot;./build/bundle.js\\&quot;</span><span style="color:#859289;">&quot;</span><span style="color:#859289;">,</span></span>
<span class="line"><span style="color:#859289;">  &quot;</span><span style="color:#E69875;">build</span><span style="color:#859289;">&quot;</span><span style="color:#859289;">:</span><span style="color:#859289;"> &quot;</span><span style="color:#A7C080;">webpack --config webpack.server.js --watch</span><span style="color:#859289;">&quot;</span></span>
<span class="line"><span style="color:#D3C6AA;">},</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>webpack 命令追加 <code>--watch</code> 参数，意思是监听 webpack.server.js 配置的文件的变化，一旦发生变化就重新 build 打包一次代码。但是这只是重新打包了新的 bundled.js，并没有重启服务器，所以页面显示的还是旧的内容。所以我们需要配合着 nodemon 来使用。</p><p>start 命令的意思是 nodemon 监听 build 文件夹，一旦 build 文件夹发生了更改，就执行<code>node &quot;./build/bundle.js&quot;</code>命令，重启服务器。</p><h3 id="npm-run-all" tabindex="-1">npm-run-all <a class="header-anchor" href="#npm-run-all" aria-label="Permalink to &quot;npm-run-all&quot;">​</a></h3><p>上面自动打包和服务器自动重启是两条命令，需要两个终端窗口去分别执行，太麻烦，我们可以借助第三方工具使之合并为一个命令。</p><p><strong>全局安装 npm-run-all</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">yarn</span><span style="color:#DBBC7F;"> global</span><span style="color:#DBBC7F;"> add</span><span style="color:#DBBC7F;"> npm-run-all</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>文档：<a href="https://github.com/mysticatea/npm-run-all" target="_blank" rel="noreferrer">https://github.com/mysticatea/npm-run-all</a></p><p>改写命令，<code>npm-run-all --parallel dev:**</code> 的意思是，并行的执行所有以 dev: 开头的命令。</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;">&quot;</span><span style="color:#A7C080;">scripts</span><span style="color:#859289;">&quot;</span><span style="color:#D3C6AA;">: {</span></span>
<span class="line"><span style="color:#859289;">  &quot;</span><span style="color:#E69875;">dev</span><span style="color:#859289;">&quot;</span><span style="color:#859289;">:</span><span style="color:#859289;"> &quot;</span><span style="color:#A7C080;">npm-run-all --parallel dev:**</span><span style="color:#859289;">&quot;</span><span style="color:#859289;">,</span></span>
<span class="line"><span style="color:#859289;">  &quot;</span><span style="color:#E69875;">dev:start</span><span style="color:#859289;">&quot;</span><span style="color:#859289;">:</span><span style="color:#859289;"> &quot;</span><span style="color:#A7C080;">nodemon --watch build --exec node \\&quot;./build/bundle.js\\&quot;</span><span style="color:#859289;">&quot;</span><span style="color:#859289;">,</span></span>
<span class="line"><span style="color:#859289;">  &quot;</span><span style="color:#E69875;">dev:build</span><span style="color:#859289;">&quot;</span><span style="color:#859289;">:</span><span style="color:#859289;"> &quot;</span><span style="color:#A7C080;">webpack --config webpack.server.js --watch</span><span style="color:#859289;">&quot;</span></span>
<span class="line"><span style="color:#D3C6AA;">},</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="webpack-merge-优化" tabindex="-1">webpack-merge 优化 <a class="header-anchor" href="#webpack-merge-优化" aria-label="Permalink to &quot;webpack-merge 优化&quot;">​</a></h3><p>可以用 webpack-merge 去合并 webpack 中重复的配置项。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// /webpack.server.js</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> path </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;path&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> nodeExternals </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;webpack-node-externals&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> merge </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;webpack-merge&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> config </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;./webpack.base.js&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> serverConfig </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  target</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;node&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  mode</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;development&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  entry</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;./src/server/index.js&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  output</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    filename</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;bundle.js&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">    path</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> path</span><span style="color:#859289;">.</span><span style="color:#A7C080;">resolve</span><span style="color:#D3C6AA;">(__dirname, </span><span style="color:#DBBC7F;">&quot;build&quot;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">  },</span></span>
<span class="line"><span style="color:#D3C6AA;">  externals</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span><span style="color:#A7C080;">nodeExternals</span><span style="color:#D3C6AA;">()]</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#83C092;">module</span><span style="color:#859289;">.</span><span style="color:#83C092;">exports</span><span style="color:#E69875;"> =</span><span style="color:#A7C080;"> merge</span><span style="color:#D3C6AA;">(config, serverConfig);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>./webpack.base.js 导出一个对象，merge 方法去合并 config 对象和 serverConfig 对象。</p><h2 id="实现服务器端组件渲染" tabindex="-1">实现服务器端组件渲染 <a class="header-anchor" href="#实现服务器端组件渲染" aria-label="Permalink to &quot;实现服务器端组件渲染&quot;">​</a></h2><p>原来客户端渲染的模式：</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> React </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> ReactDOM </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react-dom&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> App </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;./App&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">ReactDOM</span><span style="color:#859289;">.</span><span style="color:#A7C080;">render</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">&lt;</span><span style="color:#7FBBB3;">App</span><span style="color:#A7C080;"> /&gt;</span><span style="color:#D3C6AA;">, document</span><span style="color:#859289;">.</span><span style="color:#A7C080;">getElementById</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;root&quot;</span><span style="color:#D3C6AA;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在服务器端并不能直接 ReactDOM.render() 去取节点渲染。</p><p>但 react-dom 提供了服务器端渲染的方法：<strong>renderToString</strong> （将组件渲染成字符串返回）</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/index.js</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> express </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;express&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> Home </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;./containers/Home&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> React </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 在服务器端渲染 react 组件</span></span>
<span class="line highlighted"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { renderToString } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react-dom/server&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> app </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> express</span><span style="color:#D3C6AA;">();</span></span>
<span class="line highlighted"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> content </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> renderToString</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">&lt;</span><span style="color:#7FBBB3;">Home</span><span style="color:#A7C080;"> /&gt;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">app</span><span style="color:#859289;">.</span><span style="color:#A7C080;">get</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;/&quot;</span><span style="color:#D3C6AA;">, </span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">(req,</span><span style="color:#D3C6AA;"> res)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  res</span><span style="color:#859289;">.</span><span style="color:#A7C080;">send</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">\`</span></span>
<span class="line"><span style="color:#DBBC7F;">		&lt;html&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">			&lt;head&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">				&lt;title&gt;ssr&lt;/title&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">			&lt;/head&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">			&lt;body&gt;</span></span>
<span class="line highlighted"><span style="color:#A7C080;">				\${</span><span style="color:#D3C6AA;">content</span><span style="color:#A7C080;">}</span></span>
<span class="line"><span style="color:#DBBC7F;">			&lt;/body&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">		&lt;/html&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">  \`</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> server </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> app</span><span style="color:#859289;">.</span><span style="color:#A7C080;">listen</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">3000</span><span style="color:#D3C6AA;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p><strong>React 的虚拟 DOM 使得服务器渲染更简单，它是建立在虚拟 DOM 上的服务器端渲染，就是一个 JS 对象(虚拟 DOM)转成字符串返回去。</strong></p><h2 id="同构的概念梳理" tabindex="-1">同构的概念梳理 <a class="header-anchor" href="#同构的概念梳理" aria-label="Permalink to &quot;同构的概念梳理&quot;">​</a></h2><h3 id="什么是同构" tabindex="-1">什么是同构？ <a class="header-anchor" href="#什么是同构" aria-label="Permalink to &quot;什么是同构？&quot;">​</a></h3><p>一套 React 代码，在服务器端执行一次，在客户端再执行一次。 <img src="`+i+`" alt="flow_3"></p><h3 id="为什么要有同构" tabindex="-1">为什么要有同构？ <a class="header-anchor" href="#为什么要有同构" aria-label="Permalink to &quot;为什么要有同构？&quot;">​</a></h3><p>假如我们想点击 button 时执行绑定在上面的 JS 语句，但服务器渲染时，组件上绑定的 JS 语句返回给客户端时会被删掉。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/containers/Home/index.js</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> React </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#A7C080;"> Home</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> (</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">      &lt;</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span><span style="color:#D3C6AA;">This is HOME!</span><span style="color:#A7C080;">&lt;/</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line highlighted"><span style="color:#A7C080;">      &lt;</span><span style="color:#E69875;">button</span></span>
<span class="line"><span style="color:#A7C080;">        onClick</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">() </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">          alert</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;click1&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">        }</span><span style="color:#A7C080;">}</span></span>
<span class="line"><span style="color:#A7C080;">      &gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">        click</span></span>
<span class="line"><span style="color:#A7C080;">      &lt;/</span><span style="color:#E69875;">button</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;/</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">  );</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E67E80;"> default</span><span style="color:#D3C6AA;"> Home;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/index.js</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> express </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;express&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> React </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { renderToString } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react-dom/server&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> Home </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;../containers/Home&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> app </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> express</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#D3C6AA;">app</span><span style="color:#859289;">.</span><span style="color:#A7C080;">use</span><span style="color:#D3C6AA;">(express</span><span style="color:#859289;">.</span><span style="color:#A7C080;">static</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;public&quot;</span><span style="color:#D3C6AA;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> content </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> renderToString</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">&lt;</span><span style="color:#7FBBB3;">Home</span><span style="color:#A7C080;"> /&gt;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">app</span><span style="color:#859289;">.</span><span style="color:#A7C080;">get</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;/&quot;</span><span style="color:#D3C6AA;">, </span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">(req,</span><span style="color:#D3C6AA;"> res)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  res</span><span style="color:#859289;">.</span><span style="color:#A7C080;">send</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">\`</span></span>
<span class="line"><span style="color:#DBBC7F;">		&lt;html&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">			&lt;head&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">				&lt;title&gt;ssr&lt;/title&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">			&lt;/head&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">			&lt;body&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">				&lt;div id=&quot;root&quot;&gt;</span><span style="color:#A7C080;">\${</span><span style="color:#D3C6AA;">content</span><span style="color:#A7C080;">}</span><span style="color:#DBBC7F;">&lt;/div&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">			&lt;/body&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">		&lt;/html&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">  \`</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> server </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> app</span><span style="color:#859289;">.</span><span style="color:#A7C080;">listen</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">3000</span><span style="color:#D3C6AA;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>如上面 button 的 alert 语句，渲染到页面时已被删除。因为 renderToString 方法只会渲染组件的基础内容，不会渲染事件。 <img src="`+y+`" alt="source_1"></p><p>为了解决这个问题，提出<strong>同构</strong>这种做法。</p><h3 id="如何在浏览器上执行一段-js-代码" tabindex="-1">如何在浏览器上执行一段 JS 代码？ <a class="header-anchor" href="#如何在浏览器上执行一段-js-代码" aria-label="Permalink to &quot;如何在浏览器上执行一段 JS 代码？&quot;">​</a></h3><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/index.js</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> app </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> express</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#D3C6AA;">app</span><span style="color:#859289;">.</span><span style="color:#A7C080;">use</span><span style="color:#D3C6AA;">(express</span><span style="color:#859289;">.</span><span style="color:#A7C080;">static</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;public&quot;</span><span style="color:#D3C6AA;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在 express 中提供了这样的方法，使用 use() 使用中间件，<code>express.static(&#39;public&#39;)</code> 意思是假如访问的是一个静态文件，就会到根目录下的 public 文件夹去获取静态资源。</p><p>并且我们在 webpack 配置了客户端的文件会被打包到 public 文件夹下，这样就有了解决的一种方式：</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#D3C6AA;">app</span><span style="color:#859289;">.</span><span style="color:#A7C080;">get</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;/&quot;</span><span style="color:#D3C6AA;">, </span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">(req,</span><span style="color:#D3C6AA;"> res)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  res</span><span style="color:#859289;">.</span><span style="color:#A7C080;">send</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">\`</span></span>
<span class="line"><span style="color:#DBBC7F;">		&lt;html&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">			&lt;head&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">				&lt;title&gt;ssr&lt;/title&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">			&lt;/head&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">			&lt;body&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">				&lt;div id=&quot;root&quot;&gt;</span><span style="color:#A7C080;">\${</span><span style="color:#D3C6AA;">content</span><span style="color:#A7C080;">}</span><span style="color:#DBBC7F;">&lt;/div&gt;</span></span>
<span class="line highlighted"><span style="color:#DBBC7F;">				&lt;script src=&#39;/index.js&#39;&gt;&lt;/script&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">			&lt;/body&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">		&lt;/html&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">  \`</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>同构过程：访问 localhost:3000，可以获得服务器端渲染的内容，然后进行客户端的渲染。</p><p>在页面中的 <code>&lt;script src=&#39;/index.js&#39;&gt;&lt;/script&gt;</code> 会引入 index.js 文件，并且执行里面的 JS 内容（客户端加载 JS）。</p><h3 id="让-react-代码在浏览器上运行" tabindex="-1">让 React 代码在浏览器上运行 <a class="header-anchor" href="#让-react-代码在浏览器上运行" aria-label="Permalink to &quot;让 React 代码在浏览器上运行&quot;">​</a></h3><blockquote><p>同构思路：我们在 src 目录下新建一个 client 目录，专门存放客户端渲染要执行的代码（client/index.js），并且用 webpack.client.js 将其打包编译到根目录的 public 文件夹下。（浏览器里是不直接支持 esmodule 的写法的，所以要用 webpack 编译）</p></blockquote><blockquote><p>在服务端渲染完吐页面给浏览器后，浏览器会去执行 <code>&lt;script src=&#39;/index.js&#39;&gt;&lt;/script&gt;</code> 访问 /index.js 文件，也就是直接访问 public 文件夹下的 index.js，浏览器就又重新加载了一次组件 Home，因为是客户端渲染的 Home，没有用到 renderToSring，JS 事件也都可以正常绑定上去了。</p></blockquote><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/client/index.js</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> React </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> ReactDom </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react-dom&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> Home </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;../containers/Home&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">ReactDom</span><span style="color:#859289;">.</span><span style="color:#A7C080;">hydrate</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">&lt;</span><span style="color:#7FBBB3;">Home</span><span style="color:#A7C080;"> /&gt;</span><span style="color:#D3C6AA;">, document</span><span style="color:#859289;">.</span><span style="color:#A7C080;">getElementById</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;root&quot;</span><span style="color:#D3C6AA;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>这里要注意，同构的使用 ReactDom.hydrate <code>ReactDom.hydrate(&lt;Home /&gt;, document.getElementById(&quot;root&quot;));</code></p><p>而不是<code>ReactDom.render(&lt;Home /&gt;, document.getElementById(&quot;root&quot;));</code></p><p>这时候服务器渲染出的内容里，button 上依然是没有 js 语句的，但因为是客户端渲染时加载的 index.js 文件，使得 button 上的 click 语句正常执行了。 <img src="`+A+'" alt="source_2"></p><p>我们可以看到浏览器请求的先是服务器端返回的 localhost html，然后再请求加载的 index.js： <img src="'+b+'" alt="network_1"></p><h2 id="在-ssr-框架中引入路由机制" tabindex="-1">在 SSR 框架中引入路由机制 <a class="header-anchor" href="#在-ssr-框架中引入路由机制" aria-label="Permalink to &quot;在 SSR 框架中引入路由机制&quot;">​</a></h2><p>客户端的路由机制： <img src="'+C+`" alt="flow_4"></p><p>服务器端路由机制： 在客户端的路由机制是一样的。但是在服务器端就不一样了。</p><p>最大的区别是服务器端使用 <strong>StaticRouter</strong> ，而客户端使用 <strong>BrowserRouter</strong>。</p><p>文档：<a href="https://reacttraining.com/react-router/web/api/StaticRouter" target="_blank" rel="noreferrer">https://reacttraining.com/react-router/web/api/StaticRouter</a></p><p>安装 react 路由：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">yarn</span><span style="color:#DBBC7F;"> add</span><span style="color:#DBBC7F;"> react-router-dom</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="路由配置文件" tabindex="-1">路由配置文件： <a class="header-anchor" href="#路由配置文件" aria-label="Permalink to &quot;路由配置文件：&quot;">​</a></h3><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/Routes.js</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> React </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { Route } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react-router-dom&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> Home </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;./containers/Home&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> Login </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;./containers/Login&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E67E80;"> default</span><span style="color:#D3C6AA;"> (</span></span>
<span class="line"><span style="color:#A7C080;">  &lt;</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;</span><span style="color:#7FBBB3;">Route</span><span style="color:#A7C080;"> path</span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;">&quot;/&quot;</span><span style="color:#A7C080;"> exact</span><span style="color:#A7C080;"> component</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">Home</span><span style="color:#A7C080;">}</span><span style="color:#A7C080;"> /&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;</span><span style="color:#7FBBB3;">Route</span><span style="color:#A7C080;"> path</span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;">&quot;/login&quot;</span><span style="color:#A7C080;"> exact</span><span style="color:#A7C080;"> component</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">Login</span><span style="color:#A7C080;">}</span><span style="color:#A7C080;"> /&gt;</span></span>
<span class="line"><span style="color:#A7C080;">  &lt;/</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="客户端使用-browserrouter-进行客户端路由渲染" tabindex="-1">客户端使用 BrowserRouter 进行客户端路由渲染： <a class="header-anchor" href="#客户端使用-browserrouter-进行客户端路由渲染" aria-label="Permalink to &quot;客户端使用 BrowserRouter 进行客户端路由渲染：&quot;">​</a></h3><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// /src/client/index.js</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> React </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> ReactDom </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react-dom&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { BrowserRouter } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react-router-dom&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> Routes </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;../Routes&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#A7C080;"> App</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line highlighted"><span style="color:#E67E80;">  return</span><span style="color:#A7C080;"> &lt;</span><span style="color:#7FBBB3;">BrowserRouter</span><span style="color:#A7C080;">&gt;{</span><span style="color:#D3C6AA;">Routes</span><span style="color:#A7C080;">}&lt;/</span><span style="color:#7FBBB3;">BrowserRouter</span><span style="color:#A7C080;">&gt;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">ReactDom</span><span style="color:#859289;">.</span><span style="color:#A7C080;">hydrate</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">&lt;</span><span style="color:#7FBBB3;">App</span><span style="color:#A7C080;"> /&gt;</span><span style="color:#D3C6AA;">, document</span><span style="color:#859289;">.</span><span style="color:#A7C080;">getElementById</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;root&quot;</span><span style="color:#D3C6AA;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="服务端的路由写法" tabindex="-1">服务端的路由写法： <a class="header-anchor" href="#服务端的路由写法" aria-label="Permalink to &quot;服务端的路由写法：&quot;">​</a></h3><p>而服务器端由 express 监听所有路由路径，并且把要渲染的内容封装成一个 render 方法（优化策略）：</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/server/index.js</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> express </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;express&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { render } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;./utils&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> app </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> express</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#D3C6AA;">app</span><span style="color:#859289;">.</span><span style="color:#A7C080;">use</span><span style="color:#D3C6AA;">(express</span><span style="color:#859289;">.</span><span style="color:#A7C080;">static</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;public&quot;</span><span style="color:#D3C6AA;">));</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// * 表示express 监听所有的路由路径</span></span>
<span class="line highlighted"><span style="color:#D3C6AA;">app</span><span style="color:#859289;">.</span><span style="color:#A7C080;">get</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;*&quot;</span><span style="color:#D3C6AA;">, </span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">(req,</span><span style="color:#D3C6AA;"> res)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  res</span><span style="color:#859289;">.</span><span style="color:#A7C080;">send</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">render</span><span style="color:#D3C6AA;">(req));</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> server </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> app</span><span style="color:#859289;">.</span><span style="color:#A7C080;">listen</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">3000</span><span style="color:#D3C6AA;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>req 是 express 监听到路由变更时的一个大对象，其中 req.path 是当前 url 的 pathname。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/server/utils.js</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> React </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { renderToString } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react-dom/server&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { StaticRouter } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react-router-dom&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> Routes </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;../Routes&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E69875;"> const</span><span style="color:#A7C080;"> render</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> req </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> content </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> renderToString</span><span style="color:#D3C6AA;">(</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // 服务器端 StaticRouter 无法监听到客户端的url路径，所以需要req.path传给location，以便知道当前的path</span></span>
<span class="line highlighted"><span style="color:#A7C080;">    &lt;</span><span style="color:#7FBBB3;">StaticRouter</span><span style="color:#A7C080;"> location</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">req</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">path</span><span style="color:#A7C080;">}</span><span style="color:#A7C080;"> context</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">{}</span><span style="color:#A7C080;">}&gt;</span></span>
<span class="line"><span style="color:#A7C080;">      {</span><span style="color:#D3C6AA;">Routes</span><span style="color:#A7C080;">}</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;/</span><span style="color:#7FBBB3;">StaticRouter</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">  );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#DBBC7F;"> \`</span></span>
<span class="line"><span style="color:#DBBC7F;">    &lt;html&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">      &lt;head&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">        &lt;title&gt;ssr&lt;/title&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">      &lt;/head&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">      &lt;body&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">        &lt;div id=&quot;root&quot;&gt;</span><span style="color:#A7C080;">\${</span><span style="color:#D3C6AA;">content</span><span style="color:#A7C080;">}</span><span style="color:#DBBC7F;">&lt;/div&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">        &lt;script src=&#39;/index.js&#39;&gt;&lt;/script&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">      &lt;/body&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">    &lt;/html&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">  \`</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>render 方法中使用 StaticRouter 进行服务器端路由渲染。</p><p>context 传递一个对象来通信。官方解释：A plain JavaScript object. During the render, components can add properties to the object to store information about the render. When a <code>&lt;Route&gt;</code> matches, it will pass the context object to the component it renders as the staticContext prop.</p><h3 id="使用link标签串起路由" tabindex="-1">使用Link标签串起路由 <a class="header-anchor" href="#使用link标签串起路由" aria-label="Permalink to &quot;使用Link标签串起路由&quot;">​</a></h3><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/components/Header.js</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> React </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { Link } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react-router-dom&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#A7C080;"> Header</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> (</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">      &lt;</span><span style="color:#7FBBB3;">Link</span><span style="color:#A7C080;"> to</span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;">&quot;/&quot;</span><span style="color:#A7C080;">&gt;</span><span style="color:#D3C6AA;">Home</span><span style="color:#A7C080;">&lt;/</span><span style="color:#7FBBB3;">Link</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">      &lt;</span><span style="color:#E69875;">br</span><span style="color:#A7C080;"> /&gt;</span></span>
<span class="line"><span style="color:#A7C080;">      &lt;</span><span style="color:#7FBBB3;">Link</span><span style="color:#A7C080;"> to</span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;">&quot;/login&quot;</span><span style="color:#A7C080;">&gt;</span><span style="color:#D3C6AA;">Login</span><span style="color:#A7C080;">&lt;/</span><span style="color:#7FBBB3;">Link</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;/</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">  );</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E67E80;"> default</span><span style="color:#D3C6AA;"> Header;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>引入组件点击即可跳转路由。</p><p><strong>服务器端渲染只发生在我们第一次进入页面的时候，之后页面由 React 代码接管，路由跳转都是客户端控制的，不会重新请求页面。</strong></p><h2 id="ssr-框架与-redux-的结合" tabindex="-1">SSR 框架与 Redux 的结合 <a class="header-anchor" href="#ssr-框架与-redux-的结合" aria-label="Permalink to &quot;SSR 框架与 Redux 的结合&quot;">​</a></h2><h3 id="同构项目中引入-redux" tabindex="-1">同构项目中引入 Redux <a class="header-anchor" href="#同构项目中引入-redux" aria-label="Permalink to &quot;同构项目中引入 Redux&quot;">​</a></h3><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/store/index.js</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { createStore, applyMiddleware } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;redux&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> thunk </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;redux-thunk&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> defaultStore </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  name</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;Du&quot;</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#A7C080;"> reducer</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> (state </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> defaultStore, action) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> state;</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#A7C080;"> getStore</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#A7C080;"> createStore</span><span style="color:#D3C6AA;">(reducer, </span><span style="color:#A7C080;">applyMiddleware</span><span style="color:#D3C6AA;">(thunk));</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E67E80;"> default</span><span style="color:#D3C6AA;"> getStore;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>Q: 为什么 store 返回是以一个 getStore() 函数的方式？</p><p>A: 涉及到<strong>单例</strong>的问题，在服务器端直接返回一个 store 对象的话，那众多浏览器在访问的时候，都是读取的这一个对象，对服务器压力会很大。而返回一个函数的方式，使得 store 对象是在客户端生成，即多例的运用。</p><p>客户端引入</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/client/index.js</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> React </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> ReactDom </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react-dom&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { BrowserRouter } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react-router-dom&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { Provider } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react-redux&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> getStore </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;../store&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> Routes </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;../Routes&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#A7C080;"> App</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> (</span></span>
<span class="line highlighted"><span style="color:#A7C080;">    &lt;</span><span style="color:#7FBBB3;">Provider</span><span style="color:#A7C080;"> store</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{getStore</span><span style="color:#D3C6AA;">()</span><span style="color:#A7C080;">}&gt;</span></span>
<span class="line"><span style="color:#A7C080;">      &lt;</span><span style="color:#7FBBB3;">BrowserRouter</span><span style="color:#A7C080;">&gt;{</span><span style="color:#D3C6AA;">Routes</span><span style="color:#A7C080;">}&lt;/</span><span style="color:#7FBBB3;">BrowserRouter</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;/</span><span style="color:#7FBBB3;">Provider</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">  );</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">ReactDom</span><span style="color:#859289;">.</span><span style="color:#A7C080;">hydrate</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">&lt;</span><span style="color:#7FBBB3;">App</span><span style="color:#A7C080;"> /&gt;</span><span style="color:#D3C6AA;">, document</span><span style="color:#859289;">.</span><span style="color:#A7C080;">getElementById</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;root&quot;</span><span style="color:#D3C6AA;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>服务器端引入</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/server/utils.js</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> React </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { renderToString } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react-dom/server&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { StaticRouter } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react-router-dom&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> Routes </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;../Routes&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { Provider } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react-redux&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> getStore </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;../store&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E69875;"> const</span><span style="color:#A7C080;"> render</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> req </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> content </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> renderToString</span><span style="color:#D3C6AA;">(</span></span>
<span class="line highlighted"><span style="color:#A7C080;">    &lt;</span><span style="color:#7FBBB3;">Provider</span><span style="color:#A7C080;"> store</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{getStore</span><span style="color:#D3C6AA;">()</span><span style="color:#A7C080;">}&gt;</span></span>
<span class="line"><span style="color:#A7C080;">      &lt;</span><span style="color:#7FBBB3;">StaticRouter</span><span style="color:#A7C080;"> location</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">req</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">path</span><span style="color:#A7C080;">}</span><span style="color:#A7C080;"> context</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">{}</span><span style="color:#A7C080;">}&gt;</span></span>
<span class="line"><span style="color:#A7C080;">        {</span><span style="color:#D3C6AA;">Routes</span><span style="color:#A7C080;">}</span></span>
<span class="line"><span style="color:#A7C080;">      &lt;/</span><span style="color:#7FBBB3;">StaticRouter</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;/</span><span style="color:#7FBBB3;">Provider</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">  );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#DBBC7F;"> \`</span></span>
<span class="line"><span style="color:#DBBC7F;">    &lt;html&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">      &lt;head&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">        &lt;title&gt;ssr&lt;/title&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">      &lt;/head&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">      &lt;body&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">        &lt;div id=&quot;root&quot;&gt;</span><span style="color:#A7C080;">\${</span><span style="color:#D3C6AA;">content</span><span style="color:#A7C080;">}</span><span style="color:#DBBC7F;">&lt;/div&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">        &lt;script src=&#39;/index.js&#39;&gt;&lt;/script&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">      &lt;/body&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">    &lt;/html&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">\`</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h3 id="构建-redux-代码结构" tabindex="-1">构建 Redux 代码结构 <a class="header-anchor" href="#构建-redux-代码结构" aria-label="Permalink to &quot;构建 Redux 代码结构&quot;">​</a></h3><p>省略... 优化 redux 的工程目录。</p><p><strong>流程回顾：</strong></p><ol><li><p>服务器接收到请求，这个时候 store 是空的</p></li><li><p>服务器端不会执行 componentDidMount，所以列表内容获取不到</p></li><li><p>客户端代码运行，这个时候 store 依然是空的</p></li><li><p>客户端执行 componentDidMount，列表数据被获取</p></li><li><p>store 中的列表数据被更新</p></li><li><p>客户端渲染出 store 中 list 数据对应的列表内容</p></li></ol><p><strong>componentDidMount 只会在客户端上执行，在服务端上不会执行</strong>。所以页面的列表内容都是客户端渲染出来的。</p><p>接下来我们要让服务器端也能预先执行去获取数据，进行服务器端渲染，直接把获取到数据的页面返回来。</p><h3 id="异步数据服务器渲染-loaddata-方法及路由重构" tabindex="-1">异步数据服务器渲染：loadData 方法及路由重构 <a class="header-anchor" href="#异步数据服务器渲染-loaddata-方法及路由重构" aria-label="Permalink to &quot;异步数据服务器渲染：loadData 方法及路由重构&quot;">​</a></h3><p>文档：<a href="https://reacttraining.com/react-router/web/guides/server-rendering" target="_blank" rel="noreferrer">https://reacttraining.com/react-router/web/guides/server-rendering</a></p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/server/utils.js</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> getStore </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;../store&#39;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 服务器端：在这里拿到异步的数据并填充到store，就可以在服务端渲染时有数据直接渲染</span></span>
<span class="line highlighted"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> store </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> getStore</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E69875;"> const</span><span style="color:#A7C080;"> render</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> (req) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> content </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> renderToString</span><span style="color:#D3C6AA;">((</span></span>
<span class="line highlighted"><span style="color:#A7C080;">    &lt;</span><span style="color:#7FBBB3;">Provider</span><span style="color:#A7C080;"> store</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">store</span><span style="color:#A7C080;">}&gt;</span></span>
<span class="line"><span style="color:#A7C080;">      &lt;</span><span style="color:#7FBBB3;">StaticRouter</span><span style="color:#A7C080;"> location</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">req</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">path</span><span style="color:#A7C080;">}</span><span style="color:#A7C080;"> context</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">{}</span><span style="color:#A7C080;">}&gt;</span></span>
<span class="line"><span style="color:#A7C080;">        {</span><span style="color:#D3C6AA;">Routes</span><span style="color:#A7C080;">}</span></span>
<span class="line"><span style="color:#A7C080;">      &lt;/</span><span style="color:#7FBBB3;">StaticRouter</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;/</span><span style="color:#7FBBB3;">Provider</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">  ));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#DBBC7F;"> \`</span></span>
<span class="line"><span style="color:#DBBC7F;">    &lt;html&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">      &lt;head&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">        &lt;title&gt;ssr&lt;/title&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">      &lt;/head&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">      &lt;body&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">        &lt;div id=&quot;root&quot;&gt;</span><span style="color:#A7C080;">\${</span><span style="color:#D3C6AA;">content</span><span style="color:#A7C080;">}</span><span style="color:#DBBC7F;">&lt;/div&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">        &lt;script src=&#39;/index.js&#39;&gt;&lt;/script&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">      &lt;/body&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">    &lt;/html&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">  \`</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>想实现服务端渲染异步数据，那需要在服务端渲染前拿到异步数据。</p><p>store 里填充的是什么，我们需要结合当前用户请求的地址+路由来做判断。</p><p>如果用户访问 / 路径，我们就拿 / 路径对应的 Home 组件的异步数据给 store。</p><p>如果用户访问 /login 路径，我们就拿 /login 路径对应的 Loging 组件的异步数据给 store。</p><p><strong>第一步，在服务端渲染前，我们可以根据路由的不同来获取该路由所对应组件的异步数据，例如 Home 组件，loadData 方法用于获取该组件相关的数据。</strong></p><p><strong>第二步，获取到组件相关数据后，填充到 store 中，然后进行服务器端渲染。</strong></p><p>我们先来做第一步的内容。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/containers/Home/index.js</span></span>
<span class="line"><span style="color:#E67E80;">class</span><span style="color:#7FBBB3;"> Home</span><span style="color:#E69875;"> extends</span><span style="color:#7FBBB3;"> Component</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#D3C6AA;">Home</span><span style="color:#859289;">.</span><span style="color:#A7C080;">loadData</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 这个函数，负责在服务器端渲染之前，把这个路由需要的数据提前加载好</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>为了实现 根据路由的不同来获取该路由所对应组件的异步数据，我们需要改造路由的写法。</p><p>原来的 server/src/Routes.js</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#83C092;">export</span><span style="color:#E67E80;"> default</span><span style="color:#D3C6AA;"> (</span></span>
<span class="line"><span style="color:#A7C080;">  &lt;</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;</span><span style="color:#7FBBB3;">Route</span><span style="color:#A7C080;"> path</span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;">&quot;/&quot;</span><span style="color:#A7C080;"> exact</span><span style="color:#A7C080;"> component</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">Home</span><span style="color:#A7C080;">}</span><span style="color:#A7C080;"> /&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;</span><span style="color:#7FBBB3;">Route</span><span style="color:#A7C080;"> path</span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;">&quot;/login&quot;</span><span style="color:#A7C080;"> exact</span><span style="color:#A7C080;"> component</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">Login</span><span style="color:#A7C080;">}</span><span style="color:#A7C080;"> /&gt;</span></span>
<span class="line"><span style="color:#A7C080;">  &lt;/</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>react-router 提供了服务器端渲染所需方法，这时候Routes.js需要返回一个数组，里面的一个个对象对应着一个个路由。</p><p>改写后的 server/src/Routes.js</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// 当我加载显示HOME组件之前，我希望调用Home.loadData方法，提前获取到必要的异步数据</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 然后再做服务器端渲染，把页面返回给用户</span></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E67E80;"> default</span><span style="color:#D3C6AA;"> [</span></span>
<span class="line"><span style="color:#D3C6AA;">  {</span></span>
<span class="line"><span style="color:#D3C6AA;">    path</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;/&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">    component</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> Home,</span></span>
<span class="line"><span style="color:#D3C6AA;">    exact</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> true</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // 加载 Home 之前要执行的方法</span></span>
<span class="line"><span style="color:#D3C6AA;">    loadData</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> Home</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">loadData,</span></span>
<span class="line"><span style="color:#D3C6AA;">    key</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;home&quot;</span></span>
<span class="line"><span style="color:#D3C6AA;">  },</span></span>
<span class="line"><span style="color:#D3C6AA;">  {</span></span>
<span class="line"><span style="color:#D3C6AA;">    path</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;/login&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">    component</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> Login,</span></span>
<span class="line"><span style="color:#D3C6AA;">    exact</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> true</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">    key</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;login&quot;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>当加载显示 HOME 组件之前，我们希望调用 Home.loadData 方法，提前获取到必要的异步数据。然后再做服务器端渲染，把页面返回给用户。</p><p>与之对应的还要去修改引用了路由的地方(因为原来返回 Route 对象，现在只返回了一个数组)。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/client/index.js</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> routes </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;../Routes&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#A7C080;"> App</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> (</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;</span><span style="color:#7FBBB3;">Provider</span><span style="color:#A7C080;"> store</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{getStore</span><span style="color:#D3C6AA;">()</span><span style="color:#A7C080;">}&gt;</span></span>
<span class="line"><span style="color:#A7C080;">      &lt;</span><span style="color:#7FBBB3;">BrowserRouter</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">        &lt;</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">          {</span><span style="color:#859289;font-style:italic;">/*遍历生成新的Route组件*/</span><span style="color:#A7C080;">}</span></span>
<span class="line"><span style="color:#A7C080;">          {</span><span style="color:#D3C6AA;">routes</span><span style="color:#859289;">.</span><span style="color:#A7C080;">map</span><span style="color:#D3C6AA;">(route </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> (</span></span>
<span class="line highlighted"><span style="color:#A7C080;">            &lt;</span><span style="color:#7FBBB3;">Route</span><span style="color:#A7C080;"> {</span><span style="color:#E69875;">...</span><span style="color:#D3C6AA;">route</span><span style="color:#A7C080;">}</span><span style="color:#A7C080;"> /&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">          ))</span><span style="color:#A7C080;">}</span></span>
<span class="line"><span style="color:#A7C080;">        &lt;/</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">      &lt;/</span><span style="color:#7FBBB3;">BrowserRouter</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;/</span><span style="color:#7FBBB3;">Provider</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">  );</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p><strong>server/src/server/utils.js 同理。</strong></p><p>然后我们去修改服务器端渲染前的文件，使其能获取到用户当前访问的地址+路由。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/server/utils.js</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { StaticRouter, Route, matchPath } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react-router-dom&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> routes </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;../Routes&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> getStore </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;../store&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E69875;"> const</span><span style="color:#A7C080;"> render</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> req </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 服务器端：在这里拿到异步的数据并填充到store，就可以在服务器端渲染时有数据一块渲染</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> store </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> getStore</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 根据路由的路径，来往store里面加数据</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> matchRoutes </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [];</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // use &#39;some&#39; to imitate &#39;&lt;Switch&gt;&#39; behavior of selecting only</span></span>
<span class="line"><span style="color:#D3C6AA;">  routes</span><span style="color:#859289;">.</span><span style="color:#A7C080;">some</span><span style="color:#D3C6AA;">(route </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // matchPath: 当前路径req.path和route对象是否匹配，匹配返回true</span></span>
<span class="line highlighted"><span style="color:#E69875;">    const</span><span style="color:#D3C6AA;"> match </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> matchPath</span><span style="color:#D3C6AA;">(req</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">path, route);</span></span>
<span class="line"><span style="color:#E67E80;">    if</span><span style="color:#D3C6AA;"> (match) {</span></span>
<span class="line"><span style="color:#D3C6AA;">      matchRoutes</span><span style="color:#859289;">.</span><span style="color:#A7C080;">push</span><span style="color:#D3C6AA;">(route);</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">  });</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>react router 提供了 matchPath 方法，可以将当前路径和 route 对象进行匹配，匹配上则返回 true。</p><p>The <strong>some()</strong> method tests whether at least one element in the array passes the test implemented by the provided function.</p><p>假如我们访问的是根路径，打印输出 matchRoutes 数组，可以看到一个匹配上的 route 对象： <img src="`+u+`" alt="console_1"></p><p>这样便可以知道用户访问的是哪个路由组件，<strong>从而可以执行它的 loadData 方法，加载数据。</strong></p><h3 id="多级路由问题的处理" tabindex="-1">多级路由问题的处理 <a class="header-anchor" href="#多级路由问题的处理" aria-label="Permalink to &quot;多级路由问题的处理&quot;">​</a></h3><p>matchPath 有个缺陷，不能捕获多级路由。</p><p>这时候我们可以借助 react-router-config 这个库的 matchRoutes 方法来代替。</p><p>文档：<a href="https://github.com/ReactTraining/react-router/tree/master/packages/react-router-config" target="_blank" rel="noreferrer">https://github.com/ReactTraining/react-router/tree/master/packages/react-router-config</a></p><p>假设我们在 <code>/</code> 下新增一个子路由 <code>/subHome</code>：</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">{</span></span>
<span class="line"><span style="color:#83C092;">  path</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;/&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#83C092;">    component</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> Home,</span></span>
<span class="line"><span style="color:#83C092;">    loadData</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> Home</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">loadData,</span></span>
<span class="line"><span style="color:#83C092;">    key</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;home&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#83C092;">    routes</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;">[</span></span>
<span class="line"><span style="color:#D3C6AA;">      {</span></span>
<span class="line"><span style="color:#D3C6AA;">        path</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;/subHome&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">          component</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> Login,</span></span>
<span class="line"><span style="color:#D3C6AA;">          exact</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> true</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">          key</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;subHome&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">        }</span></span>
<span class="line"><span style="color:#D3C6AA;">    ]</span></span>
<span class="line"><span style="color:#D3C6AA;">},</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>我们使用 matchRoutes 代替 matchPath，之前的写法可以简化。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/server/utils.js</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { matchRoutes } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;react-router-config&#39;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> routes </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;../Routes&#39;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> getStore </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;../store&#39;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E69875;"> const</span><span style="color:#A7C080;"> render</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> (req) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">	// 服务器端：在这里拿到异步的数据并填充到store，就可以在服务器端渲染时有数据一块渲染</span></span>
<span class="line"><span style="color:#E69875;">	const</span><span style="color:#D3C6AA;"> store </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> getStore</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">	// 根据路由的路径，来往store里面加数据</span></span>
<span class="line highlighted"><span style="color:#E69875;">	const</span><span style="color:#D3C6AA;"> matchedRoutes </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> matchRoutes</span><span style="color:#D3C6AA;">(routes, req</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">path);</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>访问/subHome 路径，打印输出 matchdRoutes，可以看到 子 route 对象也显示出来了。 <img src="`+m+`" alt="console_2"></p><p>下面我们来根据用户访问的路由组件，执行它的 loadData 方法，加载数据。</p><h3 id="服务器端获取异步数据-渲染后返回给浏览器" tabindex="-1">服务器端获取异步数据，渲染后返回给浏览器 <a class="header-anchor" href="#服务器端获取异步数据-渲染后返回给浏览器" aria-label="Permalink to &quot;服务器端获取异步数据，渲染后返回给浏览器&quot;">​</a></h3><p>遍历 matchedRoutes 数组，可以看到里面各个路径对应的路由信息，假如 matchedRoutes 数组的其中的数据项里有 loadData 方法，说明是需要预加载数据的组件。所以执行它的 loadData 方法，把数据异步加载返回，塞到 promises 数组里。等到所有的异步数据都加载好后，再 res.send 返回 render 函数中渲染的所有内容给浏览器。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/server/index.js</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> express </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;express&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { matchRoutes } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react-router-config&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { render } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;./utils&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> getStore </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;../store&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> routes </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;../Routes&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> app </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> express</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#D3C6AA;">app</span><span style="color:#859289;">.</span><span style="color:#A7C080;">use</span><span style="color:#D3C6AA;">(express</span><span style="color:#859289;">.</span><span style="color:#A7C080;">static</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;public&quot;</span><span style="color:#D3C6AA;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">app</span><span style="color:#859289;">.</span><span style="color:#A7C080;">get</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;*&quot;</span><span style="color:#D3C6AA;">, </span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">(req,</span><span style="color:#D3C6AA;"> res)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 服务器端：在这里拿到异步的数据并填充到store，就可以在服务器端渲染时有数据一块渲染</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> store</span><span style="color:#E69875;"> =</span><span style="color:#A7C080;"> getStore</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 根据路由的路径，来往store里面加数据</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> matchedRoutes</span><span style="color:#E69875;"> =</span><span style="color:#A7C080;"> matchRoutes</span><span style="color:#D3C6AA;">(routes,</span><span style="color:#D3C6AA;"> req</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">path);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 用于管理多个promise 请求的执行结果</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> promises</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">  matchedRoutes</span><span style="color:#859289;">.</span><span style="color:#A7C080;">forEach</span><span style="color:#D3C6AA;">(item</span><span style="color:#E69875;"> =&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line highlighted"><span style="color:#859289;font-style:italic;">    // 让matchRoutes里面所有的组件，对应的loadData方法执行一次</span></span>
<span class="line highlighted"><span style="color:#E67E80;">    if</span><span style="color:#D3C6AA;"> (item</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">route</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">loadData)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line highlighted"><span style="color:#859289;font-style:italic;">      // item.route.loadData() 用于获取异步数据</span></span>
<span class="line highlighted"><span style="color:#D3C6AA;">      promises</span><span style="color:#859289;">.</span><span style="color:#A7C080;">push</span><span style="color:#D3C6AA;">(item</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">route</span><span style="color:#859289;">.</span><span style="color:#A7C080;">loadData</span><span style="color:#D3C6AA;">(store));</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">  });</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 所有异步数据都获取到后，再服务端渲染页面</span></span>
<span class="line"><span style="color:#7FBBB3;">  Promise</span><span style="color:#859289;">.</span><span style="color:#A7C080;">all</span><span style="color:#D3C6AA;">(promises)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(()</span><span style="color:#E69875;"> =&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    res</span><span style="color:#859289;">.</span><span style="color:#A7C080;">send</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">render</span><span style="color:#D3C6AA;">(store,</span><span style="color:#D3C6AA;"> routes,</span><span style="color:#D3C6AA;"> req));</span></span>
<span class="line"><span style="color:#D3C6AA;">  });</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> server </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> app</span><span style="color:#859289;">.</span><span style="color:#A7C080;">listen</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">3000</span><span style="color:#D3C6AA;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/server/utils.js</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> React </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { renderToString } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react-dom/server&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { StaticRouter, Route } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react-router-dom&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { Provider } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react-redux&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E69875;"> const</span><span style="color:#A7C080;"> render</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> (store, routes, req) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> content </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> renderToString</span><span style="color:#D3C6AA;">(</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;</span><span style="color:#7FBBB3;">Provider</span><span style="color:#A7C080;"> store</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">store</span><span style="color:#A7C080;">}&gt;</span></span>
<span class="line"><span style="color:#A7C080;">      &lt;</span><span style="color:#7FBBB3;">StaticRouter</span><span style="color:#A7C080;"> location</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">req</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">path</span><span style="color:#A7C080;">}</span><span style="color:#A7C080;"> context</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">{}</span><span style="color:#A7C080;">}&gt;</span></span>
<span class="line"><span style="color:#A7C080;">        &lt;</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">          {</span><span style="color:#D3C6AA;">routes</span><span style="color:#859289;">.</span><span style="color:#A7C080;">map</span><span style="color:#D3C6AA;">(route </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> (</span></span>
<span class="line"><span style="color:#A7C080;">            &lt;</span><span style="color:#7FBBB3;">Route</span><span style="color:#A7C080;"> {</span><span style="color:#E69875;">...</span><span style="color:#D3C6AA;">route</span><span style="color:#A7C080;">}</span><span style="color:#A7C080;"> /&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">          ))</span><span style="color:#A7C080;">}</span></span>
<span class="line"><span style="color:#A7C080;">        &lt;/</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">      &lt;/</span><span style="color:#7FBBB3;">StaticRouter</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;/</span><span style="color:#7FBBB3;">Provider</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">  );</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#DBBC7F;"> \`</span></span>
<span class="line"><span style="color:#DBBC7F;">	&lt;html&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">		&lt;head&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">			&lt;title&gt;ssr&lt;/title&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">		&lt;/head&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">		&lt;body&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">			&lt;div id=&quot;root&quot;&gt;</span><span style="color:#A7C080;">\${</span><span style="color:#D3C6AA;">content</span><span style="color:#A7C080;">}</span><span style="color:#DBBC7F;">&lt;/div&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">			&lt;script src=&#39;/index.js&#39;&gt;&lt;/script&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">		&lt;/body&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">	&lt;/html&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">	\`</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p>执行组件对应的 loadData 方法，把数据异步加载返回。这里涉及到比较深入的 Promise 执行过程。可以看代码进行理解。例如下面的</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/containers/Home/store/actions.js</span></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E69875;"> const</span><span style="color:#A7C080;"> getHomeList</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> dispatch </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line highlighted"><span style="color:#859289;font-style:italic;">    // return 一个Promise 对象，一级级往上传</span></span>
<span class="line highlighted"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> axios</span></span>
<span class="line highlighted"><span style="color:#859289;">      .</span><span style="color:#A7C080;">get</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;http://47.95.113.63/ssr/api/news.json?secret=abcd&quot;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line highlighted"><span style="color:#859289;">      .</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(res </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line highlighted"><span style="color:#E69875;">        const</span><span style="color:#D3C6AA;"> list </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> res</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">data</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">data;</span></span>
<span class="line highlighted"><span style="color:#A7C080;">        dispatch</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">changeList</span><span style="color:#D3C6AA;">(list));</span></span>
<span class="line highlighted"><span style="color:#D3C6AA;">      });</span></span>
<span class="line"><span style="color:#D3C6AA;">  };</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/containers/Home/index.js</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { connect } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react-redux&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { getHomeList } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;./store/actions&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">class</span><span style="color:#7FBBB3;"> Home</span><span style="color:#E69875;"> extends</span><span style="color:#7FBBB3;"> Component</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#A7C080;">  render</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // ...</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#A7C080;">  componentDidMount</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // 这里只有在客户端渲染才执行</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // 从mapDispatchToProps里来的getHomeList()</span></span>
<span class="line"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">props</span><span style="color:#859289;">.</span><span style="color:#A7C080;">getHomeList</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#D3C6AA;">Home</span><span style="color:#859289;">.</span><span style="color:#A7C080;">loadData</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> store </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line highlighted"><span style="color:#859289;font-style:italic;">  // 这个函数，负责在服务器端渲染之前，把这个路由需要的数据提前加载好</span></span>
<span class="line highlighted"><span style="color:#859289;font-style:italic;">  // 传一个store值给它是为了使之可以dispatch</span></span>
<span class="line highlighted"><span style="color:#859289;font-style:italic;">  // store.dispatch这个函数的目的是中间件处理，到actions的getHomeList()方法里具体处理它的派发内容</span></span>
<span class="line highlighted"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> store</span><span style="color:#859289;">.</span><span style="color:#A7C080;">dispatch</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">getHomeList</span><span style="color:#D3C6AA;">());</span></span>
<span class="line highlighted"><span style="color:#D3C6AA;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#A7C080;"> mapStateToProps</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> state </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> ({</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#A7C080;"> mapDispatchToProps</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> dispatch </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> ({</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 这里是给客户端渲染时使用</span></span>
<span class="line"><span style="color:#A7C080;">  getHomeList</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#A7C080;">    dispatch</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">getHomeList</span><span style="color:#D3C6AA;">());</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E67E80;"> default</span><span style="color:#A7C080;"> connect</span><span style="color:#D3C6AA;">(</span></span>
<span class="line"><span style="color:#D3C6AA;">  mapStateToProps,</span></span>
<span class="line"><span style="color:#D3C6AA;">  mapDispatchToProps</span></span>
<span class="line"><span style="color:#D3C6AA;">)(Home);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><p>(多提一句，在 Home.loadData 里，因为它是服务端渲染时去调用 store.dispatch(getHomeList)，处理的是服务端的 Store，并不在客户端处理。所以在 react-redux 中的 connect 方法对应的 mapDispatchToProps 是不需要声明就能使用 getHomeList 方法的)</p><p>这时候服务端返回的数据里，就有了渲染好的数据。 <img src="`+d+`" alt="source_3"></p><h3 id="数据的注水和脱水" tabindex="-1">数据的注水和脱水 <a class="header-anchor" href="#数据的注水和脱水" aria-label="Permalink to &quot;数据的注水和脱水&quot;">​</a></h3><p>为什么要注水和脱水？</p><p>在访问首页 <code>/</code> 的时候，放慢网速我们会发现先白屏，然后才出现了内容。</p><p>原因是什么呢？</p><p>尽管服务端已经把首页的内容都渲染好了才返回，但是因为在客户端中，Home 组件的生命周期函数 componentDidMount 会执行一次，于是它便会重新执行方法向后台请求数据，然后重新执行了一次客户端渲染，把数据内容填充到页面上。</p><p>这造成了网络请求的浪费，损耗性能。</p><p>既然我们已经在服务端已经请求过了数据，那在客户端渲染时，就应该直接使用服务端请求好的数据，注入到客户端渲染中的 state。这个就叫做<strong>注水</strong>。</p><p>例如，在返回的页面内容 window.context 下，注入服务端获取到的 store 的数据内容：</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/server/utils.js</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#E67E80;">return</span><span style="color:#DBBC7F;"> \`</span></span>
<span class="line"><span style="color:#DBBC7F;">  &lt;html&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">    &lt;head&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">      &lt;title&gt;ssr&lt;/title&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">    &lt;/head&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">    &lt;body&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">      &lt;div id=&quot;root&quot;&gt;</span><span style="color:#A7C080;">\${</span><span style="color:#D3C6AA;">content</span><span style="color:#A7C080;">}</span><span style="color:#DBBC7F;">&lt;/div&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">      &lt;script&gt;</span></span>
<span class="line highlighted"><span style="color:#DBBC7F;">        window.context = {</span></span>
<span class="line highlighted"><span style="color:#DBBC7F;">          state: </span><span style="color:#A7C080;">\${</span><span style="color:#D3C6AA;">JSON</span><span style="color:#859289;">.</span><span style="color:#A7C080;">stringify</span><span style="color:#D3C6AA;">(store</span><span style="color:#859289;">.</span><span style="color:#A7C080;">getState</span><span style="color:#D3C6AA;">())</span><span style="color:#A7C080;">}</span></span>
<span class="line highlighted"><span style="color:#DBBC7F;">        }</span></span>
<span class="line"><span style="color:#DBBC7F;">      &lt;/script&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">      &lt;script src=&#39;/index.js&#39;&gt;&lt;/script&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">    &lt;/body&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">  &lt;/html&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">\`</span><span style="color:#D3C6AA;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>服务端返回的页面里可见 window.context 下的内容。 <img src="`+D+`" alt="source_4"></p><p>在客户端拿到服务端给的数据直接使用，而不重新去请求数据，这个使用服务端给的数据的过程就是<strong>脱水</strong>。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/store/index.js</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { createStore, applyMiddleware, combineReducers } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;redux&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> thunk </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;redux-thunk&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { reducer </span><span style="color:#E67E80;">as</span><span style="color:#D3C6AA;"> homeReducer } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;../containers/Home/store&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> reducer </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> combineReducers</span><span style="color:#D3C6AA;">({</span></span>
<span class="line"><span style="color:#D3C6AA;">  home</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> homeReducer</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 服务端渲染时创建 store 的方法</span></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E69875;"> const</span><span style="color:#A7C080;"> getStore</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#A7C080;"> createStore</span><span style="color:#D3C6AA;">(reducer, </span><span style="color:#A7C080;">applyMiddleware</span><span style="color:#D3C6AA;">(thunk));</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 客户端渲染时创建 store 的方法</span></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E69875;"> const</span><span style="color:#A7C080;"> getClientStore</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line highlighted"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> defaultState </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> window</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">context</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">state;</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // createStore的第二个参数是默认的初始值</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#A7C080;"> createStore</span><span style="color:#D3C6AA;">(reducer, defaultState, </span><span style="color:#A7C080;">applyMiddleware</span><span style="color:#D3C6AA;">(thunk));</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>然后在客户端渲染这边更变获取 store 的方法：</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/client/index.js</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { Provider } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react-redux&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { getClientStore } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;../store&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> store </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> getClientStore</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#A7C080;"> App</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> (</span></span>
<span class="line highlighted"><span style="color:#A7C080;">    &lt;</span><span style="color:#7FBBB3;">Provider</span><span style="color:#A7C080;"> store</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">store</span><span style="color:#A7C080;">}&gt;</span></span>
<span class="line"><span style="color:#A7C080;">      &lt;</span><span style="color:#7FBBB3;">BrowserRouter</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">// ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>然后在客户端执行的是 getClientStore 方法，因为在客户端渲染的时候，window.context.state 已经是有内容的了，所以可以直接取到服务端注水时提供的数据。放到 createStore 的第二个参数传入。</p><p>这样就可以使得客户端直接使用服务端渲染好的数据。</p><h3 id="优化" tabindex="-1">优化 <a class="header-anchor" href="#优化" aria-label="Permalink to &quot;优化&quot;">​</a></h3><p>但是看网络请求，因为 componentDidMount 的存在，哪怕客户端渲染时直接使用服务端返回的数据，也会发送请求。所以我们要判断，假如服务端已经返回数据了，客户端就不请求数据。 <img src="`+g+'" alt="code_1"></p><p>最后要重申一次的是，服务端渲染只是第一次访问页面时才有用，之后的页面就完全交给了客户端渲染。所以 componentDidMount 的存在是很有必要的，它在服务端没有返回数据的时候，客户端自己有能力去请求数据。</p><h2 id="使用-node-作为数据获取中间层" tabindex="-1">使用 Node 作为数据获取中间层 <a class="header-anchor" href="#使用-node-作为数据获取中间层" aria-label="Permalink to &quot;使用 Node 作为数据获取中间层&quot;">​</a></h2><p><img src="'+h+`" alt="node_1"> 既然引入了中间层，那客户端就不能直接去和后台请求数据，必须通过 Node 层。</p><h3 id="使用-proxy-代理-让中间层承担数据获取职责" tabindex="-1">使用 proxy 代理，让中间层承担数据获取职责 <a class="header-anchor" href="#使用-proxy-代理-让中间层承担数据获取职责" aria-label="Permalink to &quot;使用 proxy 代理，让中间层承担数据获取职责&quot;">​</a></h3><p>之前客户端请求数据的时候直接向后台请求了，是不规范的操作，应该客户端先走 node 中间层，再由中间层做数据请求。</p><p>我们可以使用 Proxy 做代理去解决。这里用的是 express，可以借用第三方库 express-http-proxy 来做。</p><p>文档：<a href="https://github.com/villadora/express-http-proxy" target="_blank" rel="noreferrer">https://github.com/villadora/express-http-proxy</a></p><p>例如我们想请求的完整地址是 <a href="http://47.95.113.63/ssr/api/news.json?secret=M5s2sPneDE" target="_blank" rel="noreferrer">http://47.95.113.63/ssr/api/news.json?secret=M5s2sPneDE</a></p><p>代理地址，把本地 localhost 请求代理到 <a href="http://47.95.113.63/" target="_blank" rel="noreferrer">http://47.95.113.63/</a></p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/server/index.js</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 代理：当请求地址为 /api 时，执行代理</span></span>
<span class="line"><span style="color:#D3C6AA;">app</span><span style="color:#859289;">.</span><span style="color:#A7C080;">use</span><span style="color:#D3C6AA;">(</span></span>
<span class="line"><span style="color:#DBBC7F;">  &quot;/api&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#A7C080;">  proxy</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;http://47.95.113.63&quot;</span><span style="color:#D3C6AA;">, {</span></span>
<span class="line"><span style="color:#A7C080;">    proxyReqPathResolver</span><span style="color:#859289;">:</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">(req)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">      // req.url : /news.json?secret=M5s2sPneDE</span></span>
<span class="line"><span style="color:#E67E80;">      return</span><span style="color:#DBBC7F;"> &quot;/ssr/api&quot;</span><span style="color:#E69875;"> +</span><span style="color:#D3C6AA;"> req</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">url;</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>再更改 axios 的请求地址。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/containers/Home/store/actions.js</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E69875;"> const</span><span style="color:#A7C080;"> getHomeList</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> dispatch </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> (</span></span>
<span class="line"><span style="color:#D3C6AA;">      axios</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">        // get(&quot;http://47.95.113.63/ssr/api/news.json?secret=abcd&quot;)</span></span>
<span class="line"><span style="color:#859289;">        .</span><span style="color:#A7C080;">get</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;/api/news.json?secret=abcd&quot;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#859289;">        .</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(res </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">          const</span><span style="color:#D3C6AA;"> list </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> res</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">data</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">data;</span></span>
<span class="line"><span style="color:#A7C080;">          dispatch</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">changeList</span><span style="color:#D3C6AA;">(list));</span></span>
<span class="line"><span style="color:#D3C6AA;">        })</span></span>
<span class="line"><span style="color:#D3C6AA;">    );</span></span>
<span class="line"><span style="color:#D3C6AA;">  };</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>代理成功。 <img src="`+B+'" alt="network_2"></p><p>因为同构的因故，getHomeList 这个获取数据的方法客户端和服务端都会各自执行一次，但是这只能在客户端渲染时请求成功，<strong>服务器渲染时，并没有代理到 <a href="http://47.95.113.63" target="_blank" rel="noreferrer">http://47.95.113.63</a> 这后台地址上，直接访问服务器的根目录是请求不到数据的。</strong></p><p><img src="'+E+`" alt="code_2"></p><p>所以我们需要区分服务器端请求和客户端请求来做代理，服务器端请求不需要代理，而是直接访问后台获取数据。然后再使用 axios 中的 instance 来合理化判断代码。</p><p>文档：<a href="https://github.com/axios/axios#creating-an-instance" target="_blank" rel="noreferrer">https://github.com/axios/axios#creating-an-instance</a></p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/client/request.js</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> axios </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;axios&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> instance </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> axios</span><span style="color:#859289;">.</span><span style="color:#A7C080;">create</span><span style="color:#D3C6AA;">({</span></span>
<span class="line highlighted"><span style="color:#859289;font-style:italic;">  // 客户端请求数据，直接 /</span></span>
<span class="line highlighted"><span style="color:#D3C6AA;">  baseURL</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;/&quot;</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E67E80;"> default</span><span style="color:#D3C6AA;"> instance;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/server/request.js</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> axios </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;axios&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> instance </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> axios</span><span style="color:#859289;">.</span><span style="color:#A7C080;">create</span><span style="color:#D3C6AA;">({</span></span>
<span class="line highlighted"><span style="color:#859289;font-style:italic;">  // 服务端请求数据，直接请求后台地址</span></span>
<span class="line highlighted"><span style="color:#D3C6AA;">  baseURL</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;http://47.95.113.63/ssr&quot;</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E67E80;"> default</span><span style="color:#D3C6AA;"> instance;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>用 axios 创建一个新的 instance 对象并导出，后续分别调用。</p><p>调用获取数据方法时，传一个 boolean 值做标记，以区分是服务端还是客户端在调用这个方法。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/containers/Home/index.js</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#E67E80;">class</span><span style="color:#7FBBB3;"> Home</span><span style="color:#E69875;"> extends</span><span style="color:#7FBBB3;"> Component</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#A7C080;">  render</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // ...</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#A7C080;">  componentDidMount</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#E67E80;">    if</span><span style="color:#D3C6AA;"> (</span><span style="color:#E69875;">!</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">props</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">list</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">length) {</span></span>
<span class="line highlighted"><span style="color:#859289;font-style:italic;">      // 客户端请求数据</span></span>
<span class="line highlighted"><span style="color:#D699B6;">      this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">props</span><span style="color:#859289;">.</span><span style="color:#A7C080;">getHomeList</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">false</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">Home</span><span style="color:#859289;">.</span><span style="color:#A7C080;">loadData</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> store </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line highlighted"><span style="color:#859289;font-style:italic;">  // 服务端请求数据</span></span>
<span class="line highlighted"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> store</span><span style="color:#859289;">.</span><span style="color:#A7C080;">dispatch</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">getHomeList</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">true</span><span style="color:#D3C6AA;">));</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/containers/Home/store/actions.js</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { CHANGE_LIST } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;./constants&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> clientAxios </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;../../../client/request&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> serverAxios </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;../../../server/request&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#A7C080;"> changeList</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> list </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> ({</span></span>
<span class="line"><span style="color:#D3C6AA;">  type</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> CHANGE_LIST,</span></span>
<span class="line"><span style="color:#D3C6AA;">  list</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E69875;"> const</span><span style="color:#A7C080;"> getHomeList</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> server </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line highlighted"><span style="color:#859289;font-style:italic;">  // 根据传入的值来判断是服务端渲染还是客户端渲染</span></span>
<span class="line highlighted"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> request </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> server </span><span style="color:#E69875;">?</span><span style="color:#D3C6AA;"> serverAxios </span><span style="color:#E69875;">:</span><span style="color:#D3C6AA;"> clientAxios;</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> dispatch </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // 用instance 替换原来的axios对象去发送请求</span></span>
<span class="line highlighted"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> request</span><span style="color:#859289;">.</span><span style="color:#A7C080;">get</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;/api/news.json?secret=abcd&quot;</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(res </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> list </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> res</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">data</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">data;</span></span>
<span class="line"><span style="color:#A7C080;">      dispatch</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">changeList</span><span style="color:#D3C6AA;">(list));</span></span>
<span class="line"><span style="color:#D3C6AA;">    });</span></span>
<span class="line"><span style="color:#D3C6AA;">  };</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>是服务端调用则使用它对应的 instance 来发请求，</p><p>是客户端调用则使用它对应的 instance 来发请求。</p><p>这样就可以解决服务端调用并不需要做代理的问题。</p><h3 id="redux-thunk-中的-withextraargument" tabindex="-1">redux-thunk 中的 withExtraArgument <a class="header-anchor" href="#redux-thunk-中的-withextraargument" aria-label="Permalink to &quot;redux-thunk 中的 withExtraArgument&quot;">​</a></h3><p>上面的请求方式有个问题，就是每次调用方法的时候都需要去声明是不是来自 server 的请求，比较繁琐，我们可以从源头去管理区分，这就需要用到 redux-thunk 中的 withExtraArgument 方法。</p><blockquote><p>Redux Thunk supports injecting a custom argument using the <code>withExtraArgument</code> function.（注入一个自定义的对象，然后可以在thunk调用的第三个参数处取出。）</p></blockquote><p>文档：<a href="https://github.com/reduxjs/redux-thunk#injecting-a-custom-argument" target="_blank" rel="noreferrer">https://github.com/reduxjs/redux-thunk#injecting-a-custom-argument</a></p><p><img src="`+v+'" alt="intro_1"></p><p>server/src/store/index.js <img src="'+x+`" alt="code_3"> 按着官方示例改造 thunk 的引用。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/containers/Home/store/actions.js</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E69875;"> const</span><span style="color:#A7C080;"> getHomeList</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line highlighted"><span style="color:#859289;font-style:italic;">  // redux-thunk的第2，3个参数用法出现</span></span>
<span class="line highlighted"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> (dispatch, getState, axiosInstance) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> axiosInstance</span><span style="color:#859289;">.</span><span style="color:#A7C080;">get</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;/api/news.json?secret=abcd&quot;</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(res </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> list </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> res</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">data</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">data;</span></span>
<span class="line"><span style="color:#A7C080;">      dispatch</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">changeList</span><span style="color:#D3C6AA;">(list));</span></span>
<span class="line"><span style="color:#D3C6AA;">    });</span></span>
<span class="line"><span style="color:#D3C6AA;">  };</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>因为 redux-thunk 的作用，执行 getHomeList 方法的第三个参数就是我们传入的 clientAxios/serverAxios 的 instance。</p><h3 id="renderroutes-方法实现对多级路由的支持" tabindex="-1">renderRoutes 方法实现对多级路由的支持 <a class="header-anchor" href="#renderroutes-方法实现对多级路由的支持" aria-label="Permalink to &quot;renderRoutes 方法实现对多级路由的支持&quot;">​</a></h3><p>之前的方式，只能渲染一级路由。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#83C092;">export</span><span style="color:#E69875;"> const</span><span style="color:#A7C080;"> render</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> (store, routes, req) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> content </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> renderToString</span><span style="color:#D3C6AA;">((</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;</span><span style="color:#7FBBB3;">Provider</span><span style="color:#A7C080;"> store</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">store</span><span style="color:#A7C080;">}&gt;</span></span>
<span class="line"><span style="color:#A7C080;">      &lt;</span><span style="color:#7FBBB3;">StaticRouter</span><span style="color:#A7C080;"> location</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">req</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">path</span><span style="color:#A7C080;">}</span><span style="color:#A7C080;"> context</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">{}</span><span style="color:#A7C080;">}&gt;</span></span>
<span class="line"><span style="color:#A7C080;">        &lt;</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line highlighted"><span style="color:#A7C080;">          {</span><span style="color:#859289;font-style:italic;">/*只能渲染一级路由(只有一层 Route)*/</span><span style="color:#A7C080;">}</span></span>
<span class="line highlighted"><span style="color:#A7C080;">          {</span><span style="color:#D3C6AA;">routes</span><span style="color:#859289;">.</span><span style="color:#A7C080;">map</span><span style="color:#D3C6AA;">(route </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> (</span></span>
<span class="line highlighted"><span style="color:#A7C080;">            &lt;</span><span style="color:#7FBBB3;">Route</span><span style="color:#A7C080;"> {</span><span style="color:#E69875;">...</span><span style="color:#D3C6AA;">route</span><span style="color:#A7C080;">}/&gt;</span></span>
<span class="line highlighted"><span style="color:#D3C6AA;">          ))</span><span style="color:#A7C080;">}</span></span>
<span class="line"><span style="color:#A7C080;">        &lt;/</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">      &lt;/</span><span style="color:#7FBBB3;">StaticRouter</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;/</span><span style="color:#7FBBB3;">Provider</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">  ));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>我们改成多级路由后，需要配合 react-router-config 的 renderRoutes 方法来渲染多级路由。</p><p>文档：<a href="https://github.com/ReactTraining/react-router/tree/master/packages/react-router-config#renderroutesroutes-extraprops---switchprops--" target="_blank" rel="noreferrer">https://github.com/ReactTraining/react-router/tree/master/packages/react-router-config#renderroutesroutes-extraprops---switchprops--</a></p><p>路由文件： server/src/Routes.js <img src="`+f+`" alt="code_4"></p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/server/utils.js</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { StaticRouter } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react-router-dom&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { renderRoutes } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react-router-config&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E69875;"> const</span><span style="color:#A7C080;"> render</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> (store, routes, req) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> content </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> renderToString</span><span style="color:#D3C6AA;">(</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;</span><span style="color:#7FBBB3;">Provider</span><span style="color:#A7C080;"> store</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">store</span><span style="color:#A7C080;">}&gt;</span></span>
<span class="line"><span style="color:#A7C080;">      &lt;</span><span style="color:#7FBBB3;">StaticRouter</span><span style="color:#A7C080;"> location</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">req</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">path</span><span style="color:#A7C080;">}</span><span style="color:#A7C080;"> context</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">{}</span><span style="color:#A7C080;">}&gt;</span></span>
<span class="line highlighted"><span style="color:#A7C080;">        {</span><span style="color:#859289;font-style:italic;">/*这里渲染一级路由那一层的东西*/</span><span style="color:#A7C080;">}</span></span>
<span class="line highlighted"><span style="color:#A7C080;">        {renderRoutes</span><span style="color:#D3C6AA;">(routes)</span><span style="color:#A7C080;">}</span></span>
<span class="line"><span style="color:#A7C080;">      &lt;/</span><span style="color:#7FBBB3;">StaticRouter</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;/</span><span style="color:#7FBBB3;">Provider</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">  );</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/client/index.js</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { BrowserRouter } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react-router-dom&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { renderRoutes } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react-router-config&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> routes </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;../Routes&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> store </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> getClientStore</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#A7C080;"> App</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> (</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;</span><span style="color:#7FBBB3;">Provider</span><span style="color:#A7C080;"> store</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">store</span><span style="color:#A7C080;">}&gt;</span></span>
<span class="line"><span style="color:#A7C080;">      &lt;</span><span style="color:#7FBBB3;">BrowserRouter</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line highlighted"><span style="color:#A7C080;">        {</span><span style="color:#859289;font-style:italic;">/*这里之渲染一级路由，不需要把二级路由的信息传给renderRoutes*/</span><span style="color:#A7C080;">}</span></span>
<span class="line highlighted"><span style="color:#A7C080;">        {renderRoutes</span><span style="color:#D3C6AA;">(routes)</span><span style="color:#A7C080;">}</span></span>
<span class="line"><span style="color:#A7C080;">      &lt;/</span><span style="color:#7FBBB3;">BrowserRouter</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;/</span><span style="color:#7FBBB3;">Provider</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">  );</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>服务端和客户端的一级路由只需要 renderRoutes 最外层路由信息就可以。</p><p>App 组件是一级路由显示的组件，props 会接受到传过来的路由信息对象，在这里去渲染二级路由。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/App.js</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> React </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> Header </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;./components/Header&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { renderRoutes } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react-router-config&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#A7C080;"> App</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> props </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> (</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">      &lt;</span><span style="color:#7FBBB3;">Header</span><span style="color:#A7C080;"> /&gt;</span></span>
<span class="line highlighted"><span style="color:#A7C080;">      {</span><span style="color:#859289;font-style:italic;">/*渲染二级路由*/</span><span style="color:#A7C080;">}</span></span>
<span class="line highlighted"><span style="color:#A7C080;">      {renderRoutes</span><span style="color:#D3C6AA;">(props</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">route</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">routes)</span><span style="color:#A7C080;">}</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;/</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">  );</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E67E80;"> default</span><span style="color:#D3C6AA;"> App;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p><strong>一级路由对应的就是 App 组件，所以需要在这个组件里去渲染二级路由。这时候就需要 renderRoutes 第二层路由信息。</strong></p><p>（在其他组件共用的 Header，可以放在这里，只要访问了 / 根路径，Header 组件总会出现。）</p><p>打印输出 props.route.routes，其实就是二级路由的对象信息。 <img src="`+q+`" alt="console_3"></p><p>配合使用 renderRoutes 方法就这样既可实现多级路由渲染。</p><h3 id="登陆功能" tabindex="-1">登陆功能 <a class="header-anchor" href="#登陆功能" aria-label="Permalink to &quot;登陆功能&quot;">​</a></h3><p>根据 login 的值显示不同的内容：</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/components/Header/index.js</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#E67E80;">return</span><span style="color:#D3C6AA;"> (</span></span>
<span class="line"><span style="color:#A7C080;">  &lt;</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;</span><span style="color:#7FBBB3;">Link</span><span style="color:#A7C080;"> to</span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;">&quot;/&quot;</span><span style="color:#A7C080;">&gt;</span><span style="color:#D3C6AA;">首页</span><span style="color:#A7C080;">&lt;/</span><span style="color:#7FBBB3;">Link</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;</span><span style="color:#E69875;">br</span><span style="color:#A7C080;"> /&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    {</span><span style="color:#859289;font-style:italic;">/*根据login的值显示不同的内容*/</span><span style="color:#A7C080;">}</span></span>
<span class="line"><span style="color:#A7C080;">    {</span><span style="color:#D3C6AA;">login </span><span style="color:#E69875;">?</span><span style="color:#D3C6AA;"> (</span></span>
<span class="line highlighted"><span style="color:#A7C080;">      &lt;</span><span style="color:#7FBBB3;">Fragment</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line highlighted"><span style="color:#A7C080;">        &lt;</span><span style="color:#7FBBB3;">Link</span><span style="color:#A7C080;"> to</span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;">&quot;/login&quot;</span><span style="color:#A7C080;">&gt;</span><span style="color:#D3C6AA;">翻译列表</span><span style="color:#A7C080;">&lt;/</span><span style="color:#7FBBB3;">Link</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line highlighted"><span style="color:#A7C080;">        &lt;</span><span style="color:#E69875;">button</span><span style="color:#A7C080;"> onClick</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">handleLogout</span><span style="color:#A7C080;">}&gt;</span><span style="color:#D3C6AA;">退出</span><span style="color:#A7C080;">&lt;/</span><span style="color:#E69875;">button</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line highlighted"><span style="color:#A7C080;">      &lt;/</span><span style="color:#7FBBB3;">Fragment</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">    ) </span><span style="color:#E69875;">:</span><span style="color:#D3C6AA;"> (</span></span>
<span class="line highlighted"><span style="color:#A7C080;">      &lt;</span><span style="color:#E69875;">button</span><span style="color:#A7C080;"> onClick</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">handleLogin</span><span style="color:#A7C080;">}&gt;</span><span style="color:#D3C6AA;">登陆</span><span style="color:#A7C080;">&lt;/</span><span style="color:#E69875;">button</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">    )</span><span style="color:#A7C080;">}</span></span>
<span class="line"><span style="color:#A7C080;">  &lt;/</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>在服务端渲染前，获取 login 的值，以便渲染 Header 的内容。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/App.js</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#D3C6AA;">App</span><span style="color:#859289;">.</span><span style="color:#A7C080;">loadData</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> store </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> store</span><span style="color:#859289;">.</span><span style="color:#A7C080;">dispatch</span><span style="color:#D3C6AA;">(actions</span><span style="color:#859289;">.</span><span style="color:#A7C080;">getHeaderInfo</span><span style="color:#D3C6AA;">());</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/components/Header/store/actions.js</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { CHANGE_LOGIN } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;./constants&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#A7C080;"> changeLogin</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> value </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> ({</span></span>
<span class="line"><span style="color:#D3C6AA;">  type</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> CHANGE_LOGIN,</span></span>
<span class="line"><span style="color:#D3C6AA;">  value</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E69875;"> const</span><span style="color:#A7C080;"> login</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> (dispatch, getState, axiosInstance) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> axiosInstance</span><span style="color:#859289;">.</span><span style="color:#A7C080;">get</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;/api/login.json?secret=abcd&quot;</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(res </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">      // 登录成功</span></span>
<span class="line highlighted"><span style="color:#A7C080;">      dispatch</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">changeLogin</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">true</span><span style="color:#D3C6AA;">));</span></span>
<span class="line"><span style="color:#D3C6AA;">    });</span></span>
<span class="line"><span style="color:#D3C6AA;">  };</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E69875;"> const</span><span style="color:#A7C080;"> logout</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> (dispatch, getState, axiosInstance) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> axiosInstance</span><span style="color:#859289;">.</span><span style="color:#A7C080;">get</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;/api/logout.json?secret=abcd&quot;</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(res </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">      // 退出登录</span></span>
<span class="line highlighted"><span style="color:#A7C080;">      dispatch</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">changeLogin</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">false</span><span style="color:#D3C6AA;">));</span></span>
<span class="line"><span style="color:#D3C6AA;">    });</span></span>
<span class="line"><span style="color:#D3C6AA;">  };</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E69875;"> const</span><span style="color:#A7C080;"> getHeaderInfo</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> (dispatch, getState, axiosInstance) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> axiosInstance</span><span style="color:#859289;">.</span><span style="color:#A7C080;">get</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;/api/isLogin.json?secret=abcd&quot;</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(res </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">      // 获取登录状态(true / false)</span></span>
<span class="line highlighted"><span style="color:#A7C080;">      dispatch</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">changeLogin</span><span style="color:#D3C6AA;">(res</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">data</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">data</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">login));</span></span>
<span class="line"><span style="color:#D3C6AA;">    });</span></span>
<span class="line"><span style="color:#D3C6AA;">  };</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p>再由 reducer 去改变 store 里 login 的值。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/components/Header/store/reducer.js</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { CHANGE_LOGIN } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;./constants&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> defaultState </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  login</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> true</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E67E80;"> default</span><span style="color:#D3C6AA;"> (state </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> defaultState, action) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  switch</span><span style="color:#D3C6AA;"> (action</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">type) {</span></span>
<span class="line"><span style="color:#E69875;">    case</span><span style="color:#D3C6AA;"> CHANGE_LOGIN:</span></span>
<span class="line highlighted"><span style="color:#E67E80;">      return</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line highlighted"><span style="color:#E69875;">        ...</span><span style="color:#D3C6AA;">state,</span></span>
<span class="line highlighted"><span style="color:#D3C6AA;">        login</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> action</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">value</span></span>
<span class="line highlighted"><span style="color:#D3C6AA;">      };</span></span>
<span class="line"><span style="color:#E69875;">    default</span><span style="color:#D3C6AA;">:</span></span>
<span class="line"><span style="color:#E67E80;">      return</span><span style="color:#D3C6AA;"> state;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p><img src="`+F+`" alt="code_5"></p><h3 id="cookies-携带问题" tabindex="-1">cookies 携带问题 <a class="header-anchor" href="#cookies-携带问题" aria-label="Permalink to &quot;cookies 携带问题&quot;">​</a></h3><p>流程：</p><ol><li>刚进入页面的时候，处于非登录状态。</li><li>用户点击登录按钮，打接口进行登录操作。</li><li>浏览器发请求给中间层，也就是 Node 服务器</li><li>Node 服务器转发请求给后台 api 服务器，进行登录</li><li>后台 api 服务器生成 cookies，返回时写入浏览器</li><li>浏览器里有 cookies，登录成功</li><li>但用户重新刷新浏览器的时候</li><li>浏览器发 HTTP 请求 html（请求是携带着 cookies 的）</li><li>Node 服务器进行服务器渲染</li><li>进行服务器渲染前，首先要去后台 api 服务器请求数据，但是这时候的请求是不携带 cookies 的（node 端不是浏览器），所以造成了重新刷新页面登录状态不对的 bug</li></ol><p>下面来解决这个问题。</p><p>其实只需要在 Node 服务器转发请求的时候，带上客户端之前的 cookies 去请求，问题就解决了。 发请求的 axios 方法，可以加带一个 headers 对象，往里加 cookie 参数。</p><p>为了接收一个 req 参数，原来 createInstance 是个对象，将其改造成函数形式。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/server/request.js</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> axios </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;axios&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#A7C080;"> createInstance</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> req </span><span style="color:#E69875;">=&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">  axios</span><span style="color:#859289;">.</span><span style="color:#A7C080;">create</span><span style="color:#D3C6AA;">({</span></span>
<span class="line"><span style="color:#D3C6AA;">    baseURL</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;http://47.95.113.63/ssr&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line highlighted"><span style="color:#D3C6AA;">    headers</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line highlighted"><span style="color:#D3C6AA;">      cookie</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> req</span><span style="color:#859289;">.</span><span style="color:#A7C080;">get</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;cookie&quot;</span><span style="color:#D3C6AA;">) </span><span style="color:#E69875;">||</span><span style="color:#DBBC7F;"> &quot;&quot;</span></span>
<span class="line highlighted"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E67E80;"> default</span><span style="color:#D3C6AA;"> createInstance;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>对于 req 参数，由 express 捕获并传递给 getStore()方法。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/server/index.js</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#D3C6AA;">app</span><span style="color:#859289;">.</span><span style="color:#A7C080;">get</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;*&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;"> (req,</span><span style="color:#D3C6AA;"> res)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line highlighted"><span style="color:#E69875;">	const</span><span style="color:#D3C6AA;"> store</span><span style="color:#E69875;"> =</span><span style="color:#A7C080;"> getStore</span><span style="color:#D3C6AA;">(req);</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在创建服务端的 store 时把 req 传过去，这样请求的 headers 中就带有 cookie 信息了。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/store/index.js</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { createStore, applyMiddleware, combineReducers } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;redux&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> thunk </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;redux-thunk&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { reducer </span><span style="color:#E67E80;">as</span><span style="color:#D3C6AA;"> homeReducer } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;../containers/Home/store&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { reducer </span><span style="color:#E67E80;">as</span><span style="color:#D3C6AA;"> headerReducer } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;../components/Header/store&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> clientAxios </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;../client/request&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line highlighted"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> serverAxios </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;../server/request&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> reducer </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> combineReducers</span><span style="color:#D3C6AA;">({</span></span>
<span class="line"><span style="color:#D3C6AA;">  home</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> homeReducer,</span></span>
<span class="line"><span style="color:#D3C6AA;">  header</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> headerReducer</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 创建服务端 store</span></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E69875;"> const</span><span style="color:#A7C080;"> getStore</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> req </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#A7C080;"> createStore</span><span style="color:#D3C6AA;">(</span></span>
<span class="line"><span style="color:#D3C6AA;">    reducer,</span></span>
<span class="line highlighted"><span style="color:#A7C080;">    applyMiddleware</span><span style="color:#D3C6AA;">(thunk</span><span style="color:#859289;">.</span><span style="color:#A7C080;">withExtraArgument</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">serverAxios</span><span style="color:#D3C6AA;">(req)))</span></span>
<span class="line"><span style="color:#D3C6AA;">  );</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E69875;"> const</span><span style="color:#A7C080;"> getClientStore</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> () </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> defaultState </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> window</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">context</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">state;</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#A7C080;"> createStore</span><span style="color:#D3C6AA;">(</span></span>
<span class="line"><span style="color:#D3C6AA;">    reducer,</span></span>
<span class="line"><span style="color:#D3C6AA;">    defaultState,</span></span>
<span class="line"><span style="color:#A7C080;">    applyMiddleware</span><span style="color:#D3C6AA;">(thunk</span><span style="color:#859289;">.</span><span style="color:#A7C080;">withExtraArgument</span><span style="color:#D3C6AA;">(clientAxios))</span></span>
<span class="line"><span style="color:#D3C6AA;">  );</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h3 id="曾经的问题-令你深刻的-bug" tabindex="-1">曾经的问题：令你深刻的 Bug ? <a class="header-anchor" href="#曾经的问题-令你深刻的-bug" aria-label="Permalink to &quot;曾经的问题：令你深刻的 Bug ?&quot;">​</a></h3><p>服务端渲染前的 App 组件要执行的 loadData 方法：</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">App</span><span style="color:#859289;">.</span><span style="color:#A7C080;">loadData</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> store </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  store</span><span style="color:#859289;">.</span><span style="color:#A7C080;">dispatch</span><span style="color:#D3C6AA;">(actions</span><span style="color:#859289;">.</span><span style="color:#A7C080;">getHeaderInfo</span><span style="color:#D3C6AA;">());</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>App 组件返回的数据其实是 promise，而这时却没有 return 回去。 在服务端渲染的时候，要等到所有的 promise 都获取数据返回成功，才去执行渲染页面的内容。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// 用于管理多个promise请求的执行结果</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> promises </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [];</span></span>
<span class="line"><span style="color:#D3C6AA;">matchedRoutes</span><span style="color:#859289;">.</span><span style="color:#A7C080;">forEach</span><span style="color:#D3C6AA;">(item </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  if</span><span style="color:#D3C6AA;"> (item</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">route</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">loadData) {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // item.route.loadData() 用于获取异步数据</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // 返回数组里的是Promise对象</span></span>
<span class="line"><span style="color:#D3C6AA;">    promises</span><span style="color:#859289;">.</span><span style="color:#A7C080;">push</span><span style="color:#D3C6AA;">(item</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">route</span><span style="color:#859289;">.</span><span style="color:#A7C080;">loadData</span><span style="color:#D3C6AA;">(store));</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span>
<span class="line"><span style="color:#7FBBB3;">Promise</span><span style="color:#859289;">.</span><span style="color:#A7C080;">all</span><span style="color:#D3C6AA;">(promises)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(() </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  res</span><span style="color:#859289;">.</span><span style="color:#A7C080;">send</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">render</span><span style="color:#D3C6AA;">(req, store, routes));</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>所以 loadData 应该要 return 回去，promises 数组那边才能接受到一个 Promise 对象。 这样服务端渲染前接 Promise.all 收到的对象才是 Promise，而不是 undefined。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">App</span><span style="color:#859289;">.</span><span style="color:#A7C080;">loadData</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> store </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> store</span><span style="color:#859289;">.</span><span style="color:#A7C080;">dispatch</span><span style="color:#D3C6AA;">(actions</span><span style="color:#859289;">.</span><span style="color:#A7C080;">getHeaderInfo</span><span style="color:#D3C6AA;">());</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="细节问题处理" tabindex="-1">细节问题处理 <a class="header-anchor" href="#细节问题处理" aria-label="Permalink to &quot;细节问题处理&quot;">​</a></h2><h3 id="统一管理密钥" tabindex="-1">统一管理密钥 <a class="header-anchor" href="#统一管理密钥" aria-label="Permalink to &quot;统一管理密钥&quot;">​</a></h3><p>url 上所带的统一的参数，可以放到 axios 的 Instance 里统一调用。 服务端和客户端都要这样用的时候，可以引入一个公共的 config 文件再去引用。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/server/request.js</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> axios </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;axios&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// config 里写着各类信息</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> config </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;../config&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#A7C080;"> createInstance</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> req </span><span style="color:#E69875;">=&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">  axios</span><span style="color:#859289;">.</span><span style="color:#A7C080;">create</span><span style="color:#D3C6AA;">({</span></span>
<span class="line"><span style="color:#D3C6AA;">    baseURL</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;http://47.95.113.63/ssr&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">    headers</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">      cookie</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> req</span><span style="color:#859289;">.</span><span style="color:#A7C080;">get</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;cookie&quot;</span><span style="color:#D3C6AA;">) </span><span style="color:#E69875;">||</span><span style="color:#DBBC7F;"> &quot;&quot;</span></span>
<span class="line"><span style="color:#D3C6AA;">    },</span></span>
<span class="line"><span style="color:#D3C6AA;">    params</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">      secret</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> config</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">secret</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E67E80;"> default</span><span style="color:#D3C6AA;"> createInstance;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="_404-页面" tabindex="-1">404 页面 <a class="header-anchor" href="#_404-页面" aria-label="Permalink to &quot;404 页面&quot;">​</a></h3><p>配置路由，新增一个没有路径时对应的组件：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">{</span></span>
<span class="line"><span style="color:#83C092;">  component</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> NotFound,</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>server/src/Routes.js <img src="`+k+`" alt="code_6"></p><p>服务端渲染的 StaticRouter 组件中，contenxt 对象会传给它的所有子组件，子组件可以通过 props.staticContext 获取到这个对象的值。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/server/utils.js</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span>
<span class="line highlighted"><span style="color:#83C092;">export</span><span style="color:#E69875;"> const</span><span style="color:#A7C080;"> render</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> (store, routes, req, context) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> content </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> renderToString</span><span style="color:#D3C6AA;">(</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;</span><span style="color:#7FBBB3;">Provider</span><span style="color:#A7C080;"> store</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">store</span><span style="color:#A7C080;">}&gt;</span></span>
<span class="line"><span style="color:#A7C080;">      {</span><span style="color:#859289;font-style:italic;">/*StaticRouter的context对象会传给它的所有子组件*/</span><span style="color:#A7C080;">}</span></span>
<span class="line highlighted"><span style="color:#A7C080;">      &lt;</span><span style="color:#7FBBB3;">StaticRouter</span><span style="color:#A7C080;"> location</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">req</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">path</span><span style="color:#A7C080;">}</span><span style="color:#A7C080;"> context</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">context</span><span style="color:#A7C080;">}&gt;</span></span>
<span class="line"><span style="color:#A7C080;">        &lt;</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;{renderRoutes</span><span style="color:#D3C6AA;">(routes)</span><span style="color:#A7C080;">}&lt;/</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">      &lt;/</span><span style="color:#7FBBB3;">StaticRouter</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;/</span><span style="color:#7FBBB3;">Provider</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">  );</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>那我们如何能知道当前页是 404 页面？</p><p>可以在 404 页面对应的组件 NotFound 里去改变 staticContext 的值，只有在 404 页面中，才会使 staticContext.NOT_FOUND 的值为 true。</p><p>componentWillMount 服务器端也会运行，所以我们将改变 staticContext 的操作放到这里。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/containers/NotFound/index.js</span></span>
<span class="line"><span style="color:#E67E80;">class</span><span style="color:#7FBBB3;"> NotFound</span><span style="color:#E69875;"> extends</span><span style="color:#7FBBB3;"> Component</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // componentWillMount 服务器端也会运行</span></span>
<span class="line"><span style="color:#A7C080;">  componentWillMount</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line highlighted"><span style="color:#E69875;">    const</span><span style="color:#D3C6AA;"> { staticContext } </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">props;</span></span>
<span class="line highlighted"><span style="color:#D3C6AA;">    staticContext </span><span style="color:#E69875;">&amp;&amp;</span><span style="color:#D3C6AA;"> (staticContext</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">NOT_FOUND </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> true</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  render</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#A7C080;"> &lt;</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span><span style="color:#D3C6AA;">404, sorry, page not found</span><span style="color:#A7C080;">&lt;/</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>因为在客户端渲染上，没有 StaticRouter 这个组件，所以也没有 staticContext 这个值，所以我们要在确保有 staticContext 的前提下，才去往 staticContext 里添加一个 NOT_FOUND 对象并设为 true。</p><p>最后，要设置 404 页面返回的 status 码为 404。</p><p>这个值默认为 200。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/server/index.js</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#D3C6AA;">app</span><span style="color:#859289;">.</span><span style="color:#A7C080;">get</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;*&quot;</span><span style="color:#D3C6AA;">, </span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">(req,</span><span style="color:#D3C6AA;"> res)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> store</span><span style="color:#E69875;"> =</span><span style="color:#A7C080;"> getStore</span><span style="color:#D3C6AA;">(req);</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 根据路由的路径，来往store里面加数据</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> matchedRoutes</span><span style="color:#E69875;"> =</span><span style="color:#A7C080;"> matchRoutes</span><span style="color:#D3C6AA;">(routes,</span><span style="color:#D3C6AA;"> req</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">path);</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 让matchRoutes里面所有的组件，对应的loadData方法执行一次</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> promises</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> [];</span></span>
<span class="line"><span style="color:#D3C6AA;">  matchedRoutes</span><span style="color:#859289;">.</span><span style="color:#A7C080;">forEach</span><span style="color:#D3C6AA;">(item</span><span style="color:#E69875;"> =&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    if</span><span style="color:#D3C6AA;"> (item</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">route</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">loadData)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">      promises</span><span style="color:#859289;">.</span><span style="color:#A7C080;">push</span><span style="color:#D3C6AA;">(item</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">route</span><span style="color:#859289;">.</span><span style="color:#A7C080;">loadData</span><span style="color:#D3C6AA;">(store));</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">  });</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 所有一部数据都获取到后，再服务端渲染页面</span></span>
<span class="line"><span style="color:#7FBBB3;">  Promise</span><span style="color:#859289;">.</span><span style="color:#A7C080;">all</span><span style="color:#D3C6AA;">(promises)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(()</span><span style="color:#E69875;"> =&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">    const</span><span style="color:#D3C6AA;"> context</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> {};</span></span>
<span class="line"><span style="color:#E69875;">    const</span><span style="color:#D3C6AA;"> html</span><span style="color:#E69875;"> =</span><span style="color:#A7C080;"> render</span><span style="color:#D3C6AA;">(store,</span><span style="color:#D3C6AA;"> routes,</span><span style="color:#D3C6AA;"> req,</span><span style="color:#D3C6AA;"> context);</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#E67E80;">    if</span><span style="color:#D3C6AA;"> (context</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">NOT_FOUND)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line highlighted"><span style="color:#859289;font-style:italic;">      // 设置网络请求的status码为404</span></span>
<span class="line highlighted"><span style="color:#D3C6AA;">      res</span><span style="color:#859289;">.</span><span style="color:#A7C080;">status</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">404</span><span style="color:#D3C6AA;">);</span></span>
<span class="line highlighted"><span style="color:#D3C6AA;">      res</span><span style="color:#859289;">.</span><span style="color:#A7C080;">send</span><span style="color:#D3C6AA;">(html);</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span><span style="color:#E67E80;"> else</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">      res</span><span style="color:#859289;">.</span><span style="color:#A7C080;">send</span><span style="color:#D3C6AA;">(html);</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">  });</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>这里要留意到一点：</p><p>为什么要把 render() 赋给一个变量 html？</p><p>这是为了做判断，res.send 返回前，render 函数已执行好，即页面已渲染好，再根据条件返回给客户端。</p><h3 id="实现服务器端-301-重定向" tabindex="-1">实现服务器端 301 重定向 <a class="header-anchor" href="#实现服务器端-301-重定向" aria-label="Permalink to &quot;实现服务器端 301 重定向&quot;">​</a></h3><p>因为 <code>&lt;Redirect /&gt;</code> 仅限于客户端重定向，当没有未登陆状态时去访问其他页面（应当没有权限访问的），服务端会返回页面内容，然后客户端再进行重定向跳转到其他页面，这是不太合理的。 所以我们要做到服务端重定向。</p><p>在重定向时，react-router-config 都会帮我做一件事：往 context 里填充这样的内容。 <img src="`+j+`" alt="console_4"></p><p>文档：<a href="https://github.com/ReactTraining/react-router/tree/master/packages/react-router-config" target="_blank" rel="noreferrer">https://github.com/ReactTraining/react-router/tree/master/packages/react-router-config</a></p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/server/utils.js</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span>
<span class="line highlighted"><span style="color:#83C092;">export</span><span style="color:#E69875;"> const</span><span style="color:#A7C080;"> render</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> (store, routes, req, context) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> content </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> renderToString</span><span style="color:#D3C6AA;">(</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;</span><span style="color:#7FBBB3;">Provider</span><span style="color:#A7C080;"> store</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">store</span><span style="color:#A7C080;">}&gt;</span></span>
<span class="line"><span style="color:#A7C080;">      {</span><span style="color:#859289;font-style:italic;">/*StaticRouter的context对象会传给它的所有子组件*/</span><span style="color:#A7C080;">}</span></span>
<span class="line highlighted"><span style="color:#A7C080;">      &lt;</span><span style="color:#7FBBB3;">StaticRouter</span><span style="color:#A7C080;"> location</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">req</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">path</span><span style="color:#A7C080;">}</span><span style="color:#A7C080;"> context</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">context</span><span style="color:#A7C080;">}&gt;</span></span>
<span class="line"><span style="color:#A7C080;">        &lt;</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;{renderRoutes</span><span style="color:#D3C6AA;">(routes)</span><span style="color:#A7C080;">}&lt;/</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">      &lt;/</span><span style="color:#7FBBB3;">StaticRouter</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;/</span><span style="color:#7FBBB3;">Provider</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">  );</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/server/index.js</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#D3C6AA;">app</span><span style="color:#859289;">.</span><span style="color:#A7C080;">get</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;*&quot;</span><span style="color:#D3C6AA;">, </span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">(req,</span><span style="color:#D3C6AA;"> res)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> store</span><span style="color:#E69875;"> =</span><span style="color:#A7C080;"> getStore</span><span style="color:#D3C6AA;">(req);</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 根据路由的路径，来往store里面加数据</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> matchedRoutes</span><span style="color:#E69875;"> =</span><span style="color:#A7C080;"> matchRoutes</span><span style="color:#D3C6AA;">(routes,</span><span style="color:#D3C6AA;"> req</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">path);</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 让matchRoutes里面所有的组件，对应的loadData方法执行一次</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> promises</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> [];</span></span>
<span class="line"><span style="color:#D3C6AA;">  matchedRoutes</span><span style="color:#859289;">.</span><span style="color:#A7C080;">forEach</span><span style="color:#D3C6AA;">(item</span><span style="color:#E69875;"> =&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    if</span><span style="color:#D3C6AA;"> (item</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">route</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">loadData)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">      promises</span><span style="color:#859289;">.</span><span style="color:#A7C080;">push</span><span style="color:#D3C6AA;">(item</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">route</span><span style="color:#859289;">.</span><span style="color:#A7C080;">loadData</span><span style="color:#D3C6AA;">(store));</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">  });</span></span>
<span class="line"><span style="color:#7FBBB3;">  Promise</span><span style="color:#859289;">.</span><span style="color:#A7C080;">all</span><span style="color:#D3C6AA;">(promises)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(()</span><span style="color:#E69875;"> =&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">    const</span><span style="color:#D3C6AA;"> context</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> {};</span></span>
<span class="line"><span style="color:#E69875;">    const</span><span style="color:#D3C6AA;"> html</span><span style="color:#E69875;"> =</span><span style="color:#A7C080;"> render</span><span style="color:#D3C6AA;">(store,</span><span style="color:#D3C6AA;"> routes,</span><span style="color:#D3C6AA;"> req,</span><span style="color:#D3C6AA;"> context);</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // res.send 返回前，页面已经渲染好。</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // 重定向时，react-router-config 会给 context.action 注入这个值</span></span>
<span class="line highlighted"><span style="color:#E67E80;">    if</span><span style="color:#D3C6AA;"> (context</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">action</span><span style="color:#E69875;"> ===</span><span style="color:#DBBC7F;"> &quot;REPLACE&quot;</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line highlighted"><span style="color:#D3C6AA;">      res</span><span style="color:#859289;">.</span><span style="color:#A7C080;">redirect</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">301</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> context</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">url);</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span><span style="color:#E67E80;"> else</span><span style="color:#E67E80;"> if</span><span style="color:#D3C6AA;"> (context</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">NOT_FOUND)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">      res</span><span style="color:#859289;">.</span><span style="color:#A7C080;">status</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">404</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">      res</span><span style="color:#859289;">.</span><span style="color:#A7C080;">send</span><span style="color:#D3C6AA;">(html);</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span><span style="color:#E67E80;"> else</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">      res</span><span style="color:#859289;">.</span><span style="color:#A7C080;">send</span><span style="color:#D3C6AA;">(html);</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">  });</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>这样就可以设置 status 码为 301，并跳转到 context.url 里的重定向页面。</p><h3 id="容错处理数据请求失败情况下-promise-的处理" tabindex="-1">容错处理数据请求失败情况下 promise 的处理 <a class="header-anchor" href="#容错处理数据请求失败情况下-promise-的处理" aria-label="Permalink to &quot;容错处理数据请求失败情况下 promise 的处理&quot;">​</a></h3><p>目前对服务端渲染的方法是这样的：</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> promises </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [];</span></span>
<span class="line"><span style="color:#D3C6AA;">matchedRoutes</span><span style="color:#859289;">.</span><span style="color:#A7C080;">forEach</span><span style="color:#D3C6AA;">(item </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  if</span><span style="color:#D3C6AA;"> (item</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">route</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">loadData) {</span></span>
<span class="line"><span style="color:#D3C6AA;">    promises</span><span style="color:#859289;">.</span><span style="color:#A7C080;">push</span><span style="color:#D3C6AA;">(item</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">route</span><span style="color:#859289;">.</span><span style="color:#A7C080;">loadData</span><span style="color:#D3C6AA;">(store));</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span>
<span class="line"><span style="color:#7FBBB3;">Promise</span><span style="color:#859289;">.</span><span style="color:#A7C080;">all</span><span style="color:#D3C6AA;">(promises)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(() </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> context </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {};</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> html </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> render</span><span style="color:#D3C6AA;">(store, routes, req, context);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">  if</span><span style="color:#D3C6AA;"> (context</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">action </span><span style="color:#E69875;">===</span><span style="color:#DBBC7F;"> &quot;REPLACE&quot;</span><span style="color:#D3C6AA;">) {</span></span>
<span class="line"><span style="color:#D3C6AA;">    res</span><span style="color:#859289;">.</span><span style="color:#A7C080;">redirect</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">301</span><span style="color:#D3C6AA;">, context</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">url);</span></span>
<span class="line"><span style="color:#D3C6AA;">  } </span><span style="color:#E67E80;">else</span><span style="color:#E67E80;"> if</span><span style="color:#D3C6AA;"> (context</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">NOT_FOUND) {</span></span>
<span class="line"><span style="color:#D3C6AA;">    res</span><span style="color:#859289;">.</span><span style="color:#A7C080;">status</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">404</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">    res</span><span style="color:#859289;">.</span><span style="color:#A7C080;">send</span><span style="color:#D3C6AA;">(html);</span></span>
<span class="line"><span style="color:#D3C6AA;">  } </span><span style="color:#E67E80;">else</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    res</span><span style="color:#859289;">.</span><span style="color:#A7C080;">send</span><span style="color:#D3C6AA;">(html);</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>这种情况下，只要其中的一个组件 loadData 返回的 Promise 对象是失败的，那全部的组件都不会被渲染，所以需要我们做容错处理，使得就算其中一个组件获取数据失败，其他成功获取数据的组件依旧可以显示。</p><p><strong>我们的原则是，如果某个组件能正常加载，就应该把它显示出来，而不要受到其他组件失败的影响。</strong></p><p>假设一个页面要加载 A,B,C,D 四个组件，这四个组件都需要服务器端加载数据。</p><p>而 A 组件加载数据错误，对于剩下的组件可能有以下两种情况：</p><ol><li><p>B, C, D 组件数据已经加载完成了。</p></li><li><p>B, C, D 接口比较慢，B, C, D 组件数据没有加载完成。</p></li></ol><p>第一种情况，给 Promise.all 加上 catch，<strong>Promise.all().then().catch()</strong>，在 catch 中执行和 then 一样的操作。这样 Promise.all() 就算失败，也会执行 catch 里的内容，渲染出 B,C,D 组件的内容。</p><p>但是第二种情况，因为接口速度慢，当 B,C,D 还没有返回内容时，因为 A 组件加载失败了，<strong>Promise.all()</strong> 则会直接去执行 <strong>catch()</strong> 中的内容，那就算执行了渲染方法，页面也什么都没有，因为 B,C,D 还没有返回数据。</p><p>所以我们去掉 Promise.all 上的 catch 方法，在 loadData 返回的对象的基础上，再封装一个 Promise 对象，无论组件成功还是失败都返回 resolve，这样 promises 数组中的所有 Promise 对象都是 resolve 状态的。</p><p>这样确保了每一个有 loadData 方法的对象都有执行 loadData 方法，就算接口或是网速慢也会等待返回结果，得到了结果后才返回的 resolve，也因为所有 loadData 返回的 Promise 对象都是 resolve，所以 Promise.all 走的是 then() 方法。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/server/index.js</span></span>
<span class="line"><span style="color:#D3C6AA;">matchedRoutes</span><span style="color:#859289;">.</span><span style="color:#A7C080;">forEach</span><span style="color:#D3C6AA;">(item </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  if</span><span style="color:#D3C6AA;"> (item</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">route</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">loadData) {</span></span>
<span class="line highlighted"><span style="color:#E69875;">    const</span><span style="color:#D3C6AA;"> promise </span><span style="color:#E69875;">=</span><span style="color:#E67E80;"> new</span><span style="color:#7FBBB3;"> Promise</span><span style="color:#D3C6AA;">((resolve, reject) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line highlighted"><span style="color:#859289;font-style:italic;">      // 成功或失败都返回resolve，所以Promise.all肯定会走then()，把能渲染的全渲染出来</span></span>
<span class="line highlighted"><span style="color:#D3C6AA;">      item</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">route</span></span>
<span class="line highlighted"><span style="color:#859289;">        .</span><span style="color:#A7C080;">loadData</span><span style="color:#D3C6AA;">(store)</span></span>
<span class="line highlighted"><span style="color:#859289;">        .</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(resolve)</span></span>
<span class="line highlighted"><span style="color:#859289;">        .</span><span style="color:#A7C080;">catch</span><span style="color:#D3C6AA;">(resolve);</span></span>
<span class="line highlighted"><span style="color:#D3C6AA;">    });</span></span>
<span class="line"><span style="color:#D3C6AA;">    promises</span><span style="color:#859289;">.</span><span style="color:#A7C080;">push</span><span style="color:#D3C6AA;">(promise);</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// promises = [ a, b, c, d ]</span></span>
<span class="line"><span style="color:#7FBBB3;">Promise</span><span style="color:#859289;">.</span><span style="color:#A7C080;">all</span><span style="color:#D3C6AA;">(promises)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(() </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> context </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {};</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> html </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> render</span><span style="color:#D3C6AA;">(store, routes, req, context);</span></span>
<span class="line"><span style="color:#E67E80;">  if</span><span style="color:#D3C6AA;"> (context</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">action </span><span style="color:#E69875;">===</span><span style="color:#DBBC7F;"> &quot;REPLACE&quot;</span><span style="color:#D3C6AA;">) {</span></span>
<span class="line"><span style="color:#D3C6AA;">    res</span><span style="color:#859289;">.</span><span style="color:#A7C080;">redirect</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">301</span><span style="color:#D3C6AA;">, context</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">url);</span></span>
<span class="line"><span style="color:#D3C6AA;">  } </span><span style="color:#E67E80;">else</span><span style="color:#E67E80;"> if</span><span style="color:#D3C6AA;"> (context</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">NOT_FOUND) {</span></span>
<span class="line"><span style="color:#D3C6AA;">    res</span><span style="color:#859289;">.</span><span style="color:#A7C080;">status</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">404</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">    res</span><span style="color:#859289;">.</span><span style="color:#A7C080;">send</span><span style="color:#D3C6AA;">(html);</span></span>
<span class="line"><span style="color:#D3C6AA;">  } </span><span style="color:#E67E80;">else</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    res</span><span style="color:#859289;">.</span><span style="color:#A7C080;">send</span><span style="color:#D3C6AA;">(html);</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h3 id="一个-loaddata-的潜在问题" tabindex="-1">一个 loadData 的潜在问题 <a class="header-anchor" href="#一个-loaddata-的潜在问题" aria-label="Permalink to &quot;一个 loadData 的潜在问题&quot;">​</a></h3><p>例如 Home 组件在导出的时候：</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#83C092;">export</span><span style="color:#E67E80;"> default</span><span style="color:#A7C080;"> connect</span><span style="color:#D3C6AA;">(</span></span>
<span class="line"><span style="color:#D3C6AA;">  mapStateToProps,</span></span>
<span class="line"><span style="color:#D3C6AA;">  mapDispatchToProps</span></span>
<span class="line"><span style="color:#D3C6AA;">)(Home);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这里导出的其实已经不是 Home 组件了，而是经过了 connect 方法封装后的 Home 组件（高阶组件），而我们却在 Home 下直接绑定了 loadData 方法。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">Home</span><span style="color:#859289;">.</span><span style="color:#A7C080;">loadData</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> store </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> store</span><span style="color:#859289;">.</span><span style="color:#A7C080;">dispatch</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">getHomeList</span><span style="color:#D3C6AA;">());</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在 react-router-config 调用 loadData 方法的时候，这就可能是有问题的，因为调用的是原来 Home 下的 loadData 方法，而我们 export 出去的却是一个 connect()(Home) 组件。</p><p>之所以没有出错是因为 react-redux 将 Home 下的所有方法原封不动的传给了新的 connect()(Home) 组件。但是我们同样可以在这里做一些更改，导出的是一个 ExportHome 高阶组件。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> ExportHome </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> connect</span><span style="color:#D3C6AA;">(</span></span>
<span class="line"><span style="color:#D3C6AA;">  mapStateToProps,</span></span>
<span class="line"><span style="color:#D3C6AA;">  mapStateToDispatch</span></span>
<span class="line"><span style="color:#D3C6AA;">)(Home);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E67E80;"> default</span><span style="color:#D3C6AA;"> ExportHome;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>而 loadData 绑定在 ExportHome 上，这样确保了导出的组件上是一定有 loadData 方法的。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">ExportHome</span><span style="color:#859289;">.</span><span style="color:#A7C080;">loadData</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> store </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> store</span><span style="color:#859289;">.</span><span style="color:#A7C080;">dispatch</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">getHomeList</span><span style="color:#D3C6AA;">());</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="处理-ssr-框架中的-css-样式" tabindex="-1">处理 SSR 框架中的 CSS 样式 <a class="header-anchor" href="#处理-ssr-框架中的-css-样式" aria-label="Permalink to &quot;处理 SSR 框架中的 CSS 样式&quot;">​</a></h2><h3 id="实现-css-样式的服务器端渲染" tabindex="-1">实现 CSS 样式的服务器端渲染 <a class="header-anchor" href="#实现-css-样式的服务器端渲染" aria-label="Permalink to &quot;实现 CSS 样式的服务器端渲染&quot;">​</a></h3><p>之前用 webpack 的 isomorphic 只是做到了在服务端打包 CSS，但是并没有把 CSS 放在渲染内容里一块返回给浏览器，从而会导致在客户端重新渲染的时候，出现样式抖动。(因为服务端渲染返回是数据是没有样式内容的，一旦禁用了 JS，样式为空，所以需要把 CSS 样式在服务端渲染时也塞到页面中，一块返回给浏览器)</p><p><img src="`+w+`" alt="source_5"></p><p>做到这个很简单，在服务端渲染的时候，我们有 staticContext 和子组件们做通信，利用 staticContext 把 CSS 的内容给获取到，再渲染到要返回的 HTML 上就可以。</p><p>this.props.staticContext 只有服务端渲染时才有，<code>_getCss</code> 方法是服务端渲染时 isomorphic-style-loader 提供的方法，它可以获取到 CSS 的内容。再把 css 的内容给 staticContext 下新建一个 css 对象。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/containers/Home/index.js</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> styles </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;./style.css&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">class</span><span style="color:#7FBBB3;"> Home</span><span style="color:#E69875;"> extends</span><span style="color:#7FBBB3;"> Component</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">  componentWillMount</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line highlighted"><span style="color:#E67E80;">    if</span><span style="color:#D3C6AA;"> (</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">props</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">staticContext) {</span></span>
<span class="line highlighted"><span style="color:#D699B6;">      this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">props</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">staticContext</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">css</span><span style="color:#859289;">.</span><span style="color:#A7C080;">push</span><span style="color:#D3C6AA;">(styles</span><span style="color:#859289;">.</span><span style="color:#A7C080;">_getCss</span><span style="color:#D3C6AA;">());</span></span>
<span class="line highlighted"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/server/utils.js</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E69875;"> const</span><span style="color:#A7C080;"> render</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> (store, routes, req, context) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> content </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> renderToString</span><span style="color:#D3C6AA;">(</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;</span><span style="color:#7FBBB3;">Provider</span><span style="color:#A7C080;"> store</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">store</span><span style="color:#A7C080;">}&gt;</span></span>
<span class="line highlighted"><span style="color:#A7C080;">      &lt;</span><span style="color:#7FBBB3;">StaticRouter</span><span style="color:#A7C080;"> location</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">req</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">path</span><span style="color:#A7C080;">}</span><span style="color:#A7C080;"> context</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">context</span><span style="color:#A7C080;">}&gt;</span></span>
<span class="line"><span style="color:#A7C080;">        &lt;</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;{renderRoutes</span><span style="color:#D3C6AA;">(routes)</span><span style="color:#A7C080;">}&lt;/</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">      &lt;/</span><span style="color:#7FBBB3;">StaticRouter</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;/</span><span style="color:#7FBBB3;">Provider</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">  );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // css 的内容填充到变量cssStr</span></span>
<span class="line highlighted"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> cssStr </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> context</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">css </span><span style="color:#E69875;">?</span><span style="color:#D3C6AA;"> context</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">css </span><span style="color:#E69875;">:</span><span style="color:#DBBC7F;"> &quot;&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#DBBC7F;"> \`</span></span>
<span class="line"><span style="color:#DBBC7F;">    &lt;html&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">    &lt;head&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">      &lt;title&gt;ssr&lt;/title&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">      &lt;style&gt;</span><span style="color:#A7C080;">\${</span><span style="color:#D3C6AA;">cssStr</span><span style="color:#A7C080;">}</span><span style="color:#DBBC7F;">&lt;/style&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">    &lt;/head&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">    &lt;body&gt;</span></span>
<span class="line highlighted"><span style="color:#DBBC7F;">      &lt;div id=&quot;root&quot;&gt;</span><span style="color:#A7C080;">\${</span><span style="color:#D3C6AA;">content</span><span style="color:#A7C080;">}</span><span style="color:#DBBC7F;">&lt;/div&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">      &lt;script&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">        window.context = {</span></span>
<span class="line"><span style="color:#DBBC7F;">          state: </span><span style="color:#A7C080;">\${</span><span style="color:#D3C6AA;">JSON</span><span style="color:#859289;">.</span><span style="color:#A7C080;">stringify</span><span style="color:#D3C6AA;">(store</span><span style="color:#859289;">.</span><span style="color:#A7C080;">getState</span><span style="color:#D3C6AA;">())</span><span style="color:#A7C080;">}</span></span>
<span class="line"><span style="color:#DBBC7F;">        }</span></span>
<span class="line"><span style="color:#DBBC7F;">      &lt;/script&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">      &lt;script src=&#39;/index.js&#39;&gt;&lt;/script&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">    &lt;/body&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">    &lt;/html&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">    \`</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/server/index.js</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#7FBBB3;">Promise</span><span style="color:#859289;">.</span><span style="color:#A7C080;">all</span><span style="color:#D3C6AA;">(promises)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(() </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line highlighted"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> context </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {};</span></span>
<span class="line highlighted"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> html </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> render</span><span style="color:#D3C6AA;">(store, routes, req, context);</span></span>
<span class="line"><span style="color:#E67E80;">  if</span><span style="color:#D3C6AA;"> (context</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">action </span><span style="color:#E69875;">===</span><span style="color:#DBBC7F;"> &quot;REPLACE&quot;</span><span style="color:#D3C6AA;">) {</span></span>
<span class="line"><span style="color:#D3C6AA;">    res</span><span style="color:#859289;">.</span><span style="color:#A7C080;">redirect</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">301</span><span style="color:#D3C6AA;">, context</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">url);</span></span>
<span class="line"><span style="color:#D3C6AA;">  } </span><span style="color:#E67E80;">else</span><span style="color:#E67E80;"> if</span><span style="color:#D3C6AA;"> (context</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">NOT_FOUND) {</span></span>
<span class="line"><span style="color:#D3C6AA;">    res</span><span style="color:#859289;">.</span><span style="color:#A7C080;">status</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">404</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">    res</span><span style="color:#859289;">.</span><span style="color:#A7C080;">send</span><span style="color:#D3C6AA;">(html);</span></span>
<span class="line"><span style="color:#D3C6AA;">  } </span><span style="color:#E67E80;">else</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line highlighted"><span style="color:#D3C6AA;">    res</span><span style="color:#859289;">.</span><span style="color:#A7C080;">send</span><span style="color:#D3C6AA;">(html);</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>这样服务端渲染出的内容就带有 CSS 样式了，解决了客户端重新渲染时会产生的页面抖动问题。 <img src="`+R+`" alt="source_6"></p><h3 id="多组件中的样式如何整合" tabindex="-1">多组件中的样式如何整合 <a class="header-anchor" href="#多组件中的样式如何整合" aria-label="Permalink to &quot;多组件中的样式如何整合&quot;">​</a></h3><p>上面服务端渲染是往 staticContext.css 对象里塞样式数据，当多个组件同时写样式时，就会前面的会覆盖后面的样式内容。解决这个则把 staticContext.css 改写成一个数组即可。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// src/server/index.js</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#7FBBB3;">Promise</span><span style="color:#859289;">.</span><span style="color:#A7C080;">all</span><span style="color:#D3C6AA;">(promises)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(() </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line highlighted"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> context </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> { css</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [] };</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> html </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> render</span><span style="color:#D3C6AA;">(store, routes, req, context);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">  if</span><span style="color:#D3C6AA;"> (context</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">action </span><span style="color:#E69875;">===</span><span style="color:#DBBC7F;"> &quot;REPLACE&quot;</span><span style="color:#D3C6AA;">) {</span></span>
<span class="line"><span style="color:#D3C6AA;">    res</span><span style="color:#859289;">.</span><span style="color:#A7C080;">redirect</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">301</span><span style="color:#D3C6AA;">, context</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">url);</span></span>
<span class="line"><span style="color:#D3C6AA;">  } </span><span style="color:#E67E80;">else</span><span style="color:#E67E80;"> if</span><span style="color:#D3C6AA;"> (context</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">NOT_FOUND) {</span></span>
<span class="line"><span style="color:#D3C6AA;">    res</span><span style="color:#859289;">.</span><span style="color:#A7C080;">status</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">404</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">    res</span><span style="color:#859289;">.</span><span style="color:#A7C080;">send</span><span style="color:#D3C6AA;">(html);</span></span>
<span class="line"><span style="color:#D3C6AA;">  } </span><span style="color:#E67E80;">else</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    res</span><span style="color:#859289;">.</span><span style="color:#A7C080;">send</span><span style="color:#D3C6AA;">(html);</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>server/src/components/Header/index.js，例如 Header 组件新增 css 内容：</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> styles </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;./style.css&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">class</span><span style="color:#7FBBB3;"> Header</span><span style="color:#E69875;"> extends</span><span style="color:#7FBBB3;"> Component</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">  componentWillMount</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#E67E80;">    if</span><span style="color:#D3C6AA;"> (</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">props</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">staticContext) {</span></span>
<span class="line"><span style="color:#D699B6;">      this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">props</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">staticContext</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">css</span><span style="color:#859289;">.</span><span style="color:#A7C080;">push</span><span style="color:#D3C6AA;">(styles</span><span style="color:#859289;">.</span><span style="color:#A7C080;">_getCss</span><span style="color:#D3C6AA;">());</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>server/src/App.js，Header 组件上没有 staticContext，所以从它的父组件 App 传过去。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#A7C080;"> App</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> props </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> (</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line highlighted"><span style="color:#A7C080;">      &lt;</span><span style="color:#7FBBB3;">Header</span><span style="color:#A7C080;"> staticContext</span><span style="color:#E69875;">=</span><span style="color:#A7C080;">{</span><span style="color:#D3C6AA;">props</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">staticContext</span><span style="color:#A7C080;">}</span><span style="color:#A7C080;"> /&gt;</span></span>
<span class="line"><span style="color:#A7C080;">      {renderRoutes</span><span style="color:#D3C6AA;">(props</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">route</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">routes)</span><span style="color:#A7C080;">}</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;/</span><span style="color:#E69875;">div</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">  );</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>server/src/server/utils.js，处理 context.css 数组用于正常显示。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span>
<span class="line highlighted"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> cssStr </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> context</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">css</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">length </span><span style="color:#E69875;">?</span><span style="color:#D3C6AA;"> context</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">css</span><span style="color:#859289;">.</span><span style="color:#A7C080;">join</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;</span><span style="color:#A7C080;">\\n</span><span style="color:#DBBC7F;">&quot;</span><span style="color:#D3C6AA;">) </span><span style="color:#E69875;">:</span><span style="color:#DBBC7F;"> &quot;&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#E67E80;">return</span><span style="color:#DBBC7F;"> \`</span></span>
<span class="line"><span style="color:#DBBC7F;">  &lt;html&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">  &lt;head&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">    &lt;title&gt;ssr&lt;/title&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">    &lt;style&gt;</span><span style="color:#A7C080;">\${</span><span style="color:#D3C6AA;">cssStr</span><span style="color:#A7C080;">}</span><span style="color:#DBBC7F;">&lt;/style&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">  &lt;/head&gt;</span></span>
<span class="line"><span style="color:#DBBC7F;">  // ...</span></span>
<span class="line"><span style="color:#DBBC7F;">  \`</span><span style="color:#D3C6AA;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>可以输出 context.css 和 cssStr 做对比 <img src="`+S+`" alt="console_5"></p><h3 id="高阶组件封装来精简代码" tabindex="-1">高阶组件封装来精简代码 <a class="header-anchor" href="#高阶组件封装来精简代码" aria-label="Permalink to &quot;高阶组件封装来精简代码&quot;">​</a></h3><p>上面的问题在于要写很多遍重复代码，每一个组件都要写样式，都要在组件文件里把样式内容注入到 staticContext 中。那我们可以使用高阶组件来给它封装一层来简化代码。</p><p>在根目录下创建一个 withStyle.css 文件，返回一个封装后的高阶组件，第一个参数是要封装的组件，第二个参数是样式的内容： server/src/withStyle.js</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> React, { Component } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;react&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 这个函数，是生成高阶组件的函数</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 这个函数，返回一个组件</span></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E67E80;"> default</span><span style="color:#D3C6AA;"> (DecoratedComponent, styles) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 返回的这个组件，叫做高阶组件</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#E67E80;"> class</span><span style="color:#7FBBB3;"> NewComponent</span><span style="color:#E69875;"> extends</span><span style="color:#7FBBB3;"> Component</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">    componentWillMount</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#E67E80;">      if</span><span style="color:#D3C6AA;"> (</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">props</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">staticContext) {</span></span>
<span class="line"><span style="color:#D699B6;">        this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">props</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">staticContext</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">css</span><span style="color:#859289;">.</span><span style="color:#A7C080;">push</span><span style="color:#D3C6AA;">(styles</span><span style="color:#859289;">.</span><span style="color:#A7C080;">_getCss</span><span style="color:#D3C6AA;">());</span></span>
<span class="line"><span style="color:#D3C6AA;">      }</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#A7C080;">    render</span><span style="color:#D3C6AA;">() {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">      // 将原组件上所有的props传给新的组件DecoratedComponent</span></span>
<span class="line"><span style="color:#E67E80;">      return</span><span style="color:#A7C080;"> &lt;</span><span style="color:#7FBBB3;">DecoratedComponent</span><span style="color:#A7C080;"> {</span><span style="color:#E69875;">...</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">props</span><span style="color:#A7C080;">}</span><span style="color:#A7C080;"> /&gt;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">  };</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>这样的话，就可以在组件里使用高阶组件去简化代码： server/src/containers/Home/index.js</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> withStyle </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;../../withStyle&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> ExportHome </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> connect</span><span style="color:#D3C6AA;">(</span></span>
<span class="line"><span style="color:#D3C6AA;">  mapStateToProps,</span></span>
<span class="line"><span style="color:#D3C6AA;">  mapStateToDispatch</span></span>
<span class="line"><span style="color:#D3C6AA;">)(</span><span style="color:#A7C080;">withStyle</span><span style="color:#D3C6AA;">(Home));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="seo" tabindex="-1">SEO <a class="header-anchor" href="#seo" aria-label="Permalink to &quot;SEO&quot;">​</a></h2><p><a href="https://github.com/nfl/react-helmet" target="_blank" rel="noreferrer">react-helmet</a> 来处理页面 TDK。</p><h2 id="使用预渲染解决-seo-问题的新思路" tabindex="-1">使用预渲染解决 SEO 问题的新思路 <a class="header-anchor" href="#使用预渲染解决-seo-问题的新思路" aria-label="Permalink to &quot;使用预渲染解决 SEO 问题的新思路&quot;">​</a></h2><p>针对纯客户端渲染的页面，可以使用预渲染技术来优化 SEO。</p><p><img src="`+_+'" alt="seo_1"></p><p>prerender <a href="https://github.com/prerender/prerender" target="_blank" rel="noreferrer">https://github.com/prerender/prerender</a></p><p>用 Nginx 处理，是爬虫访问页面，就把客户端渲染后完整的页面返回给爬虫。</p><p>是正常用户则正常返回页面。</p><p><img src="'+P+'" alt="seo_2"></p><p><a href="https://prerender.io/" target="_blank" rel="noreferrer">https://prerender.io/</a></p>',350)]))}const U=n(H,[["render",L]]);export{$ as __pageData,U as default};
