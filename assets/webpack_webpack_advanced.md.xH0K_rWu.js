import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.D-6U7MZ9.js";const e="/n-book/assets/bundler_1.DQkfY5Yk.png",o="/n-book/assets/bundler_2.CeRp1sAY.png",r="/n-book/assets/bundler_3.BLskYWOn.png",c="/n-book/assets/bundler_4.DvhtiE76.png",t="/n-book/assets/bundler_5.hCx5pyH2.png",i="/n-book/assets/bundler_6.DoYV7oq4.png",y="/n-book/assets/bundler_7.CKVjFi-K.png",A="/n-book/assets/bundler_8.DmIO2YkC.png",b="/n-book/assets/bundler_9.DUOdQDQD.png",u="/n-book/assets/bundler_10.XXE5JKiA.png",C="/n-book/assets/bundler_11.IjsDWiHS.png",d="/n-book/assets/bundler_12.DVxaR24S.png",f=JSON.parse('{"title":"webpack advanced 原理分析","description":"","frontmatter":{},"headers":[],"relativePath":"webpack/webpack_advanced.md","filePath":"webpack/webpack_advanced.md","lastUpdated":1560418030000}'),D={name:"webpack/webpack_advanced.md"};function m(B,s,g,q,E,h){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="webpack-advanced-原理分析" tabindex="-1">webpack advanced 原理分析 <a class="header-anchor" href="#webpack-advanced-原理分析" aria-label="Permalink to &quot;webpack advanced 原理分析&quot;">​</a></h1><h2 id="编写一个-loader" tabindex="-1">编写一个 Loader <a class="header-anchor" href="#编写一个-loader" aria-label="Permalink to &quot;编写一个 Loader&quot;">​</a></h2><p>Loader 的本质就只是一个函数，拿到源代码 source 对象，然后再返回处理后的 source 对象。</p><p>初始化一个项目</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">npm init </span><span style="color:#E69875;">-</span><span style="color:#D3C6AA;">y</span></span>
<span class="line"><span style="color:#D3C6AA;">npm i webpack webpack</span><span style="color:#E69875;">-</span><span style="color:#D3C6AA;">cli </span><span style="color:#E69875;">-</span><span style="color:#D3C6AA;">D</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>我们来实现一个替换文字内容的 loader。</p><p>定义 loader 内容，其实就是导出一个函数，但注意这个函数不能写成箭头函数的形式，因为后面我们要用到它的<code>this</code>的内容。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// /loaders/replaceLoader.js</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// source就是引入文件的源代码/内容</span></span>
<span class="line"><span style="color:#83C092;">module</span><span style="color:#859289;">.</span><span style="color:#83C092;">exports</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">(source)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // this.query 中是 loader 的 options 传来的参数，下面webpack配置可以看到。</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">query);</span><span style="color:#859289;font-style:italic;"> // 输出：{name: Du}</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 将内容里的&#39;world&#39;换成&#39;Du&#39;</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> source</span><span style="color:#859289;">.</span><span style="color:#A7C080;">replace</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;world&quot;</span><span style="color:#D3C6AA;">,</span><span style="color:#DBBC7F;"> &quot;Du&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>一个最简单的 Loader 便写完了，那如何去使用这个 Loader 呢？</p><p>我们来配置<code>webpack.config.js</code>文件，只需要在<code>module.rules</code>中声明就好。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// /webpack.config.js</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> path </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;path&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#83C092;">module</span><span style="color:#859289;">.</span><span style="color:#83C092;">exports</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  mode</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;development&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  entry</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    main</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;./src/index.js&quot;</span></span>
<span class="line"><span style="color:#D3C6AA;">  },</span></span>
<span class="line"><span style="color:#D3C6AA;">  module</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    rules</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span></span>
<span class="line"><span style="color:#D3C6AA;">      {</span></span>
<span class="line"><span style="color:#D3C6AA;">        test</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> /</span><span style="color:#A7C080;">\\.</span><span style="color:#DBBC7F;">js/</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">        use</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span></span>
<span class="line"><span style="color:#D3C6AA;">          {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">            // 使用的loader的路径</span></span>
<span class="line"><span style="color:#D3C6AA;">            loader</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> path</span><span style="color:#859289;">.</span><span style="color:#A7C080;">resolve</span><span style="color:#D3C6AA;">(__dirname, </span><span style="color:#DBBC7F;">&quot;./loaders/replaceLoader.js&quot;</span><span style="color:#D3C6AA;">),</span></span>
<span class="line"><span style="color:#D3C6AA;">            options</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">              // 这里面可以自定义要传递过去的参数</span></span>
<span class="line"><span style="color:#D3C6AA;">              name</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;Du&quot;</span></span>
<span class="line"><span style="color:#D3C6AA;">            }</span></span>
<span class="line"><span style="color:#D3C6AA;">          }</span></span>
<span class="line"><span style="color:#D3C6AA;">        ]</span></span>
<span class="line"><span style="color:#D3C6AA;">      }</span></span>
<span class="line"><span style="color:#D3C6AA;">    ]</span></span>
<span class="line"><span style="color:#D3C6AA;">  },</span></span>
<span class="line"><span style="color:#D3C6AA;">  output</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    path</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> path</span><span style="color:#859289;">.</span><span style="color:#A7C080;">resolve</span><span style="color:#D3C6AA;">(__dirname, </span><span style="color:#DBBC7F;">&quot;dist&quot;</span><span style="color:#D3C6AA;">),</span></span>
<span class="line"><span style="color:#D3C6AA;">    filename</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;[name].js&quot;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>这样就实现了一个最简单的 Loader。</p><h3 id="this-query" tabindex="-1">this.query <a class="header-anchor" href="#this-query" aria-label="Permalink to &quot;this.query&quot;">​</a></h3><p>关于<code>this.query</code>这个参数的说明，我们还可以查询官方的 api 文档，这里除了 query 以外，还有很多可供选择的 api 可用。</p><p><a href="https://webpack.js.org/api/loaders#thisquery" target="_blank" rel="noreferrer">点击查看 loaders API</a></p><p>例如在传递的参数这里，官方推荐使用<a href="https://github.com/webpack/loader-utils#getoptions" target="_blank" rel="noreferrer">loaderUtils</a>的<code>getOptions</code>方法来解析传递过来的参数。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// /loaders/replaceLoader.js</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> loaderUtils </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;loader-utils&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#83C092;">module</span><span style="color:#859289;">.</span><span style="color:#83C092;">exports</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">(source)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 使用getOptions可以直接拿到options传过来的参数</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> options</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> loaderUtils</span><span style="color:#859289;">.</span><span style="color:#A7C080;">getOptions</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">this</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> source</span><span style="color:#859289;">.</span><span style="color:#A7C080;">replace</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;world&quot;</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> options</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">name);</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="this-callback" tabindex="-1">this.callback <a class="header-anchor" href="#this-callback" aria-label="Permalink to &quot;this.callback&quot;">​</a></h3><p>再解释一个很常用的参数：<code>this.callback</code>，官方解释 A function that can be called synchronously or asynchronously in order to return multiple results.</p><p>使用这个 callback 我们可以 return 回更多不同的结果。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#A7C080;">callback</span><span style="color:#D3C6AA;">(</span></span>
<span class="line"><span style="color:#D3C6AA;">  err: Error </span><span style="color:#E69875;">|</span><span style="color:#D699B6;"> null</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  content: string </span><span style="color:#E69875;">|</span><span style="color:#D3C6AA;"> Buffer,</span></span>
<span class="line"><span style="color:#D3C6AA;">  sourceMap</span><span style="color:#E69875;">?:</span><span style="color:#D3C6AA;"> SourceMap,</span></span>
<span class="line"><span style="color:#D3C6AA;">  meta</span><span style="color:#E69875;">?:</span><span style="color:#D3C6AA;"> any</span></span>
<span class="line"><span style="color:#D3C6AA;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>其中 meta 可以是任何内容，我们套用进我们的代码中，忽略掉 meta 和 sourceMap 参数：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// /loaders/replaceLoader.js</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> loaderUtils </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;loader-utils&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#83C092;">module</span><span style="color:#859289;">.</span><span style="color:#83C092;">exports</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">(source)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 使用getOptions可以直接拿到options传过来的参数</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> options</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> loaderUtils</span><span style="color:#859289;">.</span><span style="color:#A7C080;">getOptions</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">this</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> result</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> source</span><span style="color:#859289;">.</span><span style="color:#A7C080;">replace</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;world&quot;</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> options</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">name);</span></span>
<span class="line"><span style="color:#D699B6;">  this</span><span style="color:#859289;">.</span><span style="color:#A7C080;">callback</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">null</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> result);</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="this-async" tabindex="-1">this.async <a class="header-anchor" href="#this-async" aria-label="Permalink to &quot;this.async&quot;">​</a></h3><blockquote><p>Tells the loader-runner that the loader intends to call back asynchronously. Returns this.callback.</p></blockquote><p>当我们希望在 Loader 中异步调用后再返回结果，这个时候就需要用到<code>this.async</code>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// /loaders/replaceLoader.js</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> loaderUtils </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;loader-utils&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#83C092;">module</span><span style="color:#859289;">.</span><span style="color:#83C092;">exports</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">(source)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> options</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> loaderUtils</span><span style="color:#859289;">.</span><span style="color:#A7C080;">getOptions</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">this</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 声明this.async()</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> callback</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#A7C080;">async</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  setTimeout</span><span style="color:#D3C6AA;">(()</span><span style="color:#E69875;"> =&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">    const</span><span style="color:#D3C6AA;"> result</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> source</span><span style="color:#859289;">.</span><span style="color:#A7C080;">replace</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;world&quot;</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> options</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">name);</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // 使用this.async()，其实就是返回一个this.callback()</span></span>
<span class="line"><span style="color:#A7C080;">    callback</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">null</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> result);</span></span>
<span class="line"><span style="color:#D3C6AA;">  },</span><span style="color:#D699B6;"> 1000</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="多个-loader-叠加使用" tabindex="-1">多个 Loader 叠加使用 <a class="header-anchor" href="#多个-loader-叠加使用" aria-label="Permalink to &quot;多个 Loader 叠加使用&quot;">​</a></h3><p>就和平时多个 Loader 一样叠加即可。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// /webpack.config.js</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> path </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;path&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#83C092;">module</span><span style="color:#859289;">.</span><span style="color:#83C092;">exports</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">...</span></span>
<span class="line"><span style="color:#83C092;">  module</span><span style="color:#D3C6AA;">: {</span></span>
<span class="line"><span style="color:#D3C6AA;">    rules</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span></span>
<span class="line"><span style="color:#D3C6AA;">      {</span></span>
<span class="line"><span style="color:#D3C6AA;">        test</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> /</span><span style="color:#A7C080;">\\.</span><span style="color:#DBBC7F;">js/</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">        use</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span></span>
<span class="line"><span style="color:#D3C6AA;">          {</span></span>
<span class="line"><span style="color:#D3C6AA;">            loader</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> path</span><span style="color:#859289;">.</span><span style="color:#A7C080;">resolve</span><span style="color:#D3C6AA;">(__dirname, </span><span style="color:#DBBC7F;">&quot;./loaders/replaceLoader.js&quot;</span><span style="color:#D3C6AA;">),</span></span>
<span class="line"><span style="color:#D3C6AA;">          },</span></span>
<span class="line"><span style="color:#D3C6AA;">          {</span></span>
<span class="line"><span style="color:#D3C6AA;">            loader</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> path</span><span style="color:#859289;">.</span><span style="color:#A7C080;">resolve</span><span style="color:#D3C6AA;">(__dirname, </span><span style="color:#DBBC7F;">&quot;./loaders/replaceLoader-2.js&quot;</span><span style="color:#D3C6AA;">),</span></span>
<span class="line"><span style="color:#D3C6AA;">            options</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">              name</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;Du&quot;</span></span>
<span class="line"><span style="color:#D3C6AA;">            }</span></span>
<span class="line"><span style="color:#D3C6AA;">          }</span></span>
<span class="line"><span style="color:#D3C6AA;">        ]</span></span>
<span class="line"><span style="color:#D3C6AA;">      }</span></span>
<span class="line"><span style="color:#D3C6AA;">    ]</span></span>
<span class="line"><span style="color:#D3C6AA;">  },</span></span>
<span class="line"><span style="color:#E69875;">...</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>通过<code>resolveLoader</code>，优化<code>loader</code>的引用路径。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// /webpack.config.js</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> path </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;path&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#83C092;">module</span><span style="color:#859289;">.</span><span style="color:#83C092;">exports</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">...</span></span>
<span class="line"><span style="color:#D3C6AA;">  resolveLoader: {</span></span>
<span class="line"><span style="color:#D3C6AA;">    modules</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span><span style="color:#DBBC7F;">&quot;node_modules&quot;</span><span style="color:#D3C6AA;">, </span><span style="color:#DBBC7F;">&quot;./loaders&quot;</span><span style="color:#D3C6AA;">]</span></span>
<span class="line"><span style="color:#D3C6AA;">  },</span></span>
<span class="line"><span style="color:#D3C6AA;">  module</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    rules</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span></span>
<span class="line"><span style="color:#D3C6AA;">      {</span></span>
<span class="line"><span style="color:#D3C6AA;">        test</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> /</span><span style="color:#A7C080;">\\.</span><span style="color:#DBBC7F;">js/</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">        use</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span></span>
<span class="line"><span style="color:#D3C6AA;">          {</span></span>
<span class="line"><span style="color:#D3C6AA;">            loader</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;replaceLoader&quot;</span></span>
<span class="line"><span style="color:#D3C6AA;">          },</span></span>
<span class="line"><span style="color:#D3C6AA;">          {</span></span>
<span class="line"><span style="color:#D3C6AA;">            loader</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;replaceLoaderAsync&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">            options</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">              name</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;lee&quot;</span></span>
<span class="line"><span style="color:#D3C6AA;">            }</span></span>
<span class="line"><span style="color:#D3C6AA;">          }</span></span>
<span class="line"><span style="color:#D3C6AA;">        ]</span></span>
<span class="line"><span style="color:#D3C6AA;">      }</span></span>
<span class="line"><span style="color:#D3C6AA;">    ]</span></span>
<span class="line"><span style="color:#D3C6AA;">  },</span></span>
<span class="line"><span style="color:#E69875;">...</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h2 id="编写一个-plugin" tabindex="-1">编写一个 Plugin <a class="header-anchor" href="#编写一个-plugin" aria-label="Permalink to &quot;编写一个 Plugin&quot;">​</a></h2><p>Plugin 和 Loader 的区别个人理解：Loader 用来处理类似于 js/css/font/svg/img 等等等文件，而 Plugin 是在打包的某一个时刻（打包前、打包时、打包后）来额外做某些事情。</p><p>webpack Plugin 设计模式：发布订阅，事件驱动模式。</p><p>我们下面编写的这个 Plugin 要做的事情：<strong>打包结束后在 dist 目录添加一个版权信息的 txt 文件。</strong></p><p>插件的本质是一个 Class。</p><p>第一步，声明一个插件文件：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// /plugins/copyright-webpack-plugin.js</span></span>
<span class="line"><span style="color:#E67E80;">class</span><span style="color:#7FBBB3;"> CopyrightWebpackPlugin</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 使用插件的时候，会去调用apply方法，其中的compiler是webpack的实例对象。</span></span>
<span class="line"><span style="color:#A7C080;">  apply</span><span style="color:#D3C6AA;">(compiler) {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // compiler.hooks.compile.tap(&#39;CopyrightWebpackPlugin&#39;, (compilation) =&gt; {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // 	console.log(&#39;compiler&#39;);</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // })</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // compiler.hooks.emit.tapAsync(&#39;CopyrightWebpackPlugin&#39;, (compilation, cb) =&gt; {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // 	debugger;</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // 	compilation.assets[&#39;copyright.txt&#39;]= {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // 		source: function() {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // 			return &#39;copyright by dell lee&#39;</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // 		},</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // 		size: function() {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // 			return 21;</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // 		}</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // 	};</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // 	cb();</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // })</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#83C092;">module</span><span style="color:#859289;">.</span><span style="color:#83C092;">exports</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> CopyrightWebpackPlugin;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>第二步，在<code>webpack.config.js</code>中使用它：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// /webpack.config.js</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> path </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;path&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> CopyRightWebpackPlugin </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;./plugins/copyright-webpack-plugin&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#83C092;">module</span><span style="color:#859289;">.</span><span style="color:#83C092;">exports</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  mode</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;development&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  entry</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    main</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;./src/index.js&quot;</span></span>
<span class="line"><span style="color:#D3C6AA;">  },</span></span>
<span class="line"><span style="color:#D3C6AA;">  plugins</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span><span style="color:#E67E80;">new</span><span style="color:#A7C080;"> CopyRightWebpackPlugin</span><span style="color:#D3C6AA;">()],</span></span>
<span class="line"><span style="color:#D3C6AA;">  output</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    path</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> path</span><span style="color:#859289;">.</span><span style="color:#A7C080;">resolve</span><span style="color:#D3C6AA;">(__dirname, </span><span style="color:#DBBC7F;">&quot;dist&quot;</span><span style="color:#D3C6AA;">),</span></span>
<span class="line"><span style="color:#D3C6AA;">    filename</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;[name].js&quot;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>这一下明白了为什么在使用 Plugins 时，总是要 new 一个实例，因为 Plugin 导出的就是一个 Class。</p><p>想接收参数，那就在<code>constructor</code>中接收<code>options</code>来使用：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#83C092;">module</span><span style="color:#859289;">.</span><span style="color:#83C092;">exports</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">	...</span></span>
<span class="line"><span style="color:#D3C6AA;">	plugins: [</span></span>
<span class="line"><span style="color:#E67E80;">		new</span><span style="color:#A7C080;"> CopyRightWebpackPlugin</span><span style="color:#D3C6AA;">({</span></span>
<span class="line"><span style="color:#D3C6AA;">			name</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;du&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">		})</span></span>
<span class="line"><span style="color:#D3C6AA;">	],</span></span>
<span class="line"><span style="color:#E69875;">	...</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// /plugins/copyright-webpack-plugin.js</span></span>
<span class="line"><span style="color:#E67E80;">class</span><span style="color:#7FBBB3;"> CopyrightWebpackPlugin</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  constructor</span><span style="color:#D3C6AA;">(options) {</span></span>
<span class="line"><span style="color:#D3C6AA;">    console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(options); </span><span style="color:#859289;font-style:italic;">// {name:&#39;du&#39;}</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#A7C080;">  apply</span><span style="color:#D3C6AA;">(compiler) {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // do something</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#83C092;">module</span><span style="color:#859289;">.</span><span style="color:#83C092;">exports</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> CopyrightWebpackPlugin;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>钩子执行的时刻说明：<a href="https://webpack.js.org/api/compiler-hooks" target="_blank" rel="noreferrer">compiler-hooks</a></p><p>例如<code>emit</code>：Executed right before emitting assets to output dir.(打包好准备把文件放到输出目录的时刻) 它是一个 AsyncSeriesHook（异步钩子），所以要使用<code>tapAsync</code>。</p><p><code>compilation</code>里存储着这次打包的所有内容。可以打印输出<code>compilation.assets</code>，是一个对象。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">class</span><span style="color:#7FBBB3;"> CopyrightWebpackPlugin</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">  apply</span><span style="color:#D3C6AA;">(compiler) {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // 同步的时刻</span></span>
<span class="line"><span style="color:#D3C6AA;">    compiler</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">hooks</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">compile</span><span style="color:#859289;">.</span><span style="color:#A7C080;">tap</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;CopyrightWebpackPlugin&quot;</span><span style="color:#D3C6AA;">, compilation </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">      console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;compiler&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // 异步的时刻</span></span>
<span class="line"><span style="color:#D3C6AA;">    compiler</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">hooks</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">emit</span><span style="color:#859289;">.</span><span style="color:#A7C080;">tapAsync</span><span style="color:#D3C6AA;">(</span></span>
<span class="line"><span style="color:#DBBC7F;">      &quot;CopyrightWebpackPlugin&quot;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">      (compilation, cb) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">        // 在compilation中新增一个txt文件</span></span>
<span class="line"><span style="color:#D3C6AA;">        compilation</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">assets[</span><span style="color:#DBBC7F;">&quot;copyright.txt&quot;</span><span style="color:#D3C6AA;">] </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">          // 文件的内容</span></span>
<span class="line"><span style="color:#A7C080;">          source</span><span style="color:#859289;">:</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">            return</span><span style="color:#DBBC7F;"> &quot;copyright by dell lee&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">          },</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">          // 这个文件的大小长度是21个字节</span></span>
<span class="line"><span style="color:#A7C080;">          size</span><span style="color:#859289;">:</span><span style="color:#E67E80;"> function</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">            return</span><span style="color:#D699B6;"> 21</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">          }</span></span>
<span class="line"><span style="color:#D3C6AA;">        };</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">        // 用了异步的tapAsync，最后一定要执行一下cb()</span></span>
<span class="line"><span style="color:#A7C080;">        cb</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"><span style="color:#D3C6AA;">      }</span></span>
<span class="line"><span style="color:#D3C6AA;">    );</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#83C092;">module</span><span style="color:#859289;">.</span><span style="color:#83C092;">exports</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> CopyrightWebpackPlugin;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>这样就完成了我们要往打包文件中添加一个 txt 文件的需求。</p><h2 id="编写一个-bundler" tabindex="-1">编写一个 Bundler <a class="header-anchor" href="#编写一个-bundler" aria-label="Permalink to &quot;编写一个 Bundler&quot;">​</a></h2><p>下面我们来自己实现一个简易的打包工具(Bundler)</p><h3 id="模块分析-初始化" tabindex="-1">模块分析-初始化 <a class="header-anchor" href="#模块分析-初始化" aria-label="Permalink to &quot;模块分析-初始化&quot;">​</a></h3><p>首先是项目的目录结构创建。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">npm</span><span style="color:#DBBC7F;"> init</span><span style="color:#DBBC7F;"> -y</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在<code>src</code>下创建三个文件：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// /src/word.js</span></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E69875;"> const</span><span style="color:#D3C6AA;"> word </span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;"> &quot;hello&quot;</span><span style="color:#D3C6AA;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// /src/message.js</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> { word } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;./word.js&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> message </span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;"> \`say </span><span style="color:#A7C080;">\${</span><span style="color:#D3C6AA;">word</span><span style="color:#A7C080;">}</span><span style="color:#DBBC7F;">\`</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">export</span><span style="color:#E67E80;"> default</span><span style="color:#D3C6AA;"> message;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// /src/index.js</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> message </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;./message.js&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(message);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>然后再创建打包配置文件<code>bundler.js</code>，在这里我们使用<code>fs</code>模块来读取入口文件的内容。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// /src/bundler.js</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> fs </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;fs&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#A7C080;"> moduleAnalyser</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> filename </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> content </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> fs</span><span style="color:#859289;">.</span><span style="color:#A7C080;">readFileSync</span><span style="color:#D3C6AA;">(filename, </span><span style="color:#DBBC7F;">&quot;utf-8&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(content);</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"><span style="color:#A7C080;">moduleAnalyser</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;./src/index.js&quot;</span><span style="color:#D3C6AA;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>想要控制台输出代码高亮的话，可以使用<code>cli-highlight</code></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">npm</span><span style="color:#DBBC7F;"> i</span><span style="color:#DBBC7F;"> cli-highlight</span><span style="color:#DBBC7F;"> -g</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>运行我们的代码，代码高亮打印输出<code>content</code>：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">node</span><span style="color:#DBBC7F;"> bundler.js</span><span style="color:#E69875;"> |</span><span style="color:#A7C080;"> highlight</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="`+e+`" alt="bundler_1"></p><p><code>content</code>就是我们引入的<code>&#39;./src/index.js&#39;</code>的内容。</p><h3 id="模块分析-多入口文件依赖" tabindex="-1">模块分析-多入口文件依赖 <a class="header-anchor" href="#模块分析-多入口文件依赖" aria-label="Permalink to &quot;模块分析-多入口文件依赖&quot;">​</a></h3><p>上面只引入了一个模块，能比较方便的获取文件的内容，假如入口文件引入了很多模块，那怎么获取到这些文件的所有依赖？</p><p>我们可以安装使用<code>babel</code>的<a href="https://babeljs.io/docs/en/babel-parser" target="_blank" rel="noreferrer">@babel-parser</a>，这个会把 JS 文件解析为抽象语法树，然后我们再进行分析。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// /src/bundler.js</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> fs </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;fs&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> parser </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;@babel/parser&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#A7C080;"> moduleAnalyser</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> filename </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> content </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> fs</span><span style="color:#859289;">.</span><span style="color:#A7C080;">readFileSync</span><span style="color:#D3C6AA;">(filename, </span><span style="color:#DBBC7F;">&quot;utf-8&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span></span>
<span class="line"><span style="color:#D3C6AA;">    parser</span><span style="color:#859289;">.</span><span style="color:#A7C080;">parse</span><span style="color:#D3C6AA;">(content, {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">      // ES6模式sourceType用module</span></span>
<span class="line"><span style="color:#D3C6AA;">      sourceType</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;module&quot;</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"><span style="color:#D3C6AA;">  );</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"><span style="color:#A7C080;">moduleAnalyser</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;./src/index.js&quot;</span><span style="color:#D3C6AA;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><img src="`+o+`" alt="bundler_2"> 我们可以看到<code>babel-parser</code>把<code>content</code>内容解析成了抽象语法树，我们继续对这个抽象语法树的节点进行展开，打印<code>ast.program.body</code>：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> ast </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> parser</span><span style="color:#859289;">.</span><span style="color:#A7C080;">parse</span><span style="color:#D3C6AA;">(content, {</span></span>
<span class="line"><span style="color:#D3C6AA;">  sourceType</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;module&quot;</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(ast</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">program</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">body);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><img src="`+r+`" alt="bundler_3"></p><p>假如我们多引入一个模块，那输出的内容中会多出一个<code>type: &#39;ImportDeclaration&#39;</code>的 Node 节点。例如我们多引入一个 message1：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// /src/index.js</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> message </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;./message.js&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#83C092;">import</span><span style="color:#D3C6AA;"> message1 </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &quot;./message1.js&quot;</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(message);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>那<code>ast.program.body</code>输出的内容就变成：</p><p><img src="`+c+`" alt="bundler_4"></p><p>可以看到，多出了一个<code>type: &#39;ImportDeclaration</code>的节点。</p><p>遍历每个引入节点有些麻烦，babel 提供了插件<a href="https://babeljs.io/docs/en/babel-traverse" target="_blank" rel="noreferrer">babel-traverse</a>来做这件事。</p><p>安装<code>npm install --save @babel/traverse</code>，然后配合着<code>parse</code>一块解析模块：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// /src/bundler.js</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> fs </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;fs&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> path </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;path&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> parser </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;@babel/parser&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ES6默认导出的export default，所以这里要加 .default</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> traverse </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;@babel/traverse&quot;</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">default;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#A7C080;"> moduleAnalyser</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> filename </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> content </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> fs</span><span style="color:#859289;">.</span><span style="color:#A7C080;">readFileSync</span><span style="color:#D3C6AA;">(filename, </span><span style="color:#DBBC7F;">&quot;utf-8&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> ast </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> parser</span><span style="color:#859289;">.</span><span style="color:#A7C080;">parse</span><span style="color:#D3C6AA;">(content, {</span></span>
<span class="line"><span style="color:#D3C6AA;">    sourceType</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;module&quot;</span></span>
<span class="line"><span style="color:#D3C6AA;">  });</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 声明一个依赖数组</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> dependencies </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [];</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // traverse接收第一个参数是抽象语法树对象</span></span>
<span class="line"><span style="color:#A7C080;">  traverse</span><span style="color:#D3C6AA;">(ast, {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // 筛选出ImportDeclaration类型的节点，然后遍历</span></span>
<span class="line"><span style="color:#A7C080;">    ImportDeclaration</span><span style="color:#D3C6AA;">({ node }) {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">      // dirname 是 filename 的路径地址</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> dirname </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> path</span><span style="color:#859289;">.</span><span style="color:#A7C080;">dirname</span><span style="color:#D3C6AA;">(filename); </span><span style="color:#859289;font-style:italic;">// dirname: ./src</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">      // 拼接路径</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">      // node.source.value就是文件名的值，可以看上面打印输出的内容来取值</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> newFile </span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;"> &quot;./&quot;</span><span style="color:#E69875;"> +</span><span style="color:#D3C6AA;"> path</span><span style="color:#859289;">.</span><span style="color:#A7C080;">join</span><span style="color:#D3C6AA;">(dirname, node</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">source</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">value);</span></span>
<span class="line"><span style="color:#D3C6AA;">      dependencies</span><span style="color:#859289;">.</span><span style="color:#A7C080;">push</span><span style="color:#D3C6AA;">(newFile);</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">  });</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;dependencies:&quot;</span><span style="color:#D3C6AA;">, dependencies);</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"><span style="color:#A7C080;">moduleAnalyser</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;./src/index.js&quot;</span><span style="color:#D3C6AA;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>打印出来的 dependencies 是<code>dependencies: [ &#39;./src/message.js&#39;, &#39;./src/message1.js&#39; ]</code>。</p><p>但是这样的<code>dependencies</code>还不够灵活，因为数组中只有文件的绝对路径，我们来进行改进，让<code>dependencies</code>中，保存文件的相对路径和绝对路径。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// /src/bundler.js</span></span>
<span class="line"><span style="color:#E69875;">...</span></span>
<span class="line"><span style="color:#E69875;">	const</span><span style="color:#D3C6AA;"> dependencies </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {};</span></span>
<span class="line"><span style="color:#A7C080;">  traverse</span><span style="color:#D3C6AA;">(ast, {</span></span>
<span class="line"><span style="color:#A7C080;">    ImportDeclaration</span><span style="color:#D3C6AA;">({node}) {</span></span>
<span class="line"><span style="color:#E69875;">	  const</span><span style="color:#D3C6AA;"> dirname </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> path</span><span style="color:#859289;">.</span><span style="color:#A7C080;">dirname</span><span style="color:#D3C6AA;">(filename);</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> newFile </span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;"> &quot;./&quot;</span><span style="color:#E69875;"> +</span><span style="color:#D3C6AA;"> path</span><span style="color:#859289;">.</span><span style="color:#A7C080;">join</span><span style="color:#D3C6AA;">(dirname, node</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">source</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">value);</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">      // -- dependencies.push(newFile);</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">      // 以对象的形式存放</span></span>
<span class="line"><span style="color:#E69875;">			++</span><span style="color:#D3C6AA;"> dependencies[node</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">source</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">value] </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> newFile;</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">  });</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(dependencies);</span></span>
<span class="line"><span style="color:#E69875;">  ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>输出的<code>dependencies</code>，键是相对路径，值是绝对路径： <img src="`+t+`" alt="bundler_5"></p><h3 id="模块分析-编译入口文件代码" tabindex="-1">模块分析-编译入口文件代码 <a class="header-anchor" href="#模块分析-编译入口文件代码" aria-label="Permalink to &quot;模块分析-编译入口文件代码&quot;">​</a></h3><p>截止目前，我们已经获取了入口文件的所有的依赖，但是这还不够，我们还需要将原始的代码，打包成可以在浏览器上可运行的编译后的代码。</p><p>我们借助<a href="https://babeljs.io/docs/en/babel-core" target="_blank" rel="noreferrer">@babel/core</a>来做这个转化，babel 提供了<code>transformFromAst</code>方法，这个方法可以把抽象语法树(ast)转化为浏览器可执行的代码。</p><p>安装<code>@babel/core</code>，以及<code>@babel/preset-env</code>，babel 需要借助<code>@babel/preset-env</code>来进行编译转化。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">npm</span><span style="color:#DBBC7F;"> i</span><span style="color:#DBBC7F;"> @babel/core</span><span style="color:#DBBC7F;"> @babel/preset-env</span><span style="color:#DBBC7F;"> --save</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// /src/bundler.js</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> babel </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;@babel/core&#39;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#E69875;">...</span></span>
<span class="line"><span style="color:#E69875;">	const</span><span style="color:#D3C6AA;"> dependencies </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {};</span></span>
<span class="line"><span style="color:#A7C080;">  traverse</span><span style="color:#D3C6AA;">(ast, {</span></span>
<span class="line"><span style="color:#A7C080;">    ImportDeclaration</span><span style="color:#D3C6AA;">({node}) {</span></span>
<span class="line"><span style="color:#E69875;">	  const</span><span style="color:#D3C6AA;"> dirname </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> path</span><span style="color:#859289;">.</span><span style="color:#A7C080;">dirname</span><span style="color:#D3C6AA;">(filename);</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> newFile </span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;"> &quot;./&quot;</span><span style="color:#E69875;"> +</span><span style="color:#D3C6AA;"> path</span><span style="color:#859289;">.</span><span style="color:#A7C080;">join</span><span style="color:#D3C6AA;">(dirname, node</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">source</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">value);</span></span>
<span class="line"><span style="color:#D3C6AA;">			dependencies[node</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">source</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">value] </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> newFile;</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">  });</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // AST转化为可执行代码</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> { code } </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> babel</span><span style="color:#859289;">.</span><span style="color:#A7C080;">transformFromAst</span><span style="color:#D3C6AA;">(ast, </span><span style="color:#D699B6;">null</span><span style="color:#D3C6AA;">, {</span></span>
<span class="line"><span style="color:#D3C6AA;">		presets</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span><span style="color:#DBBC7F;">&quot;@babel/preset-env&quot;</span><span style="color:#D3C6AA;">]</span></span>
<span class="line"><span style="color:#D3C6AA;">	});</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(code);</span></span>
<span class="line"><span style="color:#E69875;">  ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p><code>babel.transformFromAst</code>返回的对象中有个<code>code</code>对象，这个对象就是编译好后的文件内容，我们打印它出来看看： <img src="`+i+`" alt="bundler_6"></p><p>可以看到这就是编译后的 ES5 的代码了，那我们模块分析这块的内容就完成了，我们完成了对入口文件的分析，下面是完整的<code>/src/bundler.js</code>文件：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// /src/bundler.js</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> fs </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;fs&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> path </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;path&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> parser </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;@babel/parser&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> traverse </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;@babel/traverse&quot;</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">default;</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> babel </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;@babel/core&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#A7C080;"> moduleAnalyser</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> filename </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> content </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> fs</span><span style="color:#859289;">.</span><span style="color:#A7C080;">readFileSync</span><span style="color:#D3C6AA;">(filename, </span><span style="color:#DBBC7F;">&quot;utf-8&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> ast </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> parser</span><span style="color:#859289;">.</span><span style="color:#A7C080;">parse</span><span style="color:#D3C6AA;">(content, {</span></span>
<span class="line"><span style="color:#D3C6AA;">    sourceType</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;module&quot;</span></span>
<span class="line"><span style="color:#D3C6AA;">  });</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> dependencies </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {};</span></span>
<span class="line"><span style="color:#A7C080;">  traverse</span><span style="color:#D3C6AA;">(ast, {</span></span>
<span class="line"><span style="color:#A7C080;">    ImportDeclaration</span><span style="color:#D3C6AA;">({ node }) {</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> dirname </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> path</span><span style="color:#859289;">.</span><span style="color:#A7C080;">dirname</span><span style="color:#D3C6AA;">(filename);</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> newFile </span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;"> &quot;./&quot;</span><span style="color:#E69875;"> +</span><span style="color:#D3C6AA;"> path</span><span style="color:#859289;">.</span><span style="color:#A7C080;">join</span><span style="color:#D3C6AA;">(dirname, node</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">source</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">value);</span></span>
<span class="line"><span style="color:#D3C6AA;">      dependencies[node</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">source</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">value] </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> newFile;</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">  });</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> { code } </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> babel</span><span style="color:#859289;">.</span><span style="color:#A7C080;">transformFromAst</span><span style="color:#D3C6AA;">(ast, </span><span style="color:#D699B6;">null</span><span style="color:#D3C6AA;">, {</span></span>
<span class="line"><span style="color:#D3C6AA;">    presets</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span><span style="color:#DBBC7F;">&quot;@babel/preset-env&quot;</span><span style="color:#D3C6AA;">]</span></span>
<span class="line"><span style="color:#D3C6AA;">  });</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    filename,</span></span>
<span class="line"><span style="color:#D3C6AA;">    dependencies,</span></span>
<span class="line"><span style="color:#D3C6AA;">    code</span></span>
<span class="line"><span style="color:#D3C6AA;">  };</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> moduleInfo </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> moduleAnalyser</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;./src/index.js&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(moduleInfo);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>打印<code>moduleInfo</code>，导出的对象里的三个值： <img src="`+y+`" alt="bundler_7"></p><h3 id="dependencies-graph" tabindex="-1">Dependencies Graph <a class="header-anchor" href="#dependencies-graph" aria-label="Permalink to &quot;Dependencies Graph&quot;">​</a></h3><p>我们上面只分析了入口文件，只是最外面的一层，但入口文件中引入的文件还没有分析，下面我们要进行这一步，递归地分析入口文件中的引用，为之后代码的生成做准备。</p><p>在之前的代码基础上，我们去掉在<code>index.js</code>中对<code>message1.js</code>的引用，<code>index.js</code>引用<code>message.js</code>，<code>message.js</code>内再引用<code>word.js</code>.</p><p>通过队列的方式来实现一个递归的效果，我们实现一个<code>makeDependenciesGraph</code>函数：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// /src/bundler.js</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 省略引入的模块</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#A7C080;"> moduleAnalyser</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> filename </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 省略moduleAnalyser函数内容</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    filename,</span></span>
<span class="line"><span style="color:#D3C6AA;">    dependencies,</span></span>
<span class="line"><span style="color:#D3C6AA;">    code</span></span>
<span class="line"><span style="color:#D3C6AA;">  };</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#A7C080;"> makeDependenciesGraph</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> entry </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> entryModule </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> moduleAnalyser</span><span style="color:#D3C6AA;">(entry);</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;entryModule: &quot;</span><span style="color:#D3C6AA;">, entryModule);</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> graphArray </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [entryModule];</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;graphArray遍历前: &quot;</span><span style="color:#D3C6AA;">, graphArray);</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 对graphArray遍历</span></span>
<span class="line"><span style="color:#E67E80;">  for</span><span style="color:#D3C6AA;"> (</span><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> i </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 0</span><span style="color:#D3C6AA;">; i </span><span style="color:#E69875;">&lt;</span><span style="color:#D3C6AA;"> graphArray</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">length; i</span><span style="color:#E69875;">++</span><span style="color:#D3C6AA;">) {</span></span>
<span class="line"><span style="color:#E69875;">    const</span><span style="color:#D3C6AA;"> item </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> graphArray[i];</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // 取出对象中的依赖</span></span>
<span class="line"><span style="color:#E69875;">    const</span><span style="color:#D3C6AA;"> { dependencies } </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> item;</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // 有存在依赖则再执行一次moduleAnalyser，并且push到graphArray中</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // 假设是第一次执行，graphArray长度为1，</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // 那push后，graphArray的长度为2，就会继续遍历graphArray中刚push进来的dependencies文件</span></span>
<span class="line"><span style="color:#E67E80;">    if</span><span style="color:#D3C6AA;"> (dependencies) {</span></span>
<span class="line"><span style="color:#E67E80;">      for</span><span style="color:#D3C6AA;"> (</span><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> j </span><span style="color:#E67E80;">in</span><span style="color:#D3C6AA;"> dependencies) {</span></span>
<span class="line"><span style="color:#D3C6AA;">        graphArray</span><span style="color:#859289;">.</span><span style="color:#A7C080;">push</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">moduleAnalyser</span><span style="color:#D3C6AA;">(dependencies[j]));</span></span>
<span class="line"><span style="color:#D3C6AA;">      }</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;graphArray遍历完后: &quot;</span><span style="color:#D3C6AA;">, graphArray);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 创建一个graph对象，包装这个对象来做后续使用</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> graph </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {};</span></span>
<span class="line"><span style="color:#D3C6AA;">  graphArray</span><span style="color:#859289;">.</span><span style="color:#A7C080;">forEach</span><span style="color:#D3C6AA;">(item </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    graph[item</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">filename] </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">      dependencies</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> item</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">dependencies,</span></span>
<span class="line"><span style="color:#D3C6AA;">      code</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> item</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">code</span></span>
<span class="line"><span style="color:#D3C6AA;">    };</span></span>
<span class="line"><span style="color:#D3C6AA;">  });</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> graph;</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> graghInfo </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> makeDependenciesGraph</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;./src/index.js&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;包装后的graghInfo:&quot;</span><span style="color:#D3C6AA;">, graghInfo);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><p>下面我们来看输出，可以看到<code>entryModule</code>对象，就是<code>moduleAnalyser()</code>返回的结果： <img src="`+A+'" alt="bundler_8"></p><p>然后再看遍历前后<code>graphArray</code>的两次输出，第一次数组里只有一个对象，第二次数组里有三个对象： <img src="'+b+'" alt="bundler_9"></p><p>最后看看包装后的<code>graghInfo</code>（依赖树），也就是最终我们期待的对象，键是文件名称，值是<code>dependencies</code>和<code>code</code>： <img src="'+u+`" alt="bundler_10"></p><h3 id="生成代码" tabindex="-1">生成代码 <a class="header-anchor" href="#生成代码" aria-label="Permalink to &quot;生成代码&quot;">​</a></h3><p>现在我们已经拿到对所有代码模块分析生成的结果（Dependencies Graph 依赖图谱），就是上述的<code>graghInfo</code>对象。最后我们需要输出生成一份打包后的代码，使其可以直接在浏览器运行。</p><p>为了避免污染全局环境，代码要使用 IIFE 中执行（闭包环境）。</p><p>我们构造一个函数，使其输出最后我们所需的打包后的 code：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// /src/bundler.js</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// ... 省略上方</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#A7C080;"> generateCode</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> entry </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> graph </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> makeDependenciesGraph</span><span style="color:#D3C6AA;">(entry);</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#DBBC7F;"> \`</span></span>
<span class="line"><span style="color:#DBBC7F;">  (function(graph){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBBC7F;">  })(</span><span style="color:#A7C080;">\${</span><span style="color:#D3C6AA;">graph</span><span style="color:#A7C080;">}</span><span style="color:#DBBC7F;">)</span></span>
<span class="line"><span style="color:#DBBC7F;">  \`</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// -- const graghInfo = makeDependenciesGraph(&#39;./src/index.js&#39;);</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> code </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> generateCode</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;./src/index.js&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;code:&quot;</span><span style="color:#D3C6AA;">, code);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>输出 code：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#83C092;">code</span><span style="color:#859289;">:</span></span>
<span class="line"><span style="color:#D3C6AA;">  (</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">(graph){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">  })([object Object])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这编译后的代码不对，因为上面的<code>\${graph}</code>是个对象，所以我们需要先将这个对象 stringify 后再放入字符拼接中。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">const</span><span style="color:#A7C080;"> generateCode</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> entry </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> graph </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> JSON</span><span style="color:#859289;">.</span><span style="color:#A7C080;">stringify</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">makeDependenciesGraph</span><span style="color:#D3C6AA;">(entry));</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#DBBC7F;"> \`</span></span>
<span class="line"><span style="color:#DBBC7F;">  (function(graph){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBBC7F;">  })(</span><span style="color:#A7C080;">\${</span><span style="color:#D3C6AA;">graph</span><span style="color:#A7C080;">}</span><span style="color:#DBBC7F;">)</span></span>
<span class="line"><span style="color:#DBBC7F;">  \`</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>再次输出 code： <img src="`+C+`" alt="bundler_11"></p><p>看不清楚的话，这里有文字版：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// code内容：</span></span>
<span class="line"><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">(graph)</span><span style="color:#D3C6AA;"> {})({</span></span>
<span class="line"><span style="color:#DBBC7F;">  &quot;./src/index.js&quot;</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    dependencies</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> { </span><span style="color:#DBBC7F;">&quot;./message.js&quot;</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;./src/message.js&quot;</span><span style="color:#D3C6AA;"> },</span></span>
<span class="line"><span style="color:#D3C6AA;">    code</span><span style="color:#859289;">:</span></span>
<span class="line"><span style="color:#DBBC7F;">      &#39;&quot;use strict&quot;;</span><span style="color:#A7C080;">\\n\\n</span><span style="color:#DBBC7F;">var _message = _interopRequireDefault(require(&quot;./message.js&quot;));</span><span style="color:#A7C080;">\\n\\n</span><span style="color:#DBBC7F;">function _interopRequireDefault(obj) { return obj &amp;&amp; obj.__esModule ? obj : { &quot;default&quot;: obj }; }</span><span style="color:#A7C080;">\\n\\n</span><span style="color:#DBBC7F;">console.log(_message[&quot;default&quot;]);&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">  },</span></span>
<span class="line"><span style="color:#DBBC7F;">  &quot;./src/message.js&quot;</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    dependencies</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> { </span><span style="color:#DBBC7F;">&quot;./word.js&quot;</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;./src/word.js&quot;</span><span style="color:#D3C6AA;"> },</span></span>
<span class="line"><span style="color:#D3C6AA;">    code</span><span style="color:#859289;">:</span></span>
<span class="line"><span style="color:#DBBC7F;">      &#39;&quot;use strict&quot;;</span><span style="color:#A7C080;">\\n\\n</span><span style="color:#DBBC7F;">Object.defineProperty(exports, &quot;__esModule&quot;, {</span><span style="color:#A7C080;">\\n</span><span style="color:#DBBC7F;">  value: true</span><span style="color:#A7C080;">\\n</span><span style="color:#DBBC7F;">});</span><span style="color:#A7C080;">\\n</span><span style="color:#DBBC7F;">exports[&quot;default&quot;] = void 0;</span><span style="color:#A7C080;">\\n\\n</span><span style="color:#DBBC7F;">var _word = require(&quot;./word.js&quot;);</span><span style="color:#A7C080;">\\n\\n</span><span style="color:#DBBC7F;">var message = &quot;say &quot;.concat(_word.word);</span><span style="color:#A7C080;">\\n</span><span style="color:#DBBC7F;">var _default = message;</span><span style="color:#A7C080;">\\n</span><span style="color:#DBBC7F;">exports[&quot;default&quot;] = _default;&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">  },</span></span>
<span class="line"><span style="color:#DBBC7F;">  &quot;./src/word.js&quot;</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    dependencies</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {},</span></span>
<span class="line"><span style="color:#D3C6AA;">    code</span><span style="color:#859289;">:</span></span>
<span class="line"><span style="color:#DBBC7F;">      &#39;&quot;use strict&quot;;</span><span style="color:#A7C080;">\\n\\n</span><span style="color:#DBBC7F;">Object.defineProperty(exports, &quot;__esModule&quot;, {</span><span style="color:#A7C080;">\\n</span><span style="color:#DBBC7F;">  value: true</span><span style="color:#A7C080;">\\n</span><span style="color:#DBBC7F;">});</span><span style="color:#A7C080;">\\n</span><span style="color:#DBBC7F;">exports.word = void 0;</span><span style="color:#A7C080;">\\n</span><span style="color:#DBBC7F;">var word = </span><span style="color:#A7C080;">\\&#39;</span><span style="color:#DBBC7F;">hello</span><span style="color:#A7C080;">\\&#39;</span><span style="color:#DBBC7F;">;</span><span style="color:#A7C080;">\\n</span><span style="color:#DBBC7F;">exports.word = word;&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>我们可以看到，如果直接把这些代码放到浏览器是运行不起来的，因为在浏览器中缺少<code>require()</code>函数和<code>exports</code>对象。如果我们直接去执行会报错，下面我们来补充它们。</p><p>首先是构造<code>require()</code>函数：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">const</span><span style="color:#A7C080;"> generateCode</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> entry </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> graph </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> JSON</span><span style="color:#859289;">.</span><span style="color:#A7C080;">stringify</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">makeDependenciesGraph</span><span style="color:#D3C6AA;">(entry));</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#DBBC7F;"> \`</span></span>
<span class="line"><span style="color:#DBBC7F;">  (function(graph){</span></span>
<span class="line"><span style="color:#DBBC7F;">    function require(module) {</span></span>
<span class="line"><span style="color:#DBBC7F;">      (function(code){</span></span>
<span class="line"><span style="color:#DBBC7F;">        eval(code);</span></span>
<span class="line"><span style="color:#DBBC7F;">      })(graph[module].code)</span></span>
<span class="line"><span style="color:#DBBC7F;">    };</span></span>
<span class="line"><span style="color:#DBBC7F;">    require(&#39;</span><span style="color:#A7C080;">\${</span><span style="color:#D3C6AA;">entry</span><span style="color:#A7C080;">}</span><span style="color:#DBBC7F;">&#39;)</span></span>
<span class="line"><span style="color:#DBBC7F;">  })(</span><span style="color:#A7C080;">\${</span><span style="color:#D3C6AA;">graph</span><span style="color:#A7C080;">}</span><span style="color:#DBBC7F;">)</span></span>
<span class="line"><span style="color:#DBBC7F;">  \`</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> code </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> generateCode</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;./src/index.js&quot;</span><span style="color:#D3C6AA;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>但是上面的 require 函数还是有一些问题，eval() 函数会将传入的字符串当做 JavaScript 代码进行执行，我们把<code>eval(code)</code>中的<code>code</code>单独拿出来看看，也就是<code>graph[module].code</code>的内容，有三个，我们看<code>&quot;./src/index.js&quot;</code>的，并把这个字符串先手动转为JS高亮看：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// &quot;./src/index.js&quot;</span></span>
<span class="line"><span style="color:#DBBC7F;">&quot;use strict&quot;</span><span style="color:#D3C6AA;">;\\n\\n</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 注意这里有一个require()</span></span>
<span class="line"><span style="color:#E69875;">var</span><span style="color:#D3C6AA;"> _message </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> _interopRequireDefault</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;./message.js&quot;</span><span style="color:#D3C6AA;">));\\n\\n</span></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> _interopRequireDefault</span><span style="color:#D3C6AA;">(obj)</span><span style="color:#D3C6AA;"> {</span><span style="color:#E67E80;"> return</span><span style="color:#D3C6AA;"> obj</span><span style="color:#E69875;"> &amp;&amp;</span><span style="color:#D3C6AA;"> obj</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">__esModule</span><span style="color:#E69875;"> ?</span><span style="color:#D3C6AA;"> obj</span><span style="color:#E69875;"> :</span><span style="color:#D3C6AA;"> {</span><span style="color:#DBBC7F;"> &quot;default&quot;</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> obj</span><span style="color:#D3C6AA;"> };</span><span style="color:#D3C6AA;"> }\\n\\n</span></span>
<span class="line"><span style="color:#D3C6AA;">console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(_message[</span><span style="color:#DBBC7F;">&quot;default&quot;</span><span style="color:#D3C6AA;">]);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>其中还有一个<code>require(&quot;./message.js&quot;)</code>函数，那再调用<code>_interopRequireDefault</code>方式时，它会再次调用<code>eval()</code>函数外层的<code>require()</code>方法，递归执行，也就是第二次执行的是：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">...</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 第二次执行：require(&quot;./message.js&quot;)</span></span>
<span class="line"><span style="color:#E67E80;">  function</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(module)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    (</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">(code){</span></span>
<span class="line"><span style="color:#A7C080;">      eval</span><span style="color:#D3C6AA;">(code);</span></span>
<span class="line"><span style="color:#D3C6AA;">    })(graph[</span><span style="color:#83C092;">module</span><span style="color:#D3C6AA;">]</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">code)</span></span>
<span class="line"><span style="color:#D3C6AA;">  };</span></span>
<span class="line"><span style="color:#E69875;">...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>而传入的参数<code>./message.js</code>是不对的，它会在<code>graph[module].code</code>中去寻找，即<code>graph[&#39;./message.js&#39;].code</code>，这当然是找不到的，应该是<code>./src/message.js</code>才对。</p><p>所以我们需要对<code>./message.js</code>这样的相对路径做转换，我们再顶一个<code>localRequire()</code>函数，用于返回正确的路径。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">...</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // 第二次执行：require(&quot;./message.js&quot;)</span></span>
<span class="line"><span style="color:#E67E80;">  function</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(module)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    function</span><span style="color:#A7C080;"> localRequire</span><span style="color:#D3C6AA;">(relativePath)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">      // 接收到的relativePath 是 &quot;./message.js&quot;</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">      // 返回require()函数的运行结果是 &quot;./src/message.js&quot;</span></span>
<span class="line"><span style="color:#E67E80;">      return</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(graph[</span><span style="color:#83C092;">module</span><span style="color:#D3C6AA;">]</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">dependencies[relativePath])</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">    (</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">(require,</span><span style="color:#D3C6AA;"> code){</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">      // 这样code里的require()其实就是localRequire中返回的require()，重新声明的</span></span>
<span class="line"><span style="color:#A7C080;">      eval</span><span style="color:#D3C6AA;">(code);</span></span>
<span class="line"><span style="color:#D3C6AA;">    })(localRequire,</span><span style="color:#D3C6AA;"> graph[</span><span style="color:#83C092;">module</span><span style="color:#D3C6AA;">]</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">code)</span></span>
<span class="line"><span style="color:#D3C6AA;">  };</span></span>
<span class="line"><span style="color:#E69875;">...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>最后<code>Object.defineProperty(exports, &#39;property&#39;, {xx:xx})</code>，我们再定义一个<code>exports</code>空对象传入其中，生成代码便完成了。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">const</span><span style="color:#A7C080;"> generateCode</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> (entry) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> graph </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> JSON</span><span style="color:#859289;">.</span><span style="color:#A7C080;">stringify</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">makeDependenciesGraph</span><span style="color:#D3C6AA;">(entry));</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#DBBC7F;"> \`</span></span>
<span class="line"><span style="color:#DBBC7F;">  (function(graph){</span></span>
<span class="line"><span style="color:#DBBC7F;">    function require(module) { </span></span>
<span class="line"><span style="color:#DBBC7F;">      function localRequire(relativePath) {</span></span>
<span class="line"><span style="color:#DBBC7F;">        return require(graph[module].dependencies[relativePath]);</span></span>
<span class="line"><span style="color:#DBBC7F;">      }</span></span>
<span class="line"><span style="color:#DBBC7F;">      var exports = {};</span></span>
<span class="line"><span style="color:#DBBC7F;">      (function(require, exports, code){</span></span>
<span class="line"><span style="color:#DBBC7F;">        eval(code)</span></span>
<span class="line"><span style="color:#DBBC7F;">      })(localRequire, exports, graph[module].code);</span></span>
<span class="line"><span style="color:#DBBC7F;">      return exports;</span></span>
<span class="line"><span style="color:#DBBC7F;">    };</span></span>
<span class="line"><span style="color:#DBBC7F;">    require(&#39;</span><span style="color:#A7C080;">\${</span><span style="color:#D3C6AA;">entry</span><span style="color:#A7C080;">}</span><span style="color:#DBBC7F;">&#39;)</span></span>
<span class="line"><span style="color:#DBBC7F;">  })(</span><span style="color:#A7C080;">\${</span><span style="color:#D3C6AA;">graph</span><span style="color:#A7C080;">}</span><span style="color:#DBBC7F;">);</span></span>
<span class="line"><span style="color:#DBBC7F;">  \`</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> code </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> generateCode</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;./src/index.js&quot;</span><span style="color:#D3C6AA;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>我们打包后的代码可以直接拿到浏览器运行。 <img src="`+d+`" alt="bundler_12"></p><p>打包出来的内容：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">  (</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">(graph){</span></span>
<span class="line"><span style="color:#E67E80;">    function</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(module)</span><span style="color:#D3C6AA;"> {</span><span style="color:#A7C080;"> </span></span>
<span class="line"><span style="color:#E67E80;">      function</span><span style="color:#A7C080;"> localRequire</span><span style="color:#D3C6AA;">(relativePath)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">        return</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(graph[</span><span style="color:#83C092;">module</span><span style="color:#D3C6AA;">]</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">dependencies[relativePath]);</span></span>
<span class="line"><span style="color:#D3C6AA;">      }</span></span>
<span class="line"><span style="color:#E69875;">      var</span><span style="color:#D3C6AA;"> exports</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> {};</span></span>
<span class="line"><span style="color:#D3C6AA;">      (</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">(require,</span><span style="color:#D3C6AA;"> exports,</span><span style="color:#D3C6AA;"> code){</span></span>
<span class="line"><span style="color:#A7C080;">        eval</span><span style="color:#D3C6AA;">(code)</span></span>
<span class="line"><span style="color:#D3C6AA;">      })(localRequire,</span><span style="color:#83C092;"> exports</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> graph[</span><span style="color:#83C092;">module</span><span style="color:#D3C6AA;">]</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">code);</span></span>
<span class="line"><span style="color:#E67E80;">      return</span><span style="color:#83C092;"> exports</span><span style="color:#D3C6AA;">;</span></span>
<span class="line"><span style="color:#D3C6AA;">    };</span></span>
<span class="line"><span style="color:#A7C080;">    require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;./src/index.js&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">  })({</span><span style="color:#DBBC7F;">&quot;./src/index.js&quot;</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;">{</span><span style="color:#DBBC7F;">&quot;dependencies&quot;</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;">{</span><span style="color:#DBBC7F;">&quot;./message.js&quot;</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;">&quot;./src/message.js&quot;</span><span style="color:#D3C6AA;">},</span><span style="color:#DBBC7F;">&quot;code&quot;</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;">&quot;</span><span style="color:#A7C080;">\\&quot;</span><span style="color:#DBBC7F;">use strict</span><span style="color:#A7C080;">\\&quot;</span><span style="color:#DBBC7F;">;</span><span style="color:#A7C080;">\\n\\n</span><span style="color:#DBBC7F;">var _message = _interopRequireDefault(require(</span><span style="color:#A7C080;">\\&quot;</span><span style="color:#DBBC7F;">./message.js</span><span style="color:#A7C080;">\\&quot;</span><span style="color:#DBBC7F;">));</span><span style="color:#A7C080;">\\n\\n</span><span style="color:#DBBC7F;">function _interopRequireDefault(obj) { return obj &amp;&amp; obj.__esModule ? obj : { </span><span style="color:#A7C080;">\\&quot;</span><span style="color:#DBBC7F;">default</span><span style="color:#A7C080;">\\&quot;</span><span style="color:#DBBC7F;">: obj }; }</span><span style="color:#A7C080;">\\n\\n</span><span style="color:#DBBC7F;">console.log(_message[</span><span style="color:#A7C080;">\\&quot;</span><span style="color:#DBBC7F;">default</span><span style="color:#A7C080;">\\&quot;</span><span style="color:#DBBC7F;">]);&quot;</span><span style="color:#D3C6AA;">},</span><span style="color:#DBBC7F;">&quot;./src/message.js&quot;</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;">{</span><span style="color:#DBBC7F;">&quot;dependencies&quot;</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;">{</span><span style="color:#DBBC7F;">&quot;./word.js&quot;</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;">&quot;./src/word.js&quot;</span><span style="color:#D3C6AA;">},</span><span style="color:#DBBC7F;">&quot;code&quot;</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;">&quot;</span><span style="color:#A7C080;">\\&quot;</span><span style="color:#DBBC7F;">use strict</span><span style="color:#A7C080;">\\&quot;</span><span style="color:#DBBC7F;">;</span><span style="color:#A7C080;">\\n\\n</span><span style="color:#DBBC7F;">Object.defineProperty(exports, </span><span style="color:#A7C080;">\\&quot;</span><span style="color:#DBBC7F;">__esModule</span><span style="color:#A7C080;">\\&quot;</span><span style="color:#DBBC7F;">, {</span><span style="color:#A7C080;">\\n</span><span style="color:#DBBC7F;">  value: true</span><span style="color:#A7C080;">\\n</span><span style="color:#DBBC7F;">});</span><span style="color:#A7C080;">\\n</span><span style="color:#DBBC7F;">exports[</span><span style="color:#A7C080;">\\&quot;</span><span style="color:#DBBC7F;">default</span><span style="color:#A7C080;">\\&quot;</span><span style="color:#DBBC7F;">] = void 0;</span><span style="color:#A7C080;">\\n\\n</span><span style="color:#DBBC7F;">var _word = require(</span><span style="color:#A7C080;">\\&quot;</span><span style="color:#DBBC7F;">./word.js</span><span style="color:#A7C080;">\\&quot;</span><span style="color:#DBBC7F;">);</span><span style="color:#A7C080;">\\n\\n</span><span style="color:#DBBC7F;">var message = </span><span style="color:#A7C080;">\\&quot;</span><span style="color:#DBBC7F;">say </span><span style="color:#A7C080;">\\&quot;</span><span style="color:#DBBC7F;">.concat(_word.word);</span><span style="color:#A7C080;">\\n</span><span style="color:#DBBC7F;">var _default = message;</span><span style="color:#A7C080;">\\n</span><span style="color:#DBBC7F;">exports[</span><span style="color:#A7C080;">\\&quot;</span><span style="color:#DBBC7F;">default</span><span style="color:#A7C080;">\\&quot;</span><span style="color:#DBBC7F;">] = _default;&quot;</span><span style="color:#D3C6AA;">},</span><span style="color:#DBBC7F;">&quot;./src/word.js&quot;</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;">{</span><span style="color:#DBBC7F;">&quot;dependencies&quot;</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;">{},</span><span style="color:#DBBC7F;">&quot;code&quot;</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;">&quot;</span><span style="color:#A7C080;">\\&quot;</span><span style="color:#DBBC7F;">use strict</span><span style="color:#A7C080;">\\&quot;</span><span style="color:#DBBC7F;">;</span><span style="color:#A7C080;">\\n\\n</span><span style="color:#DBBC7F;">Object.defineProperty(exports, </span><span style="color:#A7C080;">\\&quot;</span><span style="color:#DBBC7F;">__esModule</span><span style="color:#A7C080;">\\&quot;</span><span style="color:#DBBC7F;">, {</span><span style="color:#A7C080;">\\n</span><span style="color:#DBBC7F;">  value: true</span><span style="color:#A7C080;">\\n</span><span style="color:#DBBC7F;">});</span><span style="color:#A7C080;">\\n</span><span style="color:#DBBC7F;">exports.word = void 0;</span><span style="color:#A7C080;">\\n</span><span style="color:#DBBC7F;">var word = &#39;hello&#39;;</span><span style="color:#A7C080;">\\n</span><span style="color:#DBBC7F;">exports.word = word;&quot;</span><span style="color:#D3C6AA;">}});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>完整的配置文件：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859289;font-style:italic;">// /src/bundler.js</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> fs </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;fs&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> path </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;path&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> parser </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;@babel/parser&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> traverse </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;@babel/traverse&quot;</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">default;</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> babel </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> require</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&quot;@babel/core&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#A7C080;"> moduleAnalyser</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> filename </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> content </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> fs</span><span style="color:#859289;">.</span><span style="color:#A7C080;">readFileSync</span><span style="color:#D3C6AA;">(filename, </span><span style="color:#DBBC7F;">&quot;utf-8&quot;</span><span style="color:#D3C6AA;">);</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> ast </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> parser</span><span style="color:#859289;">.</span><span style="color:#A7C080;">parse</span><span style="color:#D3C6AA;">(content, {</span></span>
<span class="line"><span style="color:#D3C6AA;">    sourceType</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &quot;module&quot;</span></span>
<span class="line"><span style="color:#D3C6AA;">  });</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> dependencies </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {};</span></span>
<span class="line"><span style="color:#A7C080;">  traverse</span><span style="color:#D3C6AA;">(ast, {</span></span>
<span class="line"><span style="color:#A7C080;">    ImportDeclaration</span><span style="color:#D3C6AA;">({ node }) {</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> dirname </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> path</span><span style="color:#859289;">.</span><span style="color:#A7C080;">dirname</span><span style="color:#D3C6AA;">(filename);</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> newFile </span><span style="color:#E69875;">=</span><span style="color:#DBBC7F;"> &quot;./&quot;</span><span style="color:#E69875;"> +</span><span style="color:#D3C6AA;"> path</span><span style="color:#859289;">.</span><span style="color:#A7C080;">join</span><span style="color:#D3C6AA;">(dirname, node</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">source</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">value);</span></span>
<span class="line"><span style="color:#D3C6AA;">      dependencies[node</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">source</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">value] </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> newFile;</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">  });</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> { code } </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> babel</span><span style="color:#859289;">.</span><span style="color:#A7C080;">transformFromAst</span><span style="color:#D3C6AA;">(ast, </span><span style="color:#D699B6;">null</span><span style="color:#D3C6AA;">, {</span></span>
<span class="line"><span style="color:#D3C6AA;">    presets</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> [</span><span style="color:#DBBC7F;">&quot;@babel/preset-env&quot;</span><span style="color:#D3C6AA;">]</span></span>
<span class="line"><span style="color:#D3C6AA;">  });</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    filename,</span></span>
<span class="line"><span style="color:#D3C6AA;">    dependencies,</span></span>
<span class="line"><span style="color:#D3C6AA;">    code</span></span>
<span class="line"><span style="color:#D3C6AA;">  };</span></span>
<span class="line"><span style="color:#D3C6AA;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#A7C080;"> makeDependenciesGraph</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> (entry) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> entryModule </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> moduleAnalyser</span><span style="color:#D3C6AA;">(entry);</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> graphArray </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> [ entryModule ];</span></span>
<span class="line"><span style="color:#E67E80;">	for</span><span style="color:#D3C6AA;">(</span><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> i </span><span style="color:#E69875;">=</span><span style="color:#D699B6;"> 0</span><span style="color:#D3C6AA;">; i </span><span style="color:#E69875;">&lt;</span><span style="color:#D3C6AA;"> graphArray</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">length; i</span><span style="color:#E69875;">++</span><span style="color:#D3C6AA;">) {</span></span>
<span class="line"><span style="color:#E69875;">		const</span><span style="color:#D3C6AA;"> item </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> graphArray[i];</span></span>
<span class="line"><span style="color:#E69875;">		const</span><span style="color:#D3C6AA;"> { dependencies } </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> item;</span></span>
<span class="line"><span style="color:#E67E80;">		if</span><span style="color:#D3C6AA;">(dependencies) {</span></span>
<span class="line"><span style="color:#E67E80;">			for</span><span style="color:#D3C6AA;">(</span><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> j </span><span style="color:#E67E80;">in</span><span style="color:#D3C6AA;"> dependencies) {</span></span>
<span class="line"><span style="color:#D3C6AA;">				graphArray</span><span style="color:#859289;">.</span><span style="color:#A7C080;">push</span><span style="color:#D3C6AA;">(</span></span>
<span class="line"><span style="color:#A7C080;">					moduleAnalyser</span><span style="color:#D3C6AA;">(dependencies[j])</span></span>
<span class="line"><span style="color:#D3C6AA;">				);</span></span>
<span class="line"><span style="color:#D3C6AA;">			}</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> graph </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {};</span></span>
<span class="line"><span style="color:#D3C6AA;">  graphArray</span><span style="color:#859289;">.</span><span style="color:#A7C080;">forEach</span><span style="color:#D3C6AA;">(item </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">		graph[item</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">filename] </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">			dependencies</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> item</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">dependencies,</span></span>
<span class="line"><span style="color:#D3C6AA;">			code</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> item</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">code</span></span>
<span class="line"><span style="color:#D3C6AA;">		}</span></span>
<span class="line"><span style="color:#D3C6AA;">	});</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> graph;</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#A7C080;"> generateCode</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> (entry) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> graph </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> JSON</span><span style="color:#859289;">.</span><span style="color:#A7C080;">stringify</span><span style="color:#D3C6AA;">(</span><span style="color:#A7C080;">makeDependenciesGraph</span><span style="color:#D3C6AA;">(entry));</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#DBBC7F;"> \`</span></span>
<span class="line"><span style="color:#DBBC7F;">  (function(graph){</span></span>
<span class="line"><span style="color:#DBBC7F;">    function require(module) { </span></span>
<span class="line"><span style="color:#DBBC7F;">      function localRequire(relativePath) {</span></span>
<span class="line"><span style="color:#DBBC7F;">        return require(graph[module].dependencies[relativePath]);</span></span>
<span class="line"><span style="color:#DBBC7F;">      }</span></span>
<span class="line"><span style="color:#DBBC7F;">      var exports = {};</span></span>
<span class="line"><span style="color:#DBBC7F;">      (function(require, exports, code){</span></span>
<span class="line"><span style="color:#DBBC7F;">        eval(code)</span></span>
<span class="line"><span style="color:#DBBC7F;">      })(localRequire, exports, graph[module].code);</span></span>
<span class="line"><span style="color:#DBBC7F;">      return exports;</span></span>
<span class="line"><span style="color:#DBBC7F;">    };</span></span>
<span class="line"><span style="color:#DBBC7F;">    require(&#39;</span><span style="color:#A7C080;">\${</span><span style="color:#D3C6AA;">entry</span><span style="color:#A7C080;">}</span><span style="color:#DBBC7F;">&#39;)</span></span>
<span class="line"><span style="color:#DBBC7F;">  })(</span><span style="color:#A7C080;">\${</span><span style="color:#D3C6AA;">graph</span><span style="color:#A7C080;">}</span><span style="color:#DBBC7F;">);</span></span>
<span class="line"><span style="color:#DBBC7F;">  \`</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> code </span><span style="color:#E69875;">=</span><span style="color:#A7C080;"> generateCode</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;./src/index.js&#39;</span><span style="color:#D3C6AA;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br></div></div>`,133)]))}const F=n(D,[["render",m]]);export{f as __pageData,F as default};
