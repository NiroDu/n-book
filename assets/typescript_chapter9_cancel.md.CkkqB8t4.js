import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.D-6U7MZ9.js";const C=JSON.parse('{"title":"取消功能的设计与实现","description":"","frontmatter":{},"headers":[],"relativePath":"typescript/chapter9/cancel.md","filePath":"typescript/chapter9/cancel.md","lastUpdated":1562148797000}'),e={name:"typescript/chapter9/cancel.md"};function o(c,s,r,t,i,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="取消功能的设计与实现" tabindex="-1">取消功能的设计与实现 <a class="header-anchor" href="#取消功能的设计与实现" aria-label="Permalink to &quot;取消功能的设计与实现&quot;">​</a></h1><h2 id="需求分析" tabindex="-1">需求分析 <a class="header-anchor" href="#需求分析" aria-label="Permalink to &quot;需求分析&quot;">​</a></h2><p>有些场景下，我们希望能主动取消请求，比如常见的搜索框案例，在用户输入过程中，搜索框的内容也在不断变化，正常情况每次变化我们都应该向服务端发送一次请求。但是当用户输入过快的时候，我们不希望每次变化请求都发出去，通常一个解决方案是前端用 debounce 的方案，比如延时 200ms 发送请求。这样当用户连续输入的字符，只要输入间隔小于 200ms，前面输入的字符都不会发请求。</p><p>但是还有一种极端情况是后端接口很慢，比如超过 1s 才能响应，这个时候即使做了 200ms 的 debounce，但是在我慢慢输入（每个输入间隔超过 200ms）的情况下，在前面的请求没有响应前，也有可能发出去多个请求。因为接口的响应时长是不定的，如果先发出去的请求响应时长比后发出去的请求要久一些，后请求的响应先回来，先请求的响应后回来，就会出现前面请求响应结果覆盖后面请求响应结果的情况，那么就乱了。因此在这个场景下，我们除了做 debounce，还希望后面的请求发出去的时候，如果前面的请求还没有响应，我们可以把前面的请求取消。</p><p>从 axios 的取消接口设计层面，我们希望做如下的设计：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> CancelToken </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> axios</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">CancelToken;</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> source </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> CancelToken</span><span style="color:#859289;">.</span><span style="color:#A7C080;">source</span><span style="color:#D3C6AA;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">axios</span><span style="color:#859289;">.</span><span style="color:#A7C080;">get</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/user/12345&#39;</span><span style="color:#D3C6AA;">, {</span></span>
<span class="line"><span style="color:#D3C6AA;">  cancelToken</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> source</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">token</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span><span style="color:#859289;">.</span><span style="color:#A7C080;">catch</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;"> (e)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  if</span><span style="color:#D3C6AA;"> (axios</span><span style="color:#859289;">.</span><span style="color:#A7C080;">isCancel</span><span style="color:#D3C6AA;">(e))</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;Request canceled&#39;</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> e</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">message);</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span><span style="color:#E67E80;"> else</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">    // 处理错误</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 取消请求 (请求原因是可选的)</span></span>
<span class="line"><span style="color:#D3C6AA;">source</span><span style="color:#859289;">.</span><span style="color:#A7C080;">cancel</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;Operation canceled by the user.&#39;</span><span style="color:#D3C6AA;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>我们给 <code>axios</code> 添加一个 <code>CancelToken</code> 的对象，它有一个 <code>source</code> 方法可以返回一个 <code>source</code> 对象，<code>source.token</code> 是在每次请求的时候传给配置对象中的 <code>cancelToken</code> 属性，然后在请求发出去之后，我们可以通过 <code>source.cancel</code> 方法取消请求。</p><p>我们还支持另一种方式的调用：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> CancelToken </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> axios</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">CancelToken;</span></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> cancel;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">axios</span><span style="color:#859289;">.</span><span style="color:#A7C080;">get</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/user/12345&#39;</span><span style="color:#D3C6AA;">, {</span></span>
<span class="line"><span style="color:#D3C6AA;">  cancelToken</span><span style="color:#859289;">:</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> CancelToken</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> executor</span><span style="color:#D3C6AA;">(c)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    cancel</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> c;</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"><span style="color:#D3C6AA;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">// 取消请求</span></span>
<span class="line"><span style="color:#A7C080;">cancel</span><span style="color:#D3C6AA;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><code>axios.CancelToken</code> 是一个类，我们直接把它实例化的对象传给请求配置中的 <code>cancelToken</code> 属性，<code>CancelToken</code> 的构造函数参数支持传入一个 <code>executor</code> 方法，该方法的参数是一个取消函数 <code>c</code>，我们可以在 <code>executor</code> 方法执行的内部拿到这个取消函数 <code>c</code>，赋值给我们外部定义的 <code>cancel</code> 变量，之后我们可以通过调用这个 <code>cancel</code> 方法来取消请求。</p><h2 id="异步分离的设计方案" tabindex="-1">异步分离的设计方案 <a class="header-anchor" href="#异步分离的设计方案" aria-label="Permalink to &quot;异步分离的设计方案&quot;">​</a></h2><p>通过需求分析，我们知道想要实现取消某次请求，我们需要为该请求配置一个 <code>cancelToken</code>，然后在外部调用一个 <code>cancel</code> 方法。</p><p>请求的发送是一个异步过程，最终会执行 <code>xhr.send</code> 方法，<code>xhr</code> 对象提供了 <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/abort" target="_blank" rel="noreferrer"><code>abort</code></a> 方法，可以把请求取消。因为我们在外部是碰不到 <code>xhr</code> 对象的，所以我们想在执行 <code>cancel</code> 的时候，去执行 <code>xhr.abort</code> 方法。</p><p>现在就相当于我们在 <code>xhr</code> 异步请求过程中，插入一段代码，当我们在外部执行 <code>cancel</code> 函数的时候，会驱动这段代码的执行，然后执行 <code>xhr.abort</code> 方法取消请求。</p><p>我们可以利用 Promise 实现异步分离，也就是在 <code>cancelToken</code> 中保存一个 <code>pending</code> 状态的 Promise 对象，然后当我们执行 <code>cancel</code> 方法的时候，能够访问到这个 Promise 对象，把它从 <code>pending</code> 状态变成 <code>resolved</code> 状态，这样我们就可以在 <code>then</code> 函数中去实现取消请求的逻辑，类似如下的代码：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#E67E80;">if</span><span style="color:#D3C6AA;"> (cancelToken) {</span></span>
<span class="line"><span style="color:#D3C6AA;">  cancelToken</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">promise</span></span>
<span class="line"><span style="color:#859289;">    .</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(reason </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">      request</span><span style="color:#859289;">.</span><span style="color:#A7C080;">abort</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#A7C080;">      reject</span><span style="color:#D3C6AA;">(reason)</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="canceltoken-类实现" tabindex="-1">CancelToken 类实现 <a class="header-anchor" href="#canceltoken-类实现" aria-label="Permalink to &quot;CancelToken 类实现&quot;">​</a></h2><p>接下来，我们就来实现这个 <code>CancelToken</code> 类，先来看一下接口定义：</p><h3 id="接口定义" tabindex="-1">接口定义 <a class="header-anchor" href="#接口定义" aria-label="Permalink to &quot;接口定义&quot;">​</a></h3><p><code>types/index.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> interface</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#D3C6AA;">  cancelToken</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#83C092;"> CancelToken</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> interface</span><span style="color:#83C092;"> CancelToken</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  promise</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Promise</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#7FBBB3;">string</span><span style="color:#D3C6AA;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">  reason</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> interface</span><span style="color:#83C092;"> Canceler</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  (message</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> void</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> interface</span><span style="color:#83C092;"> CancelExecutor</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  (cancel</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Canceler</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> void</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>其中 <code>CancelToken</code> 是实例类型的接口定义，<code>Canceler</code> 是取消方法的接口定义，<code>CancelExecutor</code> 是 <code>CancelToken</code> 类构造函数参数的接口定义。</p><h3 id="代码实现" tabindex="-1">代码实现 <a class="header-anchor" href="#代码实现" aria-label="Permalink to &quot;代码实现&quot;">​</a></h3><p>我们单独创建 <code>cancel</code> 目录来管理取消相关的代码，在 <code>cancel</code> 目录下创建 <code>CancelToken.ts</code> 文件：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">import</span><span style="color:#D3C6AA;"> { CancelExecutor } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;../types&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">interface</span><span style="color:#83C092;"> ResolvePromise</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  (reason</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> void</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> default</span><span style="color:#E67E80;"> class</span><span style="color:#83C092;"> CancelToken</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  promise</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Promise</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#7FBBB3;">string</span><span style="color:#D3C6AA;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">  reason</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">  constructor</span><span style="color:#D3C6AA;">(executor</span><span style="color:#859289;">:</span><span style="color:#83C092;"> CancelExecutor</span><span style="color:#D3C6AA;">) {</span></span>
<span class="line"><span style="color:#E69875;">    let</span><span style="color:#D3C6AA;"> resolvePromise</span><span style="color:#859289;">:</span><span style="color:#83C092;"> ResolvePromise</span></span>
<span class="line"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">promise </span><span style="color:#E69875;">=</span><span style="color:#E67E80;"> new</span><span style="color:#7FBBB3;"> Promise</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#7FBBB3;">string</span><span style="color:#D3C6AA;">&gt;(resolve </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">      resolvePromise </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> resolve</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">    executor</span><span style="color:#D3C6AA;">(message </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">      if</span><span style="color:#D3C6AA;"> (</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">reason) {</span></span>
<span class="line"><span style="color:#E67E80;">        return</span></span>
<span class="line"><span style="color:#D3C6AA;">      }</span></span>
<span class="line"><span style="color:#D699B6;">      this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">reason </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> message</span></span>
<span class="line"><span style="color:#A7C080;">      resolvePromise</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">reason)</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>在 <code>CancelToken</code> 构造函数内部，实例化一个 <code>pending</code> 状态的 Promise 对象，然后用一个 <code>resolvePromise</code> 变量指向 <code>resolve</code> 函数。接着执行 <code>executor</code> 函数，传入一个 <code>cancel</code> 函数，在 <code>cancel</code> 函数内部，会调用 <code>resolvePromise</code> 把 Promise 对象从 <code>pending</code> 状态变为 <code>resolved</code> 状态。</p><p>接着我们在 <code>xhr.ts</code> 中插入一段取消请求的逻辑。</p><p><code>core/xhr.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> { </span><span style="color:#859289;font-style:italic;">/*....*/</span><span style="color:#D3C6AA;"> cancelToken } </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> config</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">if</span><span style="color:#D3C6AA;"> (cancelToken) {</span></span>
<span class="line"><span style="color:#D3C6AA;">  cancelToken</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">promise</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">(reason </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    request</span><span style="color:#859289;">.</span><span style="color:#A7C080;">abort</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#A7C080;">    reject</span><span style="color:#D3C6AA;">(reason)</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>这样就满足了第二种使用方式，接着我们要实现第一种使用方式，给 <code>CancelToken</code> 扩展静态接口。</p><h2 id="canceltoken-扩展静态接口" tabindex="-1">CancelToken 扩展静态接口 <a class="header-anchor" href="#canceltoken-扩展静态接口" aria-label="Permalink to &quot;CancelToken 扩展静态接口&quot;">​</a></h2><h3 id="接口定义-1" tabindex="-1">接口定义 <a class="header-anchor" href="#接口定义-1" aria-label="Permalink to &quot;接口定义&quot;">​</a></h3><p><code>types/index.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> interface</span><span style="color:#83C092;"> CancelTokenSource</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  token</span><span style="color:#859289;">:</span><span style="color:#83C092;"> CancelToken</span></span>
<span class="line"><span style="color:#D3C6AA;">  cancel</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Canceler</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> interface</span><span style="color:#83C092;"> CancelTokenStatic</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  new</span><span style="color:#D3C6AA;">(executor</span><span style="color:#859289;">:</span><span style="color:#83C092;"> CancelExecutor</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> CancelToken</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  source</span><span style="color:#D3C6AA;">()</span><span style="color:#859289;">:</span><span style="color:#83C092;"> CancelTokenSource</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>其中 <code>CancelTokenSource</code> 作为 <code>CancelToken</code> 类静态方法 <code>source</code> 函数的返回值类型，<code>CancelTokenStatic</code> 则作为 <code>CancelToken</code> 类的类类型。</p><h3 id="代码实现-1" tabindex="-1">代码实现 <a class="header-anchor" href="#代码实现-1" aria-label="Permalink to &quot;代码实现&quot;">​</a></h3><p><code>cancel/CancelToken.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> default</span><span style="color:#E67E80;"> class</span><span style="color:#83C092;"> CancelToken</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">  static</span><span style="color:#A7C080;"> source</span><span style="color:#D3C6AA;">()</span><span style="color:#859289;">:</span><span style="color:#83C092;"> CancelTokenSource</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">    let</span><span style="color:#D3C6AA;"> cancel</span><span style="color:#E69875;">!</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Canceler</span></span>
<span class="line"><span style="color:#E69875;">    const</span><span style="color:#D3C6AA;"> token </span><span style="color:#E69875;">=</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> CancelToken</span><span style="color:#D3C6AA;">(c </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">      cancel </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> c</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"><span style="color:#E67E80;">    return</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">      cancel,</span></span>
<span class="line"><span style="color:#D3C6AA;">      token</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><code>source</code> 的静态方法很简单，定义一个 <code>cancel</code> 变量实例化一个 <code>CancelToken</code> 类型的对象，然后在 <code>executor</code> 函数中，把 <code>cancel</code> 指向参数 <code>c</code> 这个取消函数。</p><p>这样就满足了我们第一种使用方式，但是在第一种使用方式的例子中，我们在捕获请求的时候，通过 <code>axios.isCancel</code> 来判断这个错误参数 e 是不是一次取消请求导致的错误，接下来我们对取消错误的原因做一层包装，并且把给 <code>axios</code> 扩展静态方法</p><h2 id="cancel-类实现及-axios-的扩展" tabindex="-1">Cancel 类实现及 axios 的扩展 <a class="header-anchor" href="#cancel-类实现及-axios-的扩展" aria-label="Permalink to &quot;Cancel 类实现及 axios 的扩展&quot;">​</a></h2><h3 id="接口定义-2" tabindex="-1">接口定义 <a class="header-anchor" href="#接口定义-2" aria-label="Permalink to &quot;接口定义&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> interface</span><span style="color:#83C092;"> Cancel</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  message</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> interface</span><span style="color:#83C092;"> CancelStatic</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  new</span><span style="color:#D3C6AA;">(message</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Cancel</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> interface</span><span style="color:#83C092;"> AxiosStatic</span><span style="color:#E69875;"> extends</span><span style="color:#83C092;"> AxiosInstance</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">  create</span><span style="color:#D3C6AA;">(config</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosInstance</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">  CancelToken</span><span style="color:#859289;">:</span><span style="color:#83C092;"> CancelTokenStatic</span></span>
<span class="line"><span style="color:#D3C6AA;">  Cancel</span><span style="color:#859289;">:</span><span style="color:#83C092;"> CancelStatic</span></span>
<span class="line"><span style="color:#A7C080;">  isCancel</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> (value</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">) </span><span style="color:#E69875;">=&gt;</span><span style="color:#7FBBB3;"> boolean</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>其中 <code>Cancel</code> 是实例类型的接口定义，<code>CancelStatic</code> 是类类型的接口定义，并且我们给 <code>axios</code> 扩展了多个静态方法。</p><h3 id="代码实现-2" tabindex="-1">代码实现 <a class="header-anchor" href="#代码实现-2" aria-label="Permalink to &quot;代码实现&quot;">​</a></h3><p>我在 <code>cancel</code> 目录下创建 <code>Cancel.ts</code> 文件。</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> default</span><span style="color:#E67E80;"> class</span><span style="color:#83C092;"> Cancel</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  message</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">  constructor</span><span style="color:#D3C6AA;">(message</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span><span style="color:#D3C6AA;">) {</span></span>
<span class="line"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">message </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> message</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> function</span><span style="color:#A7C080;"> isCancel</span><span style="color:#D3C6AA;">(value</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> boolean</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#D3C6AA;"> value</span><span style="color:#E67E80;"> instanceof</span><span style="color:#83C092;"> Cancel</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><code>Cancel</code> 类非常简单，拥有一个 <code>message</code> 的公共属性。<code>isCancel</code> 方法也非常简单，通过 <code>instanceof</code> 来判断传入的值是不是一个 <code>Cancel</code> 对象。</p><p>接着我们对 <code>CancelToken</code> 类中的 <code>reason</code> 类型做修改，把它变成一个 <code>Cancel</code> 类型的实例。</p><p>先修改定义部分。</p><p><code>types/index.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> interface</span><span style="color:#83C092;"> CancelToken</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  promise</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Promise</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">Cancel</span><span style="color:#D3C6AA;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">  reason</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Cancel</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>再修改实现部分：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">import</span><span style="color:#D3C6AA;"> Cancel </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;./Cancel&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">interface</span><span style="color:#83C092;"> ResolvePromise</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  (reason</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Cancel</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> void</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> default</span><span style="color:#E67E80;"> class</span><span style="color:#83C092;"> CancelToken</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  promise</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Promise</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">Cancel</span><span style="color:#D3C6AA;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">  reason</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Cancel</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">  constructor</span><span style="color:#D3C6AA;">(executor</span><span style="color:#859289;">:</span><span style="color:#83C092;"> CancelExecutor</span><span style="color:#D3C6AA;">) {</span></span>
<span class="line"><span style="color:#E69875;">    let</span><span style="color:#D3C6AA;"> resolvePromise</span><span style="color:#859289;">:</span><span style="color:#83C092;"> ResolvePromise</span></span>
<span class="line"><span style="color:#D699B6;">    this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">promise </span><span style="color:#E69875;">=</span><span style="color:#E67E80;"> new</span><span style="color:#7FBBB3;"> Promise</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">Cancel</span><span style="color:#D3C6AA;">&gt;(resolve </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">      resolvePromise </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> resolve</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">    executor</span><span style="color:#D3C6AA;">(message </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">      if</span><span style="color:#D3C6AA;"> (</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">reason) {</span></span>
<span class="line"><span style="color:#E67E80;">        return</span></span>
<span class="line"><span style="color:#D3C6AA;">      }</span></span>
<span class="line"><span style="color:#D699B6;">      this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">reason </span><span style="color:#E69875;">=</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> Cancel</span><span style="color:#D3C6AA;">(message)</span></span>
<span class="line"><span style="color:#A7C080;">      resolvePromise</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">reason)</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>接下来我们给 <code>axios</code> 扩展一些静态方法，供用户使用。</p><p><code>axios.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">import</span><span style="color:#D3C6AA;"> CancelToken </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;./cancel/CancelToken&#39;</span></span>
<span class="line"><span style="color:#D699B6;">import</span><span style="color:#D3C6AA;"> Cancel, { isCancel } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;./cancel/Cancel&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">axios</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">CancelToken </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> CancelToken</span></span>
<span class="line"><span style="color:#D3C6AA;">axios</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">Cancel </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> Cancel</span></span>
<span class="line"><span style="color:#D3C6AA;">axios</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">isCancel </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> isCancel</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="额外逻辑实现" tabindex="-1">额外逻辑实现 <a class="header-anchor" href="#额外逻辑实现" aria-label="Permalink to &quot;额外逻辑实现&quot;">​</a></h2><p>除此之外，我们还需要实现一些额外逻辑，比如当一个请求携带的 <code>cancelToken</code> 已经被使用过，那么我们甚至都可以不发送这个请求，只需要抛一个异常即可，并且抛异常的信息就是我们取消的原因，所以我们需要给 <code>CancelToken</code> 扩展一个方法。</p><p>先修改定义部分。</p><p><code>types/index.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> interface</span><span style="color:#83C092;"> CancelToken</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  promise</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Promise</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">Cancel</span><span style="color:#D3C6AA;">&gt;</span></span>
<span class="line"><span style="color:#D3C6AA;">  reason</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Cancel</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  throwIfRequested</span><span style="color:#D3C6AA;">()</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> void</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>添加一个 <code>throwIfRequested</code> 方法，接下来实现它：</p><p><code>cancel/CancelToken.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> default</span><span style="color:#E67E80;"> class</span><span style="color:#83C092;"> CancelToken</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">  throwIfRequested</span><span style="color:#D3C6AA;">()</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> void</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    if</span><span style="color:#D3C6AA;"> (</span><span style="color:#D699B6;">this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">reason) {</span></span>
<span class="line"><span style="color:#E67E80;">      throw</span><span style="color:#D699B6;"> this</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">reason</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>判断如果存在 <code>this.reason</code>，说明这个 <code>token</code> 已经被使用过了，直接抛错。</p><p>接下来在发送请求前增加一段逻辑。</p><p><code>core/dispatchRequest.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> default</span><span style="color:#E67E80;"> function</span><span style="color:#A7C080;"> dispatchRequest</span><span style="color:#D3C6AA;">(config</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosPromise</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">  throwIfCancellationRequested</span><span style="color:#D3C6AA;">(config)</span></span>
<span class="line"><span style="color:#A7C080;">  processConfig</span><span style="color:#D3C6AA;">(config)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> throwIfCancellationRequested</span><span style="color:#D3C6AA;">(config</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> void</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  if</span><span style="color:#D3C6AA;"> (config</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">cancelToken)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    config</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">cancelToken</span><span style="color:#859289;">.</span><span style="color:#A7C080;">throwIfRequested</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>发送请求前检查一下配置的 cancelToken 是否已经使用过了，如果已经被用过则不用法请求，直接抛异常。</p><h2 id="demo-编写" tabindex="-1">demo 编写 <a class="header-anchor" href="#demo-编写" aria-label="Permalink to &quot;demo 编写&quot;">​</a></h2><p>在 <code>examples</code> 目录下创建 <code>cancel</code> 目录，在 <code>cancel</code> 目录下创建 <code>index.html</code>:</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">&lt;!</span><span style="color:#E69875;">DOCTYPE</span><span style="color:#DBBC7F;"> html</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">&lt;</span><span style="color:#E69875;">html</span><span style="color:#DBBC7F;"> lang</span><span style="color:#A7C080;">=</span><span style="color:#A7C080;">&quot;en&quot;</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">  &lt;</span><span style="color:#E69875;">head</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;</span><span style="color:#E69875;">meta</span><span style="color:#DBBC7F;"> charset</span><span style="color:#A7C080;">=</span><span style="color:#A7C080;">&quot;utf-8&quot;</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;</span><span style="color:#E69875;">title</span><span style="color:#A7C080;">&gt;</span><span style="color:#D3C6AA;">Cancel example</span><span style="color:#A7C080;">&lt;/</span><span style="color:#E69875;">title</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">  &lt;/</span><span style="color:#E69875;">head</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">  &lt;</span><span style="color:#E69875;">body</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;</span><span style="color:#E69875;">script</span><span style="color:#DBBC7F;"> src</span><span style="color:#A7C080;">=</span><span style="color:#A7C080;">&quot;/__build__/cancel.js&quot;</span><span style="color:#A7C080;">&gt;&lt;/</span><span style="color:#E69875;">script</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">  &lt;/</span><span style="color:#E69875;">body</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">&lt;/</span><span style="color:#E69875;">html</span><span style="color:#A7C080;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>接着创建 <code>app.ts</code> 作为入口文件：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">import</span><span style="color:#D3C6AA;"> axios, { Canceler } </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;../../src/index&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> CancelToken </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> axios</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">CancelToken</span></span>
<span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> source </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> CancelToken</span><span style="color:#859289;">.</span><span style="color:#A7C080;">source</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">axios</span><span style="color:#859289;">.</span><span style="color:#A7C080;">get</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/cancel/get&#39;</span><span style="color:#D3C6AA;">, {</span></span>
<span class="line"><span style="color:#D3C6AA;">  cancelToken</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> source</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">token</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span><span style="color:#859289;">.</span><span style="color:#A7C080;">catch</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">(e)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  if</span><span style="color:#D3C6AA;"> (axios</span><span style="color:#859289;">.</span><span style="color:#A7C080;">isCancel</span><span style="color:#D3C6AA;">(e))</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;Request canceled&#39;</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> e</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">message)</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">setTimeout</span><span style="color:#D3C6AA;">(() </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  source</span><span style="color:#859289;">.</span><span style="color:#A7C080;">cancel</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;Operation canceled by the user.&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">  axios</span><span style="color:#859289;">.</span><span style="color:#A7C080;">post</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/cancel/post&#39;</span><span style="color:#D3C6AA;">, { a</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 1</span><span style="color:#D3C6AA;"> }, { cancelToken</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> source</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">token })</span><span style="color:#859289;">.</span><span style="color:#A7C080;">catch</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">(e)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    if</span><span style="color:#D3C6AA;"> (axios</span><span style="color:#859289;">.</span><span style="color:#A7C080;">isCancel</span><span style="color:#D3C6AA;">(e))</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">      console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(e</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">message)</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"><span style="color:#D3C6AA;">}, </span><span style="color:#D699B6;">100</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">let</span><span style="color:#D3C6AA;"> cancel</span><span style="color:#859289;">:</span><span style="color:#83C092;"> Canceler</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">axios</span><span style="color:#859289;">.</span><span style="color:#A7C080;">get</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/cancel/get&#39;</span><span style="color:#D3C6AA;">, {</span></span>
<span class="line"><span style="color:#D3C6AA;">  cancelToken</span><span style="color:#859289;">:</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> CancelToken</span><span style="color:#D3C6AA;">(c </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    cancel </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> c</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span><span style="color:#859289;">.</span><span style="color:#A7C080;">catch</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">(e)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  if</span><span style="color:#D3C6AA;"> (axios</span><span style="color:#859289;">.</span><span style="color:#A7C080;">isCancel</span><span style="color:#D3C6AA;">(e))</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;Request canceled&#39;</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">setTimeout</span><span style="color:#D3C6AA;">(() </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">  cancel</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#D3C6AA;">}, </span><span style="color:#D699B6;">200</span><span style="color:#D3C6AA;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><p>我们的 demo 展示了 2 种使用方式，也演示了如果一个 token 已经被使用过，则再次携带该 token 的请求并不会发送。</p><p>至此，我们完成了 <code>ts-axios</code> 的请求取消功能，我们巧妙地利用了 Promise 实现了异步分离。目前官方 <code>axios</code> 库的一些大的 feature 我们都已经实现了，下面的章节我们就开始补充完善 <code>ts-axios</code> 的其它功能。</p>`,77)]))}const b=n(e,[["render",o]]);export{C as __pageData,b as default};
