import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.D-6U7MZ9.js";const C=JSON.parse('{"title":"错误处理","description":"","frontmatter":{},"headers":[],"relativePath":"typescript/chapter5/error.md","filePath":"typescript/chapter5/error.md","lastUpdated":1562065220000}'),e={name:"typescript/chapter5/error.md"};function o(r,s,c,t,A,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="错误处理" tabindex="-1">错误处理 <a class="header-anchor" href="#错误处理" aria-label="Permalink to &quot;错误处理&quot;">​</a></h1><h2 id="需求分析" tabindex="-1">需求分析 <a class="header-anchor" href="#需求分析" aria-label="Permalink to &quot;需求分析&quot;">​</a></h2><p>在上一章节，我们实现了 <code>ts-axios</code> 的基础功能，但目前为止我们都是处理了正常接收请求的逻辑，并没有考虑到任何错误情况的处理，这对于一个程序的健壮性而言是远不够的，因此我们这一章需要对 AJAX 各种错误情况做处理。</p><p>并且我们希望程序也能捕获到这些错误，做进一步的处理。</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">axios</span><span style="color:#D3C6AA;">({</span></span>
<span class="line"><span style="color:#D3C6AA;">  method</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;get&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  url</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;/error/get&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">((res) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(res)</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span><span style="color:#859289;">.</span><span style="color:#A7C080;">catch</span><span style="color:#D3C6AA;">((e) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(e)</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>如果在请求的过程中发生任何错误，我们都可以在 <code>reject</code> 回调函数中捕获到。</p><p>我们把错误分成了几类，接下来我们就来分别处理这些错误情况。</p><h2 id="处理网络异常错误" tabindex="-1">处理网络异常错误 <a class="header-anchor" href="#处理网络异常错误" aria-label="Permalink to &quot;处理网络异常错误&quot;">​</a></h2><p>当网络出现异常（比如不通）的时候发送请求会触发 <code>XMLHttpRequest</code> 对象实例的 <code>error</code> 事件，于是我们可以在 <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget/onerror" target="_blank" rel="noreferrer"><code>onerror</code></a> 的事件回调函数中捕获此类错误。</p><p>我们在 <code>xhr</code> 函数中添加如下代码：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">request</span><span style="color:#859289;">.</span><span style="color:#A7C080;">onerror</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> function</span><span style="color:#A7C080;"> handleError</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">  reject</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">new</span><span style="color:#A7C080;"> Error</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;Network Error&#39;</span><span style="color:#D3C6AA;">))</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="处理超时错误" tabindex="-1">处理超时错误 <a class="header-anchor" href="#处理超时错误" aria-label="Permalink to &quot;处理超时错误&quot;">​</a></h2><p>我们可以设置某个请求的超时时间 <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/timeout" target="_blank" rel="noreferrer"><code>timeout</code></a>，也就是当请求发送后超过某个时间后仍然没收到响应，则请求自动终止，并触发 <code>timeout</code> 事件。</p><p>请求默认的超时时间是 0，即永不超时。所以我们首先需要允许程序可以配置超时时间：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> interface</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#D3C6AA;">  timeout</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>接着在 <code>xhr</code> 函数中添加如下代码：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E69875;">const</span><span style="color:#D3C6AA;"> { </span><span style="color:#859289;font-style:italic;">/*...*/</span><span style="color:#D3C6AA;"> timeout } </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> config</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">if</span><span style="color:#D3C6AA;"> (timeout) {</span></span>
<span class="line"><span style="color:#D3C6AA;">  request</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">timeout </span><span style="color:#E69875;">=</span><span style="color:#D3C6AA;"> timeout</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">request</span><span style="color:#859289;">.</span><span style="color:#A7C080;">ontimeout</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> function</span><span style="color:#A7C080;"> handleTimeout</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">  reject</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">new</span><span style="color:#A7C080;"> Error</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">\`Timeout of </span><span style="color:#A7C080;">\${</span><span style="color:#D3C6AA;">timeout</span><span style="color:#A7C080;">}</span><span style="color:#DBBC7F;"> ms exceeded\`</span><span style="color:#D3C6AA;">))</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="处理非-200-状态码" tabindex="-1">处理非 200 状态码 <a class="header-anchor" href="#处理非-200-状态码" aria-label="Permalink to &quot;处理非 200 状态码&quot;">​</a></h2><p>对于一个正常的请求，往往会返回 200-300 之间的 HTTP 状态码，对于不在这个区间的状态码，我们也把它们认为是一种错误的情况做处理。</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">request</span><span style="color:#859289;">.</span><span style="color:#A7C080;">onreadystatechange</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> function</span><span style="color:#A7C080;"> handleLoad</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  if</span><span style="color:#D3C6AA;"> (request</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">readyState</span><span style="color:#E69875;"> !==</span><span style="color:#D699B6;"> 4</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">  if</span><span style="color:#D3C6AA;"> (request</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">status</span><span style="color:#E69875;"> ===</span><span style="color:#D699B6;"> 0</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">    return</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> responseHeaders</span><span style="color:#E69875;"> =</span><span style="color:#A7C080;"> parseHeaders</span><span style="color:#D3C6AA;">(request</span><span style="color:#859289;">.</span><span style="color:#A7C080;">getAllResponseHeaders</span><span style="color:#D3C6AA;">())</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> responseData</span><span style="color:#E69875;"> =</span></span>
<span class="line"><span style="color:#D3C6AA;">    responseType</span><span style="color:#E69875;"> &amp;&amp;</span><span style="color:#D3C6AA;"> responseType</span><span style="color:#E69875;"> !==</span><span style="color:#DBBC7F;"> &#39;text&#39;</span><span style="color:#E69875;"> ?</span><span style="color:#D3C6AA;"> request</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">response</span><span style="color:#E69875;"> :</span><span style="color:#D3C6AA;"> request</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">responseText</span></span>
<span class="line"><span style="color:#E69875;">  const</span><span style="color:#D3C6AA;"> response</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosResponse</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    data</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> responseData,</span></span>
<span class="line"><span style="color:#D3C6AA;">    status</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> request</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">status,</span></span>
<span class="line"><span style="color:#D3C6AA;">    statusText</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> request</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">statusText,</span></span>
<span class="line"><span style="color:#D3C6AA;">    headers</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> responseHeaders,</span></span>
<span class="line"><span style="color:#D3C6AA;">    config,</span></span>
<span class="line"><span style="color:#D3C6AA;">    request</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#A7C080;">  handleResponse</span><span style="color:#D3C6AA;">(response)</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> handleResponse</span><span style="color:#D3C6AA;">(response</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosResponse</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  if</span><span style="color:#D3C6AA;"> (response</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">status</span><span style="color:#E69875;"> &gt;=</span><span style="color:#D699B6;"> 200</span><span style="color:#E69875;"> &amp;&amp;</span><span style="color:#D3C6AA;"> response</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">status</span><span style="color:#E69875;"> &lt;</span><span style="color:#D699B6;"> 300</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">    resolve</span><span style="color:#D3C6AA;">(response)</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span><span style="color:#E67E80;"> else</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">    reject</span><span style="color:#D3C6AA;">(</span><span style="color:#E67E80;">new</span><span style="color:#A7C080;"> Error</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">\`Request failed with status code </span><span style="color:#A7C080;">\${</span><span style="color:#D3C6AA;">response</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">status</span><span style="color:#A7C080;">}</span><span style="color:#DBBC7F;">\`</span><span style="color:#D3C6AA;">))</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p>我们在 <code>onreadystatechange</code> 的回调函数中，添加了对 <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/status" target="_blank" rel="noreferrer"><code>request.status</code></a> 的判断，因为当出现网络错误或者超时错误的时候，该值都为 0。</p><p>接着我们在 <code>handleResponse</code> 函数中对 <code>request.status</code> 的值再次判断，如果是 <code>2xx</code> 的状态码，则认为是一个正常的请求，否则抛错。</p><h2 id="demo-编写" tabindex="-1">demo 编写 <a class="header-anchor" href="#demo-编写" aria-label="Permalink to &quot;demo 编写&quot;">​</a></h2><p>在 <code>examples</code> 目录下创建 <code>error</code> 目录，在 <code>error</code> 目录下创建 <code>index.html</code>:</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">&lt;!</span><span style="color:#E69875;">DOCTYPE</span><span style="color:#DBBC7F;"> html</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">&lt;</span><span style="color:#E69875;">html</span><span style="color:#DBBC7F;"> lang</span><span style="color:#A7C080;">=</span><span style="color:#A7C080;">&quot;en&quot;</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">  &lt;</span><span style="color:#E69875;">head</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;</span><span style="color:#E69875;">meta</span><span style="color:#DBBC7F;"> charset</span><span style="color:#A7C080;">=</span><span style="color:#A7C080;">&quot;utf-8&quot;</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;</span><span style="color:#E69875;">title</span><span style="color:#A7C080;">&gt;</span><span style="color:#D3C6AA;">Error example</span><span style="color:#A7C080;">&lt;/</span><span style="color:#E69875;">title</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">  &lt;/</span><span style="color:#E69875;">head</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">  &lt;</span><span style="color:#E69875;">body</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">    &lt;</span><span style="color:#E69875;">script</span><span style="color:#DBBC7F;"> src</span><span style="color:#A7C080;">=</span><span style="color:#A7C080;">&quot;/__build__/error.js&quot;</span><span style="color:#A7C080;">&gt;&lt;/</span><span style="color:#E69875;">script</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">  &lt;/</span><span style="color:#E69875;">body</span><span style="color:#A7C080;">&gt;</span></span>
<span class="line"><span style="color:#A7C080;">&lt;/</span><span style="color:#E69875;">html</span><span style="color:#A7C080;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>接着创建 <code>app.ts</code> 作为入口文件：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">import</span><span style="color:#D3C6AA;"> axios </span><span style="color:#E67E80;">from</span><span style="color:#DBBC7F;"> &#39;../../src/index&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">axios</span><span style="color:#D3C6AA;">({</span></span>
<span class="line"><span style="color:#D3C6AA;">  method</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;get&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  url</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;/error/get1&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">((res) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(res)</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span><span style="color:#859289;">.</span><span style="color:#A7C080;">catch</span><span style="color:#D3C6AA;">((e) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(e)</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">axios</span><span style="color:#D3C6AA;">({</span></span>
<span class="line"><span style="color:#D3C6AA;">  method</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;get&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  url</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;/error/get&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">((res) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(res)</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span><span style="color:#859289;">.</span><span style="color:#A7C080;">catch</span><span style="color:#D3C6AA;">((e) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(e)</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">setTimeout</span><span style="color:#D3C6AA;">(() </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">  axios</span><span style="color:#D3C6AA;">({</span></span>
<span class="line"><span style="color:#D3C6AA;">    method</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;get&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">    url</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;/error/get&#39;</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">((res) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(res)</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span><span style="color:#859289;">.</span><span style="color:#A7C080;">catch</span><span style="color:#D3C6AA;">((e) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(e)</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"><span style="color:#D3C6AA;">}, </span><span style="color:#D699B6;">5000</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">axios</span><span style="color:#D3C6AA;">({</span></span>
<span class="line"><span style="color:#D3C6AA;">  method</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;get&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  url</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;/error/timeout&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  timeout</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 2000</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">((res) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(res)</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span><span style="color:#859289;">.</span><span style="color:#A7C080;">catch</span><span style="color:#D3C6AA;">((e) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(e</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">message)</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><p>接着在 <code>server.js</code> 添加新的接口路由：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D3C6AA;">router</span><span style="color:#859289;">.</span><span style="color:#A7C080;">get</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/error/get&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">(req,</span><span style="color:#D3C6AA;"> res)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  if</span><span style="color:#D3C6AA;"> (Math</span><span style="color:#859289;">.</span><span style="color:#A7C080;">random</span><span style="color:#D3C6AA;">()</span><span style="color:#E69875;"> &gt;</span><span style="color:#D699B6;"> 0</span><span style="color:#D3C6AA;">.</span><span style="color:#D699B6;">5</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    res</span><span style="color:#859289;">.</span><span style="color:#A7C080;">json</span><span style="color:#D3C6AA;">({</span></span>
<span class="line"><span style="color:#D3C6AA;">      msg</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> \`hello world\`</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span><span style="color:#E67E80;"> else</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    res</span><span style="color:#859289;">.</span><span style="color:#A7C080;">status</span><span style="color:#D3C6AA;">(</span><span style="color:#D699B6;">500</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">    res</span><span style="color:#859289;">.</span><span style="color:#A7C080;">end</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">router</span><span style="color:#859289;">.</span><span style="color:#A7C080;">get</span><span style="color:#D3C6AA;">(</span><span style="color:#DBBC7F;">&#39;/error/timeout&#39;</span><span style="color:#D3C6AA;">, </span><span style="color:#E67E80;">function</span><span style="color:#D3C6AA;">(req,</span><span style="color:#D3C6AA;"> res)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">  setTimeout</span><span style="color:#D3C6AA;">(()</span><span style="color:#E69875;"> =&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    res</span><span style="color:#859289;">.</span><span style="color:#A7C080;">json</span><span style="color:#D3C6AA;">({</span></span>
<span class="line"><span style="color:#D3C6AA;">      msg</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> \`hello world\`</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"><span style="color:#D3C6AA;">  },</span><span style="color:#D699B6;"> 3000</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>然后在命令行运行 <code>npm run dev</code>，接着打开 chrome 浏览器，访问 <code>http://localhost:8080/</code> 即可访问我们的 demo 了，我们点到 <code>Error</code> 目录下，通过开发者工具的 network 部分我们可以看到不同的错误情况。</p><p>至此我们对各种错误都做了处理，并把它们抛给了程序应用方，让他们对错误可以做进一步的处理。但是这里我们的错误都仅仅是简单的 Error 实例，只有错误文本信息，并不包含是哪个请求、请求的配置、响应对象等其它信息。那么下一节课，我们会对错误信息做增强。</p>`,31)]))}const b=n(e,[["render",o]]);export{C as __pageData,b as default};
