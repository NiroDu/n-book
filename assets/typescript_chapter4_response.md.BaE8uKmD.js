import{_ as n,c as a,o as p,ag as e}from"./chunks/framework.D-6U7MZ9.js";const d=JSON.parse('{"title":"获取响应数据","description":"","frontmatter":{},"headers":[],"relativePath":"typescript/chapter4/response.md","filePath":"typescript/chapter4/response.md","lastUpdated":1562065220000}'),l={name:"typescript/chapter4/response.md"};function o(r,s,c,t,i,y){return p(),a("div",null,s[0]||(s[0]=[e(`<h1 id="获取响应数据" tabindex="-1">获取响应数据 <a class="header-anchor" href="#获取响应数据" aria-label="Permalink to &quot;获取响应数据&quot;">​</a></h1><h2 id="需求分析" tabindex="-1">需求分析 <a class="header-anchor" href="#需求分析" aria-label="Permalink to &quot;需求分析&quot;">​</a></h2><p>在前面的章节中，我们发送的请求都可以从网络层面接收到服务端返回的数据，但是代码层面并没有做任何关于返回数据的处理。我们希望能处理服务端响应的数据，并支持 Promise 链式调用的方式，如下：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">axios</span><span style="color:#D3C6AA;">({</span></span>
<span class="line"><span style="color:#D3C6AA;">  method</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;post&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  url</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;/base/post&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  data</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    a</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 1</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">    b</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 2</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">((res) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(res)</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>我们可以拿到 <code>res</code> 对象，并且我们希望该对象包括：服务端返回的数据 <code>data</code>，HTTP 状态码<code>status</code>，状态消息 <code>statusText</code>，响应头 <code>headers</code>、请求配置对象 <code>config</code> 以及请求的 <code>XMLHttpRequest</code> 对象实例 <code>request</code>。</p><h2 id="定义接口类型" tabindex="-1">定义接口类型 <a class="header-anchor" href="#定义接口类型" aria-label="Permalink to &quot;定义接口类型&quot;">​</a></h2><p>根据需求，我们可以定义一个 <code>AxiosResponse</code> 接口类型，如下：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> interface</span><span style="color:#83C092;"> AxiosResponse</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  data</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span></span>
<span class="line"><span style="color:#D3C6AA;">  status</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> number</span></span>
<span class="line"><span style="color:#D3C6AA;">  statusText</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> string</span></span>
<span class="line"><span style="color:#D3C6AA;">  headers</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span></span>
<span class="line"><span style="color:#D3C6AA;">  config</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span></span>
<span class="line"><span style="color:#D3C6AA;">  request</span><span style="color:#859289;">:</span><span style="color:#7FBBB3;"> any</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>另外，<code>axios</code> 函数返回的是一个 <code>Promise</code> 对象，我们可以定义一个 <code>AxiosPromise</code> 接口，它继承于 <code>Promise&lt;AxiosResponse&gt;</code> 这个泛型接口：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> interface</span><span style="color:#83C092;"> AxiosPromise</span><span style="color:#E69875;"> extends</span><span style="color:#7FBBB3;"> Promise</span><span style="color:#D3C6AA;">&lt;</span><span style="color:#83C092;">AxiosResponse</span><span style="color:#D3C6AA;">&gt; {</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这样的话，当 <code>axios</code> 返回的是 <code>AxiosPromise</code> 类型，那么 <code>resolve</code> 函数中的参数就是一个 <code>AxiosResponse</code> 类型。</p><p>对于一个 AJAX 请求的 <code>response</code>，我们是可以指定它的响应的数据类型的，通过设置 <code>XMLHttpRequest</code> 对象的 <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType" target="_blank" rel="noreferrer"><code>responseType</code></a> 属性，于是我们可以给 <code>AxiosRequestConfig</code> 类型添加一个可选属性：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> interface</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#859289;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#D3C6AA;">  responseType</span><span style="color:#E69875;">?</span><span style="color:#859289;">:</span><span style="color:#83C092;"> XMLHttpRequestResponseType</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>responseType</code> 的类型是一个 <code>XMLHttpRequestResponseType</code> 类型，它的定义是 <code>&quot;&quot; | &quot;arraybuffer&quot; | &quot;blob&quot; | &quot;document&quot; | &quot;json&quot; | &quot;text&quot;</code> 字符串字面量类型。</p><h2 id="实现获取响应数据逻辑" tabindex="-1">实现获取响应数据逻辑 <a class="header-anchor" href="#实现获取响应数据逻辑" aria-label="Permalink to &quot;实现获取响应数据逻辑&quot;">​</a></h2><p>首先我们要在 <code>xhr</code> 函数添加 <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/onreadystatechange" target="_blank" rel="noreferrer"><code>onreadystatechange</code></a> 事件处理函数，并且让 <code>xhr</code> 函数返回的是 <code>AxiosPromise</code> 类型。</p><p><code>xhr.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#D699B6;">export</span><span style="color:#E67E80;"> default</span><span style="color:#E67E80;"> function</span><span style="color:#A7C080;"> xhr</span><span style="color:#D3C6AA;">(config</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosPromise</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#E67E80;"> new</span><span style="color:#7FBBB3;"> Promise</span><span style="color:#D3C6AA;">((resolve)</span><span style="color:#E69875;"> =&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E69875;">    const</span><span style="color:#D3C6AA;"> {</span><span style="color:#D3C6AA;"> data</span><span style="color:#E69875;"> =</span><span style="color:#D699B6;"> null</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> url,</span><span style="color:#D3C6AA;"> method</span><span style="color:#E69875;"> =</span><span style="color:#DBBC7F;"> &#39;get&#39;</span><span style="color:#D3C6AA;">,</span><span style="color:#D3C6AA;"> headers,</span><span style="color:#D3C6AA;"> responseType</span><span style="color:#D3C6AA;"> }</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> config</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">    const</span><span style="color:#D3C6AA;"> request</span><span style="color:#E69875;"> =</span><span style="color:#E67E80;"> new</span><span style="color:#A7C080;"> XMLHttpRequest</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E67E80;">    if</span><span style="color:#D3C6AA;"> (responseType)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">      request</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">responseType</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> responseType</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">    request</span><span style="color:#859289;">.</span><span style="color:#A7C080;">open</span><span style="color:#D3C6AA;">(method</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toUpperCase</span><span style="color:#D3C6AA;">(),</span><span style="color:#D3C6AA;"> url,</span><span style="color:#D699B6;"> true</span><span style="color:#D3C6AA;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">    request</span><span style="color:#859289;">.</span><span style="color:#A7C080;">onreadystatechange </span><span style="color:#E69875;">=</span><span style="color:#E67E80;"> function</span><span style="color:#A7C080;"> handleLoad</span><span style="color:#D3C6AA;">()</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">      if</span><span style="color:#D3C6AA;"> (request</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">readyState</span><span style="color:#E69875;"> !==</span><span style="color:#D699B6;"> 4</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">        return</span></span>
<span class="line"><span style="color:#D3C6AA;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> responseHeaders</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> request</span><span style="color:#859289;">.</span><span style="color:#A7C080;">getAllResponseHeaders</span><span style="color:#D3C6AA;">()</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> responseData</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> responseType</span><span style="color:#E69875;"> &amp;&amp;</span><span style="color:#D3C6AA;"> responseType</span><span style="color:#E69875;"> !==</span><span style="color:#DBBC7F;"> &#39;text&#39;</span><span style="color:#E69875;"> ?</span><span style="color:#D3C6AA;"> request</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">response</span><span style="color:#E69875;"> :</span><span style="color:#D3C6AA;"> request</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">responseText</span></span>
<span class="line"><span style="color:#E69875;">      const</span><span style="color:#D3C6AA;"> response</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosResponse</span><span style="color:#E69875;"> =</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">        data</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> responseData,</span></span>
<span class="line"><span style="color:#D3C6AA;">        status</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> request</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">status,</span></span>
<span class="line"><span style="color:#D3C6AA;">        statusText</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> request</span><span style="color:#859289;">.</span><span style="color:#D3C6AA;">statusText,</span></span>
<span class="line"><span style="color:#D3C6AA;">        headers</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> responseHeaders,</span></span>
<span class="line"><span style="color:#D3C6AA;">        config,</span></span>
<span class="line"><span style="color:#D3C6AA;">        request</span></span>
<span class="line"><span style="color:#D3C6AA;">      }</span></span>
<span class="line"><span style="color:#A7C080;">      resolve</span><span style="color:#D3C6AA;">(response)</span></span>
<span class="line"><span style="color:#D3C6AA;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">    Object</span><span style="color:#859289;">.</span><span style="color:#A7C080;">keys</span><span style="color:#D3C6AA;">(headers)</span><span style="color:#859289;">.</span><span style="color:#A7C080;">forEach</span><span style="color:#D3C6AA;">((name)</span><span style="color:#E69875;"> =&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">      if</span><span style="color:#D3C6AA;"> (data</span><span style="color:#E69875;"> ===</span><span style="color:#D699B6;"> null</span><span style="color:#E69875;"> &amp;&amp;</span><span style="color:#D3C6AA;"> name</span><span style="color:#859289;">.</span><span style="color:#A7C080;">toLowerCase</span><span style="color:#D3C6AA;">()</span><span style="color:#E69875;"> ===</span><span style="color:#DBBC7F;"> &#39;content-type&#39;</span><span style="color:#D3C6AA;">)</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#E67E80;">        delete</span><span style="color:#D3C6AA;"> headers[name]</span></span>
<span class="line"><span style="color:#D3C6AA;">      }</span><span style="color:#E67E80;"> else</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">        request</span><span style="color:#859289;">.</span><span style="color:#A7C080;">setRequestHeader</span><span style="color:#D3C6AA;">(name,</span><span style="color:#D3C6AA;"> headers[name])</span></span>
<span class="line"><span style="color:#D3C6AA;">      }</span></span>
<span class="line"><span style="color:#D3C6AA;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D3C6AA;">    request</span><span style="color:#859289;">.</span><span style="color:#A7C080;">send</span><span style="color:#D3C6AA;">(data)</span></span>
<span class="line"><span style="color:#D3C6AA;">  })</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><p>注意，我们这里还判断了如果 <code>config</code> 中配置了 <code>responseType</code>，我们把它设置到 <code>request.responseType</code> 中。在 <code>onreadystatechange</code> 事件函数中，我们构造了 <code>AxiosResponse</code> 类型的 <code>reponse</code> 对象，并把它 <code>resolve</code> 出去。</p><p>修改了 <code>xhr</code> 函数，我们同样也要对应修改 <code>axios</code> 函数：</p><p><code>index.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E67E80;">function</span><span style="color:#A7C080;"> axios</span><span style="color:#D3C6AA;">(config</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosRequestConfig</span><span style="color:#D3C6AA;">)</span><span style="color:#859289;">:</span><span style="color:#83C092;"> AxiosPromise</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#A7C080;">  processConfig</span><span style="color:#D3C6AA;">(config)</span></span>
<span class="line"><span style="color:#E67E80;">  return</span><span style="color:#A7C080;"> xhr</span><span style="color:#D3C6AA;">(config)</span></span>
<span class="line"><span style="color:#D3C6AA;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这样我们就实现了 <code>axios</code> 函数的 Promise 化。</p><h2 id="demo-编写" tabindex="-1">demo 编写 <a class="header-anchor" href="#demo-编写" aria-label="Permalink to &quot;demo 编写&quot;">​</a></h2><p>我们在 <code>examples/base/app.ts</code> 文件中添加 2 段代码：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki everforest-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#A7C080;">axios</span><span style="color:#D3C6AA;">({</span></span>
<span class="line"><span style="color:#D3C6AA;">  method</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;post&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  url</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;/base/post&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  data</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    a</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 1</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">    b</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 2</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">((res) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(res)</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A7C080;">axios</span><span style="color:#D3C6AA;">({</span></span>
<span class="line"><span style="color:#D3C6AA;">  method</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;post&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  url</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;/base/post&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  responseType</span><span style="color:#859289;">:</span><span style="color:#DBBC7F;"> &#39;json&#39;</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">  data</span><span style="color:#859289;">:</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">    a</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 3</span><span style="color:#D3C6AA;">,</span></span>
<span class="line"><span style="color:#D3C6AA;">    b</span><span style="color:#859289;">:</span><span style="color:#D699B6;"> 4</span></span>
<span class="line"><span style="color:#D3C6AA;">  }</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span><span style="color:#859289;">.</span><span style="color:#A7C080;">then</span><span style="color:#D3C6AA;">((res) </span><span style="color:#E69875;">=&gt;</span><span style="color:#D3C6AA;"> {</span></span>
<span class="line"><span style="color:#D3C6AA;">  console</span><span style="color:#859289;">.</span><span style="color:#A7C080;">log</span><span style="color:#D3C6AA;">(res)</span></span>
<span class="line"><span style="color:#D3C6AA;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>我们打开浏览器运行 demo，看一下结果，发现我们可以正常 log 出这个 <code>res</code> 变量，它包含 <code>AxiosResponse</code> 类型中定义的那些属性，不过我们发现 2 个小问题：第一个是 <code>headers</code> 属性是一个字符串，我们需要把它解析成对象类型；第二个是在第一个请求中，得到的数据是一个 JSON 字符串，我们也需要把它转换成对象类型。</p><p>那么下一小节，我们将来解决第一个问题，对于响应的 <code>header</code> 做处理。</p>`,28)]))}const b=n(l,[["render",o]]);export{d as __pageData,b as default};
